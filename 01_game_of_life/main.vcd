$date
	Mon Oct  4 18:34:05 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_main $end
$scope module UUT $end
$var wire 2 ! buttons [1:0] $end
$var wire 1 " clk $end
$var wire 8 # rows [7:0] $end
$var wire 8 $ cols [7:0] $end
$var wire 100 % bordered_cells_q [99:0] $end
$var wire 100 & bordered_cells_d [99:0] $end
$var reg 100 ' bordered_cells_0 [99:0] $end
$var reg 64 ( cells_0 [63:0] $end
$var reg 64 ) cells_q [63:0] $end
$var reg 2 * display_counter [1:0] $end
$var reg 2 + game_counter [1:0] $end
$var reg 2 , leds [1:0] $end
$var reg 3 - rgb [2:0] $end
$var reg 1 . rst $end
$var reg 1 / rst_game $end
$var reg 1 0 step_game $end
$var reg 4 1 x [3:0] $end
$scope function cell_index $end
$var integer 32 2 i [31:0] $end
$var integer 32 3 j [31:0] $end
$upscope $end
$scope begin cells_x[0] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[1] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 4 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 5 state_0 $end
$var wire 4 6 living_neighbors [3:0] $end
$var reg 1 7 state_d $end
$var reg 1 8 state_q $end
$var reg 1 9 stay_alive $end
$scope module living $end
$var wire 1 : gnd $end
$var wire 8 ; in [7:0] $end
$var wire 3 < sum1 [2:0] $end
$var wire 3 = sum0 [2:0] $end
$var wire 4 > num [3:0] $end
$var wire 2 ? count3 [1:0] $end
$var wire 2 @ count2 [1:0] $end
$var wire 2 A count1 [1:0] $end
$var wire 2 B count0 [1:0] $end
$scope module adder0 $end
$var wire 2 C a [1:0] $end
$var wire 2 D b [1:0] $end
$var wire 2 E sum [1:0] $end
$var wire 1 F carry0 $end
$var wire 1 G Cout $end
$scope module adder0 $end
$var wire 1 H Cin $end
$var wire 1 I a $end
$var wire 1 J b $end
$var reg 1 F Cout $end
$var reg 1 K p $end
$var reg 1 L q $end
$var reg 1 M sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 F Cin $end
$var wire 1 N a $end
$var wire 1 O b $end
$var reg 1 G Cout $end
$var reg 1 P p $end
$var reg 1 Q q $end
$var reg 1 R sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 S a [1:0] $end
$var wire 2 T b [1:0] $end
$var wire 2 U sum [1:0] $end
$var wire 1 V carry0 $end
$var wire 1 W Cout $end
$scope module adder0 $end
$var wire 1 X Cin $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var reg 1 V Cout $end
$var reg 1 [ p $end
$var reg 1 \ q $end
$var reg 1 ] sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 V Cin $end
$var wire 1 ^ a $end
$var wire 1 _ b $end
$var reg 1 W Cout $end
$var reg 1 ` p $end
$var reg 1 a q $end
$var reg 1 b sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 : Cin $end
$var wire 1 c a $end
$var wire 1 d b $end
$var reg 1 e Cout $end
$var reg 1 f p $end
$var reg 1 g q $end
$var reg 1 h sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 : Cin $end
$var wire 1 i a $end
$var wire 1 j b $end
$var reg 1 k Cout $end
$var reg 1 l p $end
$var reg 1 m q $end
$var reg 1 n sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 : Cin $end
$var wire 1 o a $end
$var wire 1 p b $end
$var reg 1 q Cout $end
$var reg 1 r p $end
$var reg 1 s q $end
$var reg 1 t sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 : Cin $end
$var wire 1 u a $end
$var wire 1 v b $end
$var reg 1 w Cout $end
$var reg 1 x p $end
$var reg 1 y q $end
$var reg 1 z sum $end
$upscope $end
$scope module total $end
$var wire 3 { a [2:0] $end
$var wire 3 | b [2:0] $end
$var wire 1 } gnd $end
$var wire 3 ~ sum [2:0] $end
$var wire 1 !" carry1 $end
$var wire 1 "" carry0 $end
$var wire 1 #" Cout $end
$scope module adder0 $end
$var wire 1 } Cin $end
$var wire 1 $" a $end
$var wire 1 %" b $end
$var reg 1 "" Cout $end
$var reg 1 &" p $end
$var reg 1 '" q $end
$var reg 1 (" sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 "" Cin $end
$var wire 1 )" a $end
$var wire 1 *" b $end
$var reg 1 !" Cout $end
$var reg 1 +" p $end
$var reg 1 ," q $end
$var reg 1 -" sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 !" Cin $end
$var wire 1 ." a $end
$var wire 1 /" b $end
$var reg 1 #" Cout $end
$var reg 1 0" p $end
$var reg 1 1" q $end
$var reg 1 2" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 3" neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 4" state_0 $end
$var wire 4 5" living_neighbors [3:0] $end
$var reg 1 6" state_d $end
$var reg 1 7" state_q $end
$var reg 1 8" stay_alive $end
$scope module living $end
$var wire 1 9" gnd $end
$var wire 8 :" in [7:0] $end
$var wire 3 ;" sum1 [2:0] $end
$var wire 3 <" sum0 [2:0] $end
$var wire 4 =" num [3:0] $end
$var wire 2 >" count3 [1:0] $end
$var wire 2 ?" count2 [1:0] $end
$var wire 2 @" count1 [1:0] $end
$var wire 2 A" count0 [1:0] $end
$scope module adder0 $end
$var wire 2 B" a [1:0] $end
$var wire 2 C" b [1:0] $end
$var wire 2 D" sum [1:0] $end
$var wire 1 E" carry0 $end
$var wire 1 F" Cout $end
$scope module adder0 $end
$var wire 1 G" Cin $end
$var wire 1 H" a $end
$var wire 1 I" b $end
$var reg 1 E" Cout $end
$var reg 1 J" p $end
$var reg 1 K" q $end
$var reg 1 L" sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 E" Cin $end
$var wire 1 M" a $end
$var wire 1 N" b $end
$var reg 1 F" Cout $end
$var reg 1 O" p $end
$var reg 1 P" q $end
$var reg 1 Q" sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 R" a [1:0] $end
$var wire 2 S" b [1:0] $end
$var wire 2 T" sum [1:0] $end
$var wire 1 U" carry0 $end
$var wire 1 V" Cout $end
$scope module adder0 $end
$var wire 1 W" Cin $end
$var wire 1 X" a $end
$var wire 1 Y" b $end
$var reg 1 U" Cout $end
$var reg 1 Z" p $end
$var reg 1 [" q $end
$var reg 1 \" sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 U" Cin $end
$var wire 1 ]" a $end
$var wire 1 ^" b $end
$var reg 1 V" Cout $end
$var reg 1 _" p $end
$var reg 1 `" q $end
$var reg 1 a" sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 9" Cin $end
$var wire 1 b" a $end
$var wire 1 c" b $end
$var reg 1 d" Cout $end
$var reg 1 e" p $end
$var reg 1 f" q $end
$var reg 1 g" sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 9" Cin $end
$var wire 1 h" a $end
$var wire 1 i" b $end
$var reg 1 j" Cout $end
$var reg 1 k" p $end
$var reg 1 l" q $end
$var reg 1 m" sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 9" Cin $end
$var wire 1 n" a $end
$var wire 1 o" b $end
$var reg 1 p" Cout $end
$var reg 1 q" p $end
$var reg 1 r" q $end
$var reg 1 s" sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 9" Cin $end
$var wire 1 t" a $end
$var wire 1 u" b $end
$var reg 1 v" Cout $end
$var reg 1 w" p $end
$var reg 1 x" q $end
$var reg 1 y" sum $end
$upscope $end
$scope module total $end
$var wire 3 z" a [2:0] $end
$var wire 3 {" b [2:0] $end
$var wire 1 |" gnd $end
$var wire 3 }" sum [2:0] $end
$var wire 1 ~" carry1 $end
$var wire 1 !# carry0 $end
$var wire 1 "# Cout $end
$scope module adder0 $end
$var wire 1 |" Cin $end
$var wire 1 ## a $end
$var wire 1 $# b $end
$var reg 1 !# Cout $end
$var reg 1 %# p $end
$var reg 1 &# q $end
$var reg 1 '# sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 !# Cin $end
$var wire 1 (# a $end
$var wire 1 )# b $end
$var reg 1 ~" Cout $end
$var reg 1 *# p $end
$var reg 1 +# q $end
$var reg 1 ,# sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 ~" Cin $end
$var wire 1 -# a $end
$var wire 1 .# b $end
$var reg 1 "# Cout $end
$var reg 1 /# p $end
$var reg 1 0# q $end
$var reg 1 1# sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 2# neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 3# state_0 $end
$var wire 4 4# living_neighbors [3:0] $end
$var reg 1 5# state_d $end
$var reg 1 6# state_q $end
$var reg 1 7# stay_alive $end
$scope module living $end
$var wire 1 8# gnd $end
$var wire 8 9# in [7:0] $end
$var wire 3 :# sum1 [2:0] $end
$var wire 3 ;# sum0 [2:0] $end
$var wire 4 <# num [3:0] $end
$var wire 2 =# count3 [1:0] $end
$var wire 2 ># count2 [1:0] $end
$var wire 2 ?# count1 [1:0] $end
$var wire 2 @# count0 [1:0] $end
$scope module adder0 $end
$var wire 2 A# a [1:0] $end
$var wire 2 B# b [1:0] $end
$var wire 2 C# sum [1:0] $end
$var wire 1 D# carry0 $end
$var wire 1 E# Cout $end
$scope module adder0 $end
$var wire 1 F# Cin $end
$var wire 1 G# a $end
$var wire 1 H# b $end
$var reg 1 D# Cout $end
$var reg 1 I# p $end
$var reg 1 J# q $end
$var reg 1 K# sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 D# Cin $end
$var wire 1 L# a $end
$var wire 1 M# b $end
$var reg 1 E# Cout $end
$var reg 1 N# p $end
$var reg 1 O# q $end
$var reg 1 P# sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 Q# a [1:0] $end
$var wire 2 R# b [1:0] $end
$var wire 2 S# sum [1:0] $end
$var wire 1 T# carry0 $end
$var wire 1 U# Cout $end
$scope module adder0 $end
$var wire 1 V# Cin $end
$var wire 1 W# a $end
$var wire 1 X# b $end
$var reg 1 T# Cout $end
$var reg 1 Y# p $end
$var reg 1 Z# q $end
$var reg 1 [# sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 T# Cin $end
$var wire 1 \# a $end
$var wire 1 ]# b $end
$var reg 1 U# Cout $end
$var reg 1 ^# p $end
$var reg 1 _# q $end
$var reg 1 `# sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 8# Cin $end
$var wire 1 a# a $end
$var wire 1 b# b $end
$var reg 1 c# Cout $end
$var reg 1 d# p $end
$var reg 1 e# q $end
$var reg 1 f# sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 8# Cin $end
$var wire 1 g# a $end
$var wire 1 h# b $end
$var reg 1 i# Cout $end
$var reg 1 j# p $end
$var reg 1 k# q $end
$var reg 1 l# sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 8# Cin $end
$var wire 1 m# a $end
$var wire 1 n# b $end
$var reg 1 o# Cout $end
$var reg 1 p# p $end
$var reg 1 q# q $end
$var reg 1 r# sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 8# Cin $end
$var wire 1 s# a $end
$var wire 1 t# b $end
$var reg 1 u# Cout $end
$var reg 1 v# p $end
$var reg 1 w# q $end
$var reg 1 x# sum $end
$upscope $end
$scope module total $end
$var wire 3 y# a [2:0] $end
$var wire 3 z# b [2:0] $end
$var wire 1 {# gnd $end
$var wire 3 |# sum [2:0] $end
$var wire 1 }# carry1 $end
$var wire 1 ~# carry0 $end
$var wire 1 !$ Cout $end
$scope module adder0 $end
$var wire 1 {# Cin $end
$var wire 1 "$ a $end
$var wire 1 #$ b $end
$var reg 1 ~# Cout $end
$var reg 1 $$ p $end
$var reg 1 %$ q $end
$var reg 1 &$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ~# Cin $end
$var wire 1 '$ a $end
$var wire 1 ($ b $end
$var reg 1 }# Cout $end
$var reg 1 )$ p $end
$var reg 1 *$ q $end
$var reg 1 +$ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 }# Cin $end
$var wire 1 ,$ a $end
$var wire 1 -$ b $end
$var reg 1 !$ Cout $end
$var reg 1 .$ p $end
$var reg 1 /$ q $end
$var reg 1 0$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 1$ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 2$ state_0 $end
$var wire 4 3$ living_neighbors [3:0] $end
$var reg 1 4$ state_d $end
$var reg 1 5$ state_q $end
$var reg 1 6$ stay_alive $end
$scope module living $end
$var wire 1 7$ gnd $end
$var wire 8 8$ in [7:0] $end
$var wire 3 9$ sum1 [2:0] $end
$var wire 3 :$ sum0 [2:0] $end
$var wire 4 ;$ num [3:0] $end
$var wire 2 <$ count3 [1:0] $end
$var wire 2 =$ count2 [1:0] $end
$var wire 2 >$ count1 [1:0] $end
$var wire 2 ?$ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 @$ a [1:0] $end
$var wire 2 A$ b [1:0] $end
$var wire 2 B$ sum [1:0] $end
$var wire 1 C$ carry0 $end
$var wire 1 D$ Cout $end
$scope module adder0 $end
$var wire 1 E$ Cin $end
$var wire 1 F$ a $end
$var wire 1 G$ b $end
$var reg 1 C$ Cout $end
$var reg 1 H$ p $end
$var reg 1 I$ q $end
$var reg 1 J$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 C$ Cin $end
$var wire 1 K$ a $end
$var wire 1 L$ b $end
$var reg 1 D$ Cout $end
$var reg 1 M$ p $end
$var reg 1 N$ q $end
$var reg 1 O$ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 P$ a [1:0] $end
$var wire 2 Q$ b [1:0] $end
$var wire 2 R$ sum [1:0] $end
$var wire 1 S$ carry0 $end
$var wire 1 T$ Cout $end
$scope module adder0 $end
$var wire 1 U$ Cin $end
$var wire 1 V$ a $end
$var wire 1 W$ b $end
$var reg 1 S$ Cout $end
$var reg 1 X$ p $end
$var reg 1 Y$ q $end
$var reg 1 Z$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 S$ Cin $end
$var wire 1 [$ a $end
$var wire 1 \$ b $end
$var reg 1 T$ Cout $end
$var reg 1 ]$ p $end
$var reg 1 ^$ q $end
$var reg 1 _$ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 7$ Cin $end
$var wire 1 `$ a $end
$var wire 1 a$ b $end
$var reg 1 b$ Cout $end
$var reg 1 c$ p $end
$var reg 1 d$ q $end
$var reg 1 e$ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 7$ Cin $end
$var wire 1 f$ a $end
$var wire 1 g$ b $end
$var reg 1 h$ Cout $end
$var reg 1 i$ p $end
$var reg 1 j$ q $end
$var reg 1 k$ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 7$ Cin $end
$var wire 1 l$ a $end
$var wire 1 m$ b $end
$var reg 1 n$ Cout $end
$var reg 1 o$ p $end
$var reg 1 p$ q $end
$var reg 1 q$ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 7$ Cin $end
$var wire 1 r$ a $end
$var wire 1 s$ b $end
$var reg 1 t$ Cout $end
$var reg 1 u$ p $end
$var reg 1 v$ q $end
$var reg 1 w$ sum $end
$upscope $end
$scope module total $end
$var wire 3 x$ a [2:0] $end
$var wire 3 y$ b [2:0] $end
$var wire 1 z$ gnd $end
$var wire 3 {$ sum [2:0] $end
$var wire 1 |$ carry1 $end
$var wire 1 }$ carry0 $end
$var wire 1 ~$ Cout $end
$scope module adder0 $end
$var wire 1 z$ Cin $end
$var wire 1 !% a $end
$var wire 1 "% b $end
$var reg 1 }$ Cout $end
$var reg 1 #% p $end
$var reg 1 $% q $end
$var reg 1 %% sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 }$ Cin $end
$var wire 1 &% a $end
$var wire 1 '% b $end
$var reg 1 |$ Cout $end
$var reg 1 (% p $end
$var reg 1 )% q $end
$var reg 1 *% sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 |$ Cin $end
$var wire 1 +% a $end
$var wire 1 ,% b $end
$var reg 1 ~$ Cout $end
$var reg 1 -% p $end
$var reg 1 .% q $end
$var reg 1 /% sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 0% neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 1% state_0 $end
$var wire 4 2% living_neighbors [3:0] $end
$var reg 1 3% state_d $end
$var reg 1 4% state_q $end
$var reg 1 5% stay_alive $end
$scope module living $end
$var wire 1 6% gnd $end
$var wire 8 7% in [7:0] $end
$var wire 3 8% sum1 [2:0] $end
$var wire 3 9% sum0 [2:0] $end
$var wire 4 :% num [3:0] $end
$var wire 2 ;% count3 [1:0] $end
$var wire 2 <% count2 [1:0] $end
$var wire 2 =% count1 [1:0] $end
$var wire 2 >% count0 [1:0] $end
$scope module adder0 $end
$var wire 2 ?% a [1:0] $end
$var wire 2 @% b [1:0] $end
$var wire 2 A% sum [1:0] $end
$var wire 1 B% carry0 $end
$var wire 1 C% Cout $end
$scope module adder0 $end
$var wire 1 D% Cin $end
$var wire 1 E% a $end
$var wire 1 F% b $end
$var reg 1 B% Cout $end
$var reg 1 G% p $end
$var reg 1 H% q $end
$var reg 1 I% sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 B% Cin $end
$var wire 1 J% a $end
$var wire 1 K% b $end
$var reg 1 C% Cout $end
$var reg 1 L% p $end
$var reg 1 M% q $end
$var reg 1 N% sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 O% a [1:0] $end
$var wire 2 P% b [1:0] $end
$var wire 2 Q% sum [1:0] $end
$var wire 1 R% carry0 $end
$var wire 1 S% Cout $end
$scope module adder0 $end
$var wire 1 T% Cin $end
$var wire 1 U% a $end
$var wire 1 V% b $end
$var reg 1 R% Cout $end
$var reg 1 W% p $end
$var reg 1 X% q $end
$var reg 1 Y% sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 R% Cin $end
$var wire 1 Z% a $end
$var wire 1 [% b $end
$var reg 1 S% Cout $end
$var reg 1 \% p $end
$var reg 1 ]% q $end
$var reg 1 ^% sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 6% Cin $end
$var wire 1 _% a $end
$var wire 1 `% b $end
$var reg 1 a% Cout $end
$var reg 1 b% p $end
$var reg 1 c% q $end
$var reg 1 d% sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 6% Cin $end
$var wire 1 e% a $end
$var wire 1 f% b $end
$var reg 1 g% Cout $end
$var reg 1 h% p $end
$var reg 1 i% q $end
$var reg 1 j% sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 6% Cin $end
$var wire 1 k% a $end
$var wire 1 l% b $end
$var reg 1 m% Cout $end
$var reg 1 n% p $end
$var reg 1 o% q $end
$var reg 1 p% sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 6% Cin $end
$var wire 1 q% a $end
$var wire 1 r% b $end
$var reg 1 s% Cout $end
$var reg 1 t% p $end
$var reg 1 u% q $end
$var reg 1 v% sum $end
$upscope $end
$scope module total $end
$var wire 3 w% a [2:0] $end
$var wire 3 x% b [2:0] $end
$var wire 1 y% gnd $end
$var wire 3 z% sum [2:0] $end
$var wire 1 {% carry1 $end
$var wire 1 |% carry0 $end
$var wire 1 }% Cout $end
$scope module adder0 $end
$var wire 1 y% Cin $end
$var wire 1 ~% a $end
$var wire 1 !& b $end
$var reg 1 |% Cout $end
$var reg 1 "& p $end
$var reg 1 #& q $end
$var reg 1 $& sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 |% Cin $end
$var wire 1 %& a $end
$var wire 1 && b $end
$var reg 1 {% Cout $end
$var reg 1 '& p $end
$var reg 1 (& q $end
$var reg 1 )& sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 {% Cin $end
$var wire 1 *& a $end
$var wire 1 +& b $end
$var reg 1 }% Cout $end
$var reg 1 ,& p $end
$var reg 1 -& q $end
$var reg 1 .& sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 /& neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 0& state_0 $end
$var wire 4 1& living_neighbors [3:0] $end
$var reg 1 2& state_d $end
$var reg 1 3& state_q $end
$var reg 1 4& stay_alive $end
$scope module living $end
$var wire 1 5& gnd $end
$var wire 8 6& in [7:0] $end
$var wire 3 7& sum1 [2:0] $end
$var wire 3 8& sum0 [2:0] $end
$var wire 4 9& num [3:0] $end
$var wire 2 :& count3 [1:0] $end
$var wire 2 ;& count2 [1:0] $end
$var wire 2 <& count1 [1:0] $end
$var wire 2 =& count0 [1:0] $end
$scope module adder0 $end
$var wire 2 >& a [1:0] $end
$var wire 2 ?& b [1:0] $end
$var wire 2 @& sum [1:0] $end
$var wire 1 A& carry0 $end
$var wire 1 B& Cout $end
$scope module adder0 $end
$var wire 1 C& Cin $end
$var wire 1 D& a $end
$var wire 1 E& b $end
$var reg 1 A& Cout $end
$var reg 1 F& p $end
$var reg 1 G& q $end
$var reg 1 H& sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 A& Cin $end
$var wire 1 I& a $end
$var wire 1 J& b $end
$var reg 1 B& Cout $end
$var reg 1 K& p $end
$var reg 1 L& q $end
$var reg 1 M& sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 N& a [1:0] $end
$var wire 2 O& b [1:0] $end
$var wire 2 P& sum [1:0] $end
$var wire 1 Q& carry0 $end
$var wire 1 R& Cout $end
$scope module adder0 $end
$var wire 1 S& Cin $end
$var wire 1 T& a $end
$var wire 1 U& b $end
$var reg 1 Q& Cout $end
$var reg 1 V& p $end
$var reg 1 W& q $end
$var reg 1 X& sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 Q& Cin $end
$var wire 1 Y& a $end
$var wire 1 Z& b $end
$var reg 1 R& Cout $end
$var reg 1 [& p $end
$var reg 1 \& q $end
$var reg 1 ]& sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 5& Cin $end
$var wire 1 ^& a $end
$var wire 1 _& b $end
$var reg 1 `& Cout $end
$var reg 1 a& p $end
$var reg 1 b& q $end
$var reg 1 c& sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 5& Cin $end
$var wire 1 d& a $end
$var wire 1 e& b $end
$var reg 1 f& Cout $end
$var reg 1 g& p $end
$var reg 1 h& q $end
$var reg 1 i& sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 5& Cin $end
$var wire 1 j& a $end
$var wire 1 k& b $end
$var reg 1 l& Cout $end
$var reg 1 m& p $end
$var reg 1 n& q $end
$var reg 1 o& sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 5& Cin $end
$var wire 1 p& a $end
$var wire 1 q& b $end
$var reg 1 r& Cout $end
$var reg 1 s& p $end
$var reg 1 t& q $end
$var reg 1 u& sum $end
$upscope $end
$scope module total $end
$var wire 3 v& a [2:0] $end
$var wire 3 w& b [2:0] $end
$var wire 1 x& gnd $end
$var wire 3 y& sum [2:0] $end
$var wire 1 z& carry1 $end
$var wire 1 {& carry0 $end
$var wire 1 |& Cout $end
$scope module adder0 $end
$var wire 1 x& Cin $end
$var wire 1 }& a $end
$var wire 1 ~& b $end
$var reg 1 {& Cout $end
$var reg 1 !' p $end
$var reg 1 "' q $end
$var reg 1 #' sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 {& Cin $end
$var wire 1 $' a $end
$var wire 1 %' b $end
$var reg 1 z& Cout $end
$var reg 1 &' p $end
$var reg 1 '' q $end
$var reg 1 (' sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 z& Cin $end
$var wire 1 )' a $end
$var wire 1 *' b $end
$var reg 1 |& Cout $end
$var reg 1 +' p $end
$var reg 1 ,' q $end
$var reg 1 -' sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 .' neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 /' state_0 $end
$var wire 4 0' living_neighbors [3:0] $end
$var reg 1 1' state_d $end
$var reg 1 2' state_q $end
$var reg 1 3' stay_alive $end
$scope module living $end
$var wire 1 4' gnd $end
$var wire 8 5' in [7:0] $end
$var wire 3 6' sum1 [2:0] $end
$var wire 3 7' sum0 [2:0] $end
$var wire 4 8' num [3:0] $end
$var wire 2 9' count3 [1:0] $end
$var wire 2 :' count2 [1:0] $end
$var wire 2 ;' count1 [1:0] $end
$var wire 2 <' count0 [1:0] $end
$scope module adder0 $end
$var wire 2 =' a [1:0] $end
$var wire 2 >' b [1:0] $end
$var wire 2 ?' sum [1:0] $end
$var wire 1 @' carry0 $end
$var wire 1 A' Cout $end
$scope module adder0 $end
$var wire 1 B' Cin $end
$var wire 1 C' a $end
$var wire 1 D' b $end
$var reg 1 @' Cout $end
$var reg 1 E' p $end
$var reg 1 F' q $end
$var reg 1 G' sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 @' Cin $end
$var wire 1 H' a $end
$var wire 1 I' b $end
$var reg 1 A' Cout $end
$var reg 1 J' p $end
$var reg 1 K' q $end
$var reg 1 L' sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 M' a [1:0] $end
$var wire 2 N' b [1:0] $end
$var wire 2 O' sum [1:0] $end
$var wire 1 P' carry0 $end
$var wire 1 Q' Cout $end
$scope module adder0 $end
$var wire 1 R' Cin $end
$var wire 1 S' a $end
$var wire 1 T' b $end
$var reg 1 P' Cout $end
$var reg 1 U' p $end
$var reg 1 V' q $end
$var reg 1 W' sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 P' Cin $end
$var wire 1 X' a $end
$var wire 1 Y' b $end
$var reg 1 Q' Cout $end
$var reg 1 Z' p $end
$var reg 1 [' q $end
$var reg 1 \' sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 4' Cin $end
$var wire 1 ]' a $end
$var wire 1 ^' b $end
$var reg 1 _' Cout $end
$var reg 1 `' p $end
$var reg 1 a' q $end
$var reg 1 b' sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 4' Cin $end
$var wire 1 c' a $end
$var wire 1 d' b $end
$var reg 1 e' Cout $end
$var reg 1 f' p $end
$var reg 1 g' q $end
$var reg 1 h' sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 4' Cin $end
$var wire 1 i' a $end
$var wire 1 j' b $end
$var reg 1 k' Cout $end
$var reg 1 l' p $end
$var reg 1 m' q $end
$var reg 1 n' sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 4' Cin $end
$var wire 1 o' a $end
$var wire 1 p' b $end
$var reg 1 q' Cout $end
$var reg 1 r' p $end
$var reg 1 s' q $end
$var reg 1 t' sum $end
$upscope $end
$scope module total $end
$var wire 3 u' a [2:0] $end
$var wire 3 v' b [2:0] $end
$var wire 1 w' gnd $end
$var wire 3 x' sum [2:0] $end
$var wire 1 y' carry1 $end
$var wire 1 z' carry0 $end
$var wire 1 {' Cout $end
$scope module adder0 $end
$var wire 1 w' Cin $end
$var wire 1 |' a $end
$var wire 1 }' b $end
$var reg 1 z' Cout $end
$var reg 1 ~' p $end
$var reg 1 !( q $end
$var reg 1 "( sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 z' Cin $end
$var wire 1 #( a $end
$var wire 1 $( b $end
$var reg 1 y' Cout $end
$var reg 1 %( p $end
$var reg 1 &( q $end
$var reg 1 '( sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 y' Cin $end
$var wire 1 (( a $end
$var wire 1 )( b $end
$var reg 1 {' Cout $end
$var reg 1 *( p $end
$var reg 1 +( q $end
$var reg 1 ,( sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 -( neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 .( state_0 $end
$var wire 4 /( living_neighbors [3:0] $end
$var reg 1 0( state_d $end
$var reg 1 1( state_q $end
$var reg 1 2( stay_alive $end
$scope module living $end
$var wire 1 3( gnd $end
$var wire 8 4( in [7:0] $end
$var wire 3 5( sum1 [2:0] $end
$var wire 3 6( sum0 [2:0] $end
$var wire 4 7( num [3:0] $end
$var wire 2 8( count3 [1:0] $end
$var wire 2 9( count2 [1:0] $end
$var wire 2 :( count1 [1:0] $end
$var wire 2 ;( count0 [1:0] $end
$scope module adder0 $end
$var wire 2 <( a [1:0] $end
$var wire 2 =( b [1:0] $end
$var wire 2 >( sum [1:0] $end
$var wire 1 ?( carry0 $end
$var wire 1 @( Cout $end
$scope module adder0 $end
$var wire 1 A( Cin $end
$var wire 1 B( a $end
$var wire 1 C( b $end
$var reg 1 ?( Cout $end
$var reg 1 D( p $end
$var reg 1 E( q $end
$var reg 1 F( sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ?( Cin $end
$var wire 1 G( a $end
$var wire 1 H( b $end
$var reg 1 @( Cout $end
$var reg 1 I( p $end
$var reg 1 J( q $end
$var reg 1 K( sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 L( a [1:0] $end
$var wire 2 M( b [1:0] $end
$var wire 2 N( sum [1:0] $end
$var wire 1 O( carry0 $end
$var wire 1 P( Cout $end
$scope module adder0 $end
$var wire 1 Q( Cin $end
$var wire 1 R( a $end
$var wire 1 S( b $end
$var reg 1 O( Cout $end
$var reg 1 T( p $end
$var reg 1 U( q $end
$var reg 1 V( sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 O( Cin $end
$var wire 1 W( a $end
$var wire 1 X( b $end
$var reg 1 P( Cout $end
$var reg 1 Y( p $end
$var reg 1 Z( q $end
$var reg 1 [( sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 3( Cin $end
$var wire 1 \( a $end
$var wire 1 ]( b $end
$var reg 1 ^( Cout $end
$var reg 1 _( p $end
$var reg 1 `( q $end
$var reg 1 a( sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 3( Cin $end
$var wire 1 b( a $end
$var wire 1 c( b $end
$var reg 1 d( Cout $end
$var reg 1 e( p $end
$var reg 1 f( q $end
$var reg 1 g( sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 3( Cin $end
$var wire 1 h( a $end
$var wire 1 i( b $end
$var reg 1 j( Cout $end
$var reg 1 k( p $end
$var reg 1 l( q $end
$var reg 1 m( sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 3( Cin $end
$var wire 1 n( a $end
$var wire 1 o( b $end
$var reg 1 p( Cout $end
$var reg 1 q( p $end
$var reg 1 r( q $end
$var reg 1 s( sum $end
$upscope $end
$scope module total $end
$var wire 3 t( a [2:0] $end
$var wire 3 u( b [2:0] $end
$var wire 1 v( gnd $end
$var wire 3 w( sum [2:0] $end
$var wire 1 x( carry1 $end
$var wire 1 y( carry0 $end
$var wire 1 z( Cout $end
$scope module adder0 $end
$var wire 1 v( Cin $end
$var wire 1 {( a $end
$var wire 1 |( b $end
$var reg 1 y( Cout $end
$var reg 1 }( p $end
$var reg 1 ~( q $end
$var reg 1 !) sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 y( Cin $end
$var wire 1 ") a $end
$var wire 1 #) b $end
$var reg 1 x( Cout $end
$var reg 1 $) p $end
$var reg 1 %) q $end
$var reg 1 &) sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 x( Cin $end
$var wire 1 ') a $end
$var wire 1 () b $end
$var reg 1 z( Cout $end
$var reg 1 )) p $end
$var reg 1 *) q $end
$var reg 1 +) sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[2] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ,) neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 -) state_0 $end
$var wire 4 .) living_neighbors [3:0] $end
$var reg 1 /) state_d $end
$var reg 1 0) state_q $end
$var reg 1 1) stay_alive $end
$scope module living $end
$var wire 1 2) gnd $end
$var wire 8 3) in [7:0] $end
$var wire 3 4) sum1 [2:0] $end
$var wire 3 5) sum0 [2:0] $end
$var wire 4 6) num [3:0] $end
$var wire 2 7) count3 [1:0] $end
$var wire 2 8) count2 [1:0] $end
$var wire 2 9) count1 [1:0] $end
$var wire 2 :) count0 [1:0] $end
$scope module adder0 $end
$var wire 2 ;) a [1:0] $end
$var wire 2 <) b [1:0] $end
$var wire 2 =) sum [1:0] $end
$var wire 1 >) carry0 $end
$var wire 1 ?) Cout $end
$scope module adder0 $end
$var wire 1 @) Cin $end
$var wire 1 A) a $end
$var wire 1 B) b $end
$var reg 1 >) Cout $end
$var reg 1 C) p $end
$var reg 1 D) q $end
$var reg 1 E) sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 >) Cin $end
$var wire 1 F) a $end
$var wire 1 G) b $end
$var reg 1 ?) Cout $end
$var reg 1 H) p $end
$var reg 1 I) q $end
$var reg 1 J) sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 K) a [1:0] $end
$var wire 2 L) b [1:0] $end
$var wire 2 M) sum [1:0] $end
$var wire 1 N) carry0 $end
$var wire 1 O) Cout $end
$scope module adder0 $end
$var wire 1 P) Cin $end
$var wire 1 Q) a $end
$var wire 1 R) b $end
$var reg 1 N) Cout $end
$var reg 1 S) p $end
$var reg 1 T) q $end
$var reg 1 U) sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 N) Cin $end
$var wire 1 V) a $end
$var wire 1 W) b $end
$var reg 1 O) Cout $end
$var reg 1 X) p $end
$var reg 1 Y) q $end
$var reg 1 Z) sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 2) Cin $end
$var wire 1 [) a $end
$var wire 1 \) b $end
$var reg 1 ]) Cout $end
$var reg 1 ^) p $end
$var reg 1 _) q $end
$var reg 1 `) sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 2) Cin $end
$var wire 1 a) a $end
$var wire 1 b) b $end
$var reg 1 c) Cout $end
$var reg 1 d) p $end
$var reg 1 e) q $end
$var reg 1 f) sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 2) Cin $end
$var wire 1 g) a $end
$var wire 1 h) b $end
$var reg 1 i) Cout $end
$var reg 1 j) p $end
$var reg 1 k) q $end
$var reg 1 l) sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 2) Cin $end
$var wire 1 m) a $end
$var wire 1 n) b $end
$var reg 1 o) Cout $end
$var reg 1 p) p $end
$var reg 1 q) q $end
$var reg 1 r) sum $end
$upscope $end
$scope module total $end
$var wire 3 s) a [2:0] $end
$var wire 3 t) b [2:0] $end
$var wire 1 u) gnd $end
$var wire 3 v) sum [2:0] $end
$var wire 1 w) carry1 $end
$var wire 1 x) carry0 $end
$var wire 1 y) Cout $end
$scope module adder0 $end
$var wire 1 u) Cin $end
$var wire 1 z) a $end
$var wire 1 {) b $end
$var reg 1 x) Cout $end
$var reg 1 |) p $end
$var reg 1 }) q $end
$var reg 1 ~) sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 x) Cin $end
$var wire 1 !* a $end
$var wire 1 "* b $end
$var reg 1 w) Cout $end
$var reg 1 #* p $end
$var reg 1 $* q $end
$var reg 1 %* sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 w) Cin $end
$var wire 1 &* a $end
$var wire 1 '* b $end
$var reg 1 y) Cout $end
$var reg 1 (* p $end
$var reg 1 )* q $end
$var reg 1 ** sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 +* neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ,* state_0 $end
$var wire 4 -* living_neighbors [3:0] $end
$var reg 1 .* state_d $end
$var reg 1 /* state_q $end
$var reg 1 0* stay_alive $end
$scope module living $end
$var wire 1 1* gnd $end
$var wire 8 2* in [7:0] $end
$var wire 3 3* sum1 [2:0] $end
$var wire 3 4* sum0 [2:0] $end
$var wire 4 5* num [3:0] $end
$var wire 2 6* count3 [1:0] $end
$var wire 2 7* count2 [1:0] $end
$var wire 2 8* count1 [1:0] $end
$var wire 2 9* count0 [1:0] $end
$scope module adder0 $end
$var wire 2 :* a [1:0] $end
$var wire 2 ;* b [1:0] $end
$var wire 2 <* sum [1:0] $end
$var wire 1 =* carry0 $end
$var wire 1 >* Cout $end
$scope module adder0 $end
$var wire 1 ?* Cin $end
$var wire 1 @* a $end
$var wire 1 A* b $end
$var reg 1 =* Cout $end
$var reg 1 B* p $end
$var reg 1 C* q $end
$var reg 1 D* sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 =* Cin $end
$var wire 1 E* a $end
$var wire 1 F* b $end
$var reg 1 >* Cout $end
$var reg 1 G* p $end
$var reg 1 H* q $end
$var reg 1 I* sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 J* a [1:0] $end
$var wire 2 K* b [1:0] $end
$var wire 2 L* sum [1:0] $end
$var wire 1 M* carry0 $end
$var wire 1 N* Cout $end
$scope module adder0 $end
$var wire 1 O* Cin $end
$var wire 1 P* a $end
$var wire 1 Q* b $end
$var reg 1 M* Cout $end
$var reg 1 R* p $end
$var reg 1 S* q $end
$var reg 1 T* sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 M* Cin $end
$var wire 1 U* a $end
$var wire 1 V* b $end
$var reg 1 N* Cout $end
$var reg 1 W* p $end
$var reg 1 X* q $end
$var reg 1 Y* sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 1* Cin $end
$var wire 1 Z* a $end
$var wire 1 [* b $end
$var reg 1 \* Cout $end
$var reg 1 ]* p $end
$var reg 1 ^* q $end
$var reg 1 _* sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 1* Cin $end
$var wire 1 `* a $end
$var wire 1 a* b $end
$var reg 1 b* Cout $end
$var reg 1 c* p $end
$var reg 1 d* q $end
$var reg 1 e* sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 1* Cin $end
$var wire 1 f* a $end
$var wire 1 g* b $end
$var reg 1 h* Cout $end
$var reg 1 i* p $end
$var reg 1 j* q $end
$var reg 1 k* sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 1* Cin $end
$var wire 1 l* a $end
$var wire 1 m* b $end
$var reg 1 n* Cout $end
$var reg 1 o* p $end
$var reg 1 p* q $end
$var reg 1 q* sum $end
$upscope $end
$scope module total $end
$var wire 3 r* a [2:0] $end
$var wire 3 s* b [2:0] $end
$var wire 1 t* gnd $end
$var wire 3 u* sum [2:0] $end
$var wire 1 v* carry1 $end
$var wire 1 w* carry0 $end
$var wire 1 x* Cout $end
$scope module adder0 $end
$var wire 1 t* Cin $end
$var wire 1 y* a $end
$var wire 1 z* b $end
$var reg 1 w* Cout $end
$var reg 1 {* p $end
$var reg 1 |* q $end
$var reg 1 }* sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 w* Cin $end
$var wire 1 ~* a $end
$var wire 1 !+ b $end
$var reg 1 v* Cout $end
$var reg 1 "+ p $end
$var reg 1 #+ q $end
$var reg 1 $+ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 v* Cin $end
$var wire 1 %+ a $end
$var wire 1 &+ b $end
$var reg 1 x* Cout $end
$var reg 1 '+ p $end
$var reg 1 (+ q $end
$var reg 1 )+ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 *+ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ++ state_0 $end
$var wire 4 ,+ living_neighbors [3:0] $end
$var reg 1 -+ state_d $end
$var reg 1 .+ state_q $end
$var reg 1 /+ stay_alive $end
$scope module living $end
$var wire 1 0+ gnd $end
$var wire 8 1+ in [7:0] $end
$var wire 3 2+ sum1 [2:0] $end
$var wire 3 3+ sum0 [2:0] $end
$var wire 4 4+ num [3:0] $end
$var wire 2 5+ count3 [1:0] $end
$var wire 2 6+ count2 [1:0] $end
$var wire 2 7+ count1 [1:0] $end
$var wire 2 8+ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 9+ a [1:0] $end
$var wire 2 :+ b [1:0] $end
$var wire 2 ;+ sum [1:0] $end
$var wire 1 <+ carry0 $end
$var wire 1 =+ Cout $end
$scope module adder0 $end
$var wire 1 >+ Cin $end
$var wire 1 ?+ a $end
$var wire 1 @+ b $end
$var reg 1 <+ Cout $end
$var reg 1 A+ p $end
$var reg 1 B+ q $end
$var reg 1 C+ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 <+ Cin $end
$var wire 1 D+ a $end
$var wire 1 E+ b $end
$var reg 1 =+ Cout $end
$var reg 1 F+ p $end
$var reg 1 G+ q $end
$var reg 1 H+ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 I+ a [1:0] $end
$var wire 2 J+ b [1:0] $end
$var wire 2 K+ sum [1:0] $end
$var wire 1 L+ carry0 $end
$var wire 1 M+ Cout $end
$scope module adder0 $end
$var wire 1 N+ Cin $end
$var wire 1 O+ a $end
$var wire 1 P+ b $end
$var reg 1 L+ Cout $end
$var reg 1 Q+ p $end
$var reg 1 R+ q $end
$var reg 1 S+ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 L+ Cin $end
$var wire 1 T+ a $end
$var wire 1 U+ b $end
$var reg 1 M+ Cout $end
$var reg 1 V+ p $end
$var reg 1 W+ q $end
$var reg 1 X+ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 0+ Cin $end
$var wire 1 Y+ a $end
$var wire 1 Z+ b $end
$var reg 1 [+ Cout $end
$var reg 1 \+ p $end
$var reg 1 ]+ q $end
$var reg 1 ^+ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 0+ Cin $end
$var wire 1 _+ a $end
$var wire 1 `+ b $end
$var reg 1 a+ Cout $end
$var reg 1 b+ p $end
$var reg 1 c+ q $end
$var reg 1 d+ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 0+ Cin $end
$var wire 1 e+ a $end
$var wire 1 f+ b $end
$var reg 1 g+ Cout $end
$var reg 1 h+ p $end
$var reg 1 i+ q $end
$var reg 1 j+ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 0+ Cin $end
$var wire 1 k+ a $end
$var wire 1 l+ b $end
$var reg 1 m+ Cout $end
$var reg 1 n+ p $end
$var reg 1 o+ q $end
$var reg 1 p+ sum $end
$upscope $end
$scope module total $end
$var wire 3 q+ a [2:0] $end
$var wire 3 r+ b [2:0] $end
$var wire 1 s+ gnd $end
$var wire 3 t+ sum [2:0] $end
$var wire 1 u+ carry1 $end
$var wire 1 v+ carry0 $end
$var wire 1 w+ Cout $end
$scope module adder0 $end
$var wire 1 s+ Cin $end
$var wire 1 x+ a $end
$var wire 1 y+ b $end
$var reg 1 v+ Cout $end
$var reg 1 z+ p $end
$var reg 1 {+ q $end
$var reg 1 |+ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 v+ Cin $end
$var wire 1 }+ a $end
$var wire 1 ~+ b $end
$var reg 1 u+ Cout $end
$var reg 1 !, p $end
$var reg 1 ", q $end
$var reg 1 #, sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 u+ Cin $end
$var wire 1 $, a $end
$var wire 1 %, b $end
$var reg 1 w+ Cout $end
$var reg 1 &, p $end
$var reg 1 ', q $end
$var reg 1 (, sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ), neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 *, state_0 $end
$var wire 4 +, living_neighbors [3:0] $end
$var reg 1 ,, state_d $end
$var reg 1 -, state_q $end
$var reg 1 ., stay_alive $end
$scope module living $end
$var wire 1 /, gnd $end
$var wire 8 0, in [7:0] $end
$var wire 3 1, sum1 [2:0] $end
$var wire 3 2, sum0 [2:0] $end
$var wire 4 3, num [3:0] $end
$var wire 2 4, count3 [1:0] $end
$var wire 2 5, count2 [1:0] $end
$var wire 2 6, count1 [1:0] $end
$var wire 2 7, count0 [1:0] $end
$scope module adder0 $end
$var wire 2 8, a [1:0] $end
$var wire 2 9, b [1:0] $end
$var wire 2 :, sum [1:0] $end
$var wire 1 ;, carry0 $end
$var wire 1 <, Cout $end
$scope module adder0 $end
$var wire 1 =, Cin $end
$var wire 1 >, a $end
$var wire 1 ?, b $end
$var reg 1 ;, Cout $end
$var reg 1 @, p $end
$var reg 1 A, q $end
$var reg 1 B, sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ;, Cin $end
$var wire 1 C, a $end
$var wire 1 D, b $end
$var reg 1 <, Cout $end
$var reg 1 E, p $end
$var reg 1 F, q $end
$var reg 1 G, sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 H, a [1:0] $end
$var wire 2 I, b [1:0] $end
$var wire 2 J, sum [1:0] $end
$var wire 1 K, carry0 $end
$var wire 1 L, Cout $end
$scope module adder0 $end
$var wire 1 M, Cin $end
$var wire 1 N, a $end
$var wire 1 O, b $end
$var reg 1 K, Cout $end
$var reg 1 P, p $end
$var reg 1 Q, q $end
$var reg 1 R, sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 K, Cin $end
$var wire 1 S, a $end
$var wire 1 T, b $end
$var reg 1 L, Cout $end
$var reg 1 U, p $end
$var reg 1 V, q $end
$var reg 1 W, sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 /, Cin $end
$var wire 1 X, a $end
$var wire 1 Y, b $end
$var reg 1 Z, Cout $end
$var reg 1 [, p $end
$var reg 1 \, q $end
$var reg 1 ], sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 /, Cin $end
$var wire 1 ^, a $end
$var wire 1 _, b $end
$var reg 1 `, Cout $end
$var reg 1 a, p $end
$var reg 1 b, q $end
$var reg 1 c, sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 /, Cin $end
$var wire 1 d, a $end
$var wire 1 e, b $end
$var reg 1 f, Cout $end
$var reg 1 g, p $end
$var reg 1 h, q $end
$var reg 1 i, sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 /, Cin $end
$var wire 1 j, a $end
$var wire 1 k, b $end
$var reg 1 l, Cout $end
$var reg 1 m, p $end
$var reg 1 n, q $end
$var reg 1 o, sum $end
$upscope $end
$scope module total $end
$var wire 3 p, a [2:0] $end
$var wire 3 q, b [2:0] $end
$var wire 1 r, gnd $end
$var wire 3 s, sum [2:0] $end
$var wire 1 t, carry1 $end
$var wire 1 u, carry0 $end
$var wire 1 v, Cout $end
$scope module adder0 $end
$var wire 1 r, Cin $end
$var wire 1 w, a $end
$var wire 1 x, b $end
$var reg 1 u, Cout $end
$var reg 1 y, p $end
$var reg 1 z, q $end
$var reg 1 {, sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 u, Cin $end
$var wire 1 |, a $end
$var wire 1 }, b $end
$var reg 1 t, Cout $end
$var reg 1 ~, p $end
$var reg 1 !- q $end
$var reg 1 "- sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 t, Cin $end
$var wire 1 #- a $end
$var wire 1 $- b $end
$var reg 1 v, Cout $end
$var reg 1 %- p $end
$var reg 1 &- q $end
$var reg 1 '- sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 (- neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 )- state_0 $end
$var wire 4 *- living_neighbors [3:0] $end
$var reg 1 +- state_d $end
$var reg 1 ,- state_q $end
$var reg 1 -- stay_alive $end
$scope module living $end
$var wire 1 .- gnd $end
$var wire 8 /- in [7:0] $end
$var wire 3 0- sum1 [2:0] $end
$var wire 3 1- sum0 [2:0] $end
$var wire 4 2- num [3:0] $end
$var wire 2 3- count3 [1:0] $end
$var wire 2 4- count2 [1:0] $end
$var wire 2 5- count1 [1:0] $end
$var wire 2 6- count0 [1:0] $end
$scope module adder0 $end
$var wire 2 7- a [1:0] $end
$var wire 2 8- b [1:0] $end
$var wire 2 9- sum [1:0] $end
$var wire 1 :- carry0 $end
$var wire 1 ;- Cout $end
$scope module adder0 $end
$var wire 1 <- Cin $end
$var wire 1 =- a $end
$var wire 1 >- b $end
$var reg 1 :- Cout $end
$var reg 1 ?- p $end
$var reg 1 @- q $end
$var reg 1 A- sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 :- Cin $end
$var wire 1 B- a $end
$var wire 1 C- b $end
$var reg 1 ;- Cout $end
$var reg 1 D- p $end
$var reg 1 E- q $end
$var reg 1 F- sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 G- a [1:0] $end
$var wire 2 H- b [1:0] $end
$var wire 2 I- sum [1:0] $end
$var wire 1 J- carry0 $end
$var wire 1 K- Cout $end
$scope module adder0 $end
$var wire 1 L- Cin $end
$var wire 1 M- a $end
$var wire 1 N- b $end
$var reg 1 J- Cout $end
$var reg 1 O- p $end
$var reg 1 P- q $end
$var reg 1 Q- sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 J- Cin $end
$var wire 1 R- a $end
$var wire 1 S- b $end
$var reg 1 K- Cout $end
$var reg 1 T- p $end
$var reg 1 U- q $end
$var reg 1 V- sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 .- Cin $end
$var wire 1 W- a $end
$var wire 1 X- b $end
$var reg 1 Y- Cout $end
$var reg 1 Z- p $end
$var reg 1 [- q $end
$var reg 1 \- sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 .- Cin $end
$var wire 1 ]- a $end
$var wire 1 ^- b $end
$var reg 1 _- Cout $end
$var reg 1 `- p $end
$var reg 1 a- q $end
$var reg 1 b- sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 .- Cin $end
$var wire 1 c- a $end
$var wire 1 d- b $end
$var reg 1 e- Cout $end
$var reg 1 f- p $end
$var reg 1 g- q $end
$var reg 1 h- sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 .- Cin $end
$var wire 1 i- a $end
$var wire 1 j- b $end
$var reg 1 k- Cout $end
$var reg 1 l- p $end
$var reg 1 m- q $end
$var reg 1 n- sum $end
$upscope $end
$scope module total $end
$var wire 3 o- a [2:0] $end
$var wire 3 p- b [2:0] $end
$var wire 1 q- gnd $end
$var wire 3 r- sum [2:0] $end
$var wire 1 s- carry1 $end
$var wire 1 t- carry0 $end
$var wire 1 u- Cout $end
$scope module adder0 $end
$var wire 1 q- Cin $end
$var wire 1 v- a $end
$var wire 1 w- b $end
$var reg 1 t- Cout $end
$var reg 1 x- p $end
$var reg 1 y- q $end
$var reg 1 z- sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 t- Cin $end
$var wire 1 {- a $end
$var wire 1 |- b $end
$var reg 1 s- Cout $end
$var reg 1 }- p $end
$var reg 1 ~- q $end
$var reg 1 !. sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 s- Cin $end
$var wire 1 ". a $end
$var wire 1 #. b $end
$var reg 1 u- Cout $end
$var reg 1 $. p $end
$var reg 1 %. q $end
$var reg 1 &. sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 '. neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 (. state_0 $end
$var wire 4 ). living_neighbors [3:0] $end
$var reg 1 *. state_d $end
$var reg 1 +. state_q $end
$var reg 1 ,. stay_alive $end
$scope module living $end
$var wire 1 -. gnd $end
$var wire 8 .. in [7:0] $end
$var wire 3 /. sum1 [2:0] $end
$var wire 3 0. sum0 [2:0] $end
$var wire 4 1. num [3:0] $end
$var wire 2 2. count3 [1:0] $end
$var wire 2 3. count2 [1:0] $end
$var wire 2 4. count1 [1:0] $end
$var wire 2 5. count0 [1:0] $end
$scope module adder0 $end
$var wire 2 6. a [1:0] $end
$var wire 2 7. b [1:0] $end
$var wire 2 8. sum [1:0] $end
$var wire 1 9. carry0 $end
$var wire 1 :. Cout $end
$scope module adder0 $end
$var wire 1 ;. Cin $end
$var wire 1 <. a $end
$var wire 1 =. b $end
$var reg 1 9. Cout $end
$var reg 1 >. p $end
$var reg 1 ?. q $end
$var reg 1 @. sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 9. Cin $end
$var wire 1 A. a $end
$var wire 1 B. b $end
$var reg 1 :. Cout $end
$var reg 1 C. p $end
$var reg 1 D. q $end
$var reg 1 E. sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 F. a [1:0] $end
$var wire 2 G. b [1:0] $end
$var wire 2 H. sum [1:0] $end
$var wire 1 I. carry0 $end
$var wire 1 J. Cout $end
$scope module adder0 $end
$var wire 1 K. Cin $end
$var wire 1 L. a $end
$var wire 1 M. b $end
$var reg 1 I. Cout $end
$var reg 1 N. p $end
$var reg 1 O. q $end
$var reg 1 P. sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 I. Cin $end
$var wire 1 Q. a $end
$var wire 1 R. b $end
$var reg 1 J. Cout $end
$var reg 1 S. p $end
$var reg 1 T. q $end
$var reg 1 U. sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 -. Cin $end
$var wire 1 V. a $end
$var wire 1 W. b $end
$var reg 1 X. Cout $end
$var reg 1 Y. p $end
$var reg 1 Z. q $end
$var reg 1 [. sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 -. Cin $end
$var wire 1 \. a $end
$var wire 1 ]. b $end
$var reg 1 ^. Cout $end
$var reg 1 _. p $end
$var reg 1 `. q $end
$var reg 1 a. sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 -. Cin $end
$var wire 1 b. a $end
$var wire 1 c. b $end
$var reg 1 d. Cout $end
$var reg 1 e. p $end
$var reg 1 f. q $end
$var reg 1 g. sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 -. Cin $end
$var wire 1 h. a $end
$var wire 1 i. b $end
$var reg 1 j. Cout $end
$var reg 1 k. p $end
$var reg 1 l. q $end
$var reg 1 m. sum $end
$upscope $end
$scope module total $end
$var wire 3 n. a [2:0] $end
$var wire 3 o. b [2:0] $end
$var wire 1 p. gnd $end
$var wire 3 q. sum [2:0] $end
$var wire 1 r. carry1 $end
$var wire 1 s. carry0 $end
$var wire 1 t. Cout $end
$scope module adder0 $end
$var wire 1 p. Cin $end
$var wire 1 u. a $end
$var wire 1 v. b $end
$var reg 1 s. Cout $end
$var reg 1 w. p $end
$var reg 1 x. q $end
$var reg 1 y. sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 s. Cin $end
$var wire 1 z. a $end
$var wire 1 {. b $end
$var reg 1 r. Cout $end
$var reg 1 |. p $end
$var reg 1 }. q $end
$var reg 1 ~. sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 r. Cin $end
$var wire 1 !/ a $end
$var wire 1 "/ b $end
$var reg 1 t. Cout $end
$var reg 1 #/ p $end
$var reg 1 $/ q $end
$var reg 1 %/ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 &/ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 '/ state_0 $end
$var wire 4 (/ living_neighbors [3:0] $end
$var reg 1 )/ state_d $end
$var reg 1 */ state_q $end
$var reg 1 +/ stay_alive $end
$scope module living $end
$var wire 1 ,/ gnd $end
$var wire 8 -/ in [7:0] $end
$var wire 3 ./ sum1 [2:0] $end
$var wire 3 // sum0 [2:0] $end
$var wire 4 0/ num [3:0] $end
$var wire 2 1/ count3 [1:0] $end
$var wire 2 2/ count2 [1:0] $end
$var wire 2 3/ count1 [1:0] $end
$var wire 2 4/ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 5/ a [1:0] $end
$var wire 2 6/ b [1:0] $end
$var wire 2 7/ sum [1:0] $end
$var wire 1 8/ carry0 $end
$var wire 1 9/ Cout $end
$scope module adder0 $end
$var wire 1 :/ Cin $end
$var wire 1 ;/ a $end
$var wire 1 </ b $end
$var reg 1 8/ Cout $end
$var reg 1 =/ p $end
$var reg 1 >/ q $end
$var reg 1 ?/ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 8/ Cin $end
$var wire 1 @/ a $end
$var wire 1 A/ b $end
$var reg 1 9/ Cout $end
$var reg 1 B/ p $end
$var reg 1 C/ q $end
$var reg 1 D/ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 E/ a [1:0] $end
$var wire 2 F/ b [1:0] $end
$var wire 2 G/ sum [1:0] $end
$var wire 1 H/ carry0 $end
$var wire 1 I/ Cout $end
$scope module adder0 $end
$var wire 1 J/ Cin $end
$var wire 1 K/ a $end
$var wire 1 L/ b $end
$var reg 1 H/ Cout $end
$var reg 1 M/ p $end
$var reg 1 N/ q $end
$var reg 1 O/ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 H/ Cin $end
$var wire 1 P/ a $end
$var wire 1 Q/ b $end
$var reg 1 I/ Cout $end
$var reg 1 R/ p $end
$var reg 1 S/ q $end
$var reg 1 T/ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 ,/ Cin $end
$var wire 1 U/ a $end
$var wire 1 V/ b $end
$var reg 1 W/ Cout $end
$var reg 1 X/ p $end
$var reg 1 Y/ q $end
$var reg 1 Z/ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 ,/ Cin $end
$var wire 1 [/ a $end
$var wire 1 \/ b $end
$var reg 1 ]/ Cout $end
$var reg 1 ^/ p $end
$var reg 1 _/ q $end
$var reg 1 `/ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 ,/ Cin $end
$var wire 1 a/ a $end
$var wire 1 b/ b $end
$var reg 1 c/ Cout $end
$var reg 1 d/ p $end
$var reg 1 e/ q $end
$var reg 1 f/ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 ,/ Cin $end
$var wire 1 g/ a $end
$var wire 1 h/ b $end
$var reg 1 i/ Cout $end
$var reg 1 j/ p $end
$var reg 1 k/ q $end
$var reg 1 l/ sum $end
$upscope $end
$scope module total $end
$var wire 3 m/ a [2:0] $end
$var wire 3 n/ b [2:0] $end
$var wire 1 o/ gnd $end
$var wire 3 p/ sum [2:0] $end
$var wire 1 q/ carry1 $end
$var wire 1 r/ carry0 $end
$var wire 1 s/ Cout $end
$scope module adder0 $end
$var wire 1 o/ Cin $end
$var wire 1 t/ a $end
$var wire 1 u/ b $end
$var reg 1 r/ Cout $end
$var reg 1 v/ p $end
$var reg 1 w/ q $end
$var reg 1 x/ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 r/ Cin $end
$var wire 1 y/ a $end
$var wire 1 z/ b $end
$var reg 1 q/ Cout $end
$var reg 1 {/ p $end
$var reg 1 |/ q $end
$var reg 1 }/ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 q/ Cin $end
$var wire 1 ~/ a $end
$var wire 1 !0 b $end
$var reg 1 s/ Cout $end
$var reg 1 "0 p $end
$var reg 1 #0 q $end
$var reg 1 $0 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 %0 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 &0 state_0 $end
$var wire 4 '0 living_neighbors [3:0] $end
$var reg 1 (0 state_d $end
$var reg 1 )0 state_q $end
$var reg 1 *0 stay_alive $end
$scope module living $end
$var wire 1 +0 gnd $end
$var wire 8 ,0 in [7:0] $end
$var wire 3 -0 sum1 [2:0] $end
$var wire 3 .0 sum0 [2:0] $end
$var wire 4 /0 num [3:0] $end
$var wire 2 00 count3 [1:0] $end
$var wire 2 10 count2 [1:0] $end
$var wire 2 20 count1 [1:0] $end
$var wire 2 30 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 40 a [1:0] $end
$var wire 2 50 b [1:0] $end
$var wire 2 60 sum [1:0] $end
$var wire 1 70 carry0 $end
$var wire 1 80 Cout $end
$scope module adder0 $end
$var wire 1 90 Cin $end
$var wire 1 :0 a $end
$var wire 1 ;0 b $end
$var reg 1 70 Cout $end
$var reg 1 <0 p $end
$var reg 1 =0 q $end
$var reg 1 >0 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 70 Cin $end
$var wire 1 ?0 a $end
$var wire 1 @0 b $end
$var reg 1 80 Cout $end
$var reg 1 A0 p $end
$var reg 1 B0 q $end
$var reg 1 C0 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 D0 a [1:0] $end
$var wire 2 E0 b [1:0] $end
$var wire 2 F0 sum [1:0] $end
$var wire 1 G0 carry0 $end
$var wire 1 H0 Cout $end
$scope module adder0 $end
$var wire 1 I0 Cin $end
$var wire 1 J0 a $end
$var wire 1 K0 b $end
$var reg 1 G0 Cout $end
$var reg 1 L0 p $end
$var reg 1 M0 q $end
$var reg 1 N0 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 G0 Cin $end
$var wire 1 O0 a $end
$var wire 1 P0 b $end
$var reg 1 H0 Cout $end
$var reg 1 Q0 p $end
$var reg 1 R0 q $end
$var reg 1 S0 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 +0 Cin $end
$var wire 1 T0 a $end
$var wire 1 U0 b $end
$var reg 1 V0 Cout $end
$var reg 1 W0 p $end
$var reg 1 X0 q $end
$var reg 1 Y0 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 +0 Cin $end
$var wire 1 Z0 a $end
$var wire 1 [0 b $end
$var reg 1 \0 Cout $end
$var reg 1 ]0 p $end
$var reg 1 ^0 q $end
$var reg 1 _0 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 +0 Cin $end
$var wire 1 `0 a $end
$var wire 1 a0 b $end
$var reg 1 b0 Cout $end
$var reg 1 c0 p $end
$var reg 1 d0 q $end
$var reg 1 e0 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 +0 Cin $end
$var wire 1 f0 a $end
$var wire 1 g0 b $end
$var reg 1 h0 Cout $end
$var reg 1 i0 p $end
$var reg 1 j0 q $end
$var reg 1 k0 sum $end
$upscope $end
$scope module total $end
$var wire 3 l0 a [2:0] $end
$var wire 3 m0 b [2:0] $end
$var wire 1 n0 gnd $end
$var wire 3 o0 sum [2:0] $end
$var wire 1 p0 carry1 $end
$var wire 1 q0 carry0 $end
$var wire 1 r0 Cout $end
$scope module adder0 $end
$var wire 1 n0 Cin $end
$var wire 1 s0 a $end
$var wire 1 t0 b $end
$var reg 1 q0 Cout $end
$var reg 1 u0 p $end
$var reg 1 v0 q $end
$var reg 1 w0 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 q0 Cin $end
$var wire 1 x0 a $end
$var wire 1 y0 b $end
$var reg 1 p0 Cout $end
$var reg 1 z0 p $end
$var reg 1 {0 q $end
$var reg 1 |0 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 p0 Cin $end
$var wire 1 }0 a $end
$var wire 1 ~0 b $end
$var reg 1 r0 Cout $end
$var reg 1 !1 p $end
$var reg 1 "1 q $end
$var reg 1 #1 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[3] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 $1 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 %1 state_0 $end
$var wire 4 &1 living_neighbors [3:0] $end
$var reg 1 '1 state_d $end
$var reg 1 (1 state_q $end
$var reg 1 )1 stay_alive $end
$scope module living $end
$var wire 1 *1 gnd $end
$var wire 8 +1 in [7:0] $end
$var wire 3 ,1 sum1 [2:0] $end
$var wire 3 -1 sum0 [2:0] $end
$var wire 4 .1 num [3:0] $end
$var wire 2 /1 count3 [1:0] $end
$var wire 2 01 count2 [1:0] $end
$var wire 2 11 count1 [1:0] $end
$var wire 2 21 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 31 a [1:0] $end
$var wire 2 41 b [1:0] $end
$var wire 2 51 sum [1:0] $end
$var wire 1 61 carry0 $end
$var wire 1 71 Cout $end
$scope module adder0 $end
$var wire 1 81 Cin $end
$var wire 1 91 a $end
$var wire 1 :1 b $end
$var reg 1 61 Cout $end
$var reg 1 ;1 p $end
$var reg 1 <1 q $end
$var reg 1 =1 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 61 Cin $end
$var wire 1 >1 a $end
$var wire 1 ?1 b $end
$var reg 1 71 Cout $end
$var reg 1 @1 p $end
$var reg 1 A1 q $end
$var reg 1 B1 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 C1 a [1:0] $end
$var wire 2 D1 b [1:0] $end
$var wire 2 E1 sum [1:0] $end
$var wire 1 F1 carry0 $end
$var wire 1 G1 Cout $end
$scope module adder0 $end
$var wire 1 H1 Cin $end
$var wire 1 I1 a $end
$var wire 1 J1 b $end
$var reg 1 F1 Cout $end
$var reg 1 K1 p $end
$var reg 1 L1 q $end
$var reg 1 M1 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 F1 Cin $end
$var wire 1 N1 a $end
$var wire 1 O1 b $end
$var reg 1 G1 Cout $end
$var reg 1 P1 p $end
$var reg 1 Q1 q $end
$var reg 1 R1 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 *1 Cin $end
$var wire 1 S1 a $end
$var wire 1 T1 b $end
$var reg 1 U1 Cout $end
$var reg 1 V1 p $end
$var reg 1 W1 q $end
$var reg 1 X1 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 *1 Cin $end
$var wire 1 Y1 a $end
$var wire 1 Z1 b $end
$var reg 1 [1 Cout $end
$var reg 1 \1 p $end
$var reg 1 ]1 q $end
$var reg 1 ^1 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 *1 Cin $end
$var wire 1 _1 a $end
$var wire 1 `1 b $end
$var reg 1 a1 Cout $end
$var reg 1 b1 p $end
$var reg 1 c1 q $end
$var reg 1 d1 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 *1 Cin $end
$var wire 1 e1 a $end
$var wire 1 f1 b $end
$var reg 1 g1 Cout $end
$var reg 1 h1 p $end
$var reg 1 i1 q $end
$var reg 1 j1 sum $end
$upscope $end
$scope module total $end
$var wire 3 k1 a [2:0] $end
$var wire 3 l1 b [2:0] $end
$var wire 1 m1 gnd $end
$var wire 3 n1 sum [2:0] $end
$var wire 1 o1 carry1 $end
$var wire 1 p1 carry0 $end
$var wire 1 q1 Cout $end
$scope module adder0 $end
$var wire 1 m1 Cin $end
$var wire 1 r1 a $end
$var wire 1 s1 b $end
$var reg 1 p1 Cout $end
$var reg 1 t1 p $end
$var reg 1 u1 q $end
$var reg 1 v1 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 p1 Cin $end
$var wire 1 w1 a $end
$var wire 1 x1 b $end
$var reg 1 o1 Cout $end
$var reg 1 y1 p $end
$var reg 1 z1 q $end
$var reg 1 {1 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 o1 Cin $end
$var wire 1 |1 a $end
$var wire 1 }1 b $end
$var reg 1 q1 Cout $end
$var reg 1 ~1 p $end
$var reg 1 !2 q $end
$var reg 1 "2 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 #2 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 $2 state_0 $end
$var wire 4 %2 living_neighbors [3:0] $end
$var reg 1 &2 state_d $end
$var reg 1 '2 state_q $end
$var reg 1 (2 stay_alive $end
$scope module living $end
$var wire 1 )2 gnd $end
$var wire 8 *2 in [7:0] $end
$var wire 3 +2 sum1 [2:0] $end
$var wire 3 ,2 sum0 [2:0] $end
$var wire 4 -2 num [3:0] $end
$var wire 2 .2 count3 [1:0] $end
$var wire 2 /2 count2 [1:0] $end
$var wire 2 02 count1 [1:0] $end
$var wire 2 12 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 22 a [1:0] $end
$var wire 2 32 b [1:0] $end
$var wire 2 42 sum [1:0] $end
$var wire 1 52 carry0 $end
$var wire 1 62 Cout $end
$scope module adder0 $end
$var wire 1 72 Cin $end
$var wire 1 82 a $end
$var wire 1 92 b $end
$var reg 1 52 Cout $end
$var reg 1 :2 p $end
$var reg 1 ;2 q $end
$var reg 1 <2 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 52 Cin $end
$var wire 1 =2 a $end
$var wire 1 >2 b $end
$var reg 1 62 Cout $end
$var reg 1 ?2 p $end
$var reg 1 @2 q $end
$var reg 1 A2 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 B2 a [1:0] $end
$var wire 2 C2 b [1:0] $end
$var wire 2 D2 sum [1:0] $end
$var wire 1 E2 carry0 $end
$var wire 1 F2 Cout $end
$scope module adder0 $end
$var wire 1 G2 Cin $end
$var wire 1 H2 a $end
$var wire 1 I2 b $end
$var reg 1 E2 Cout $end
$var reg 1 J2 p $end
$var reg 1 K2 q $end
$var reg 1 L2 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 E2 Cin $end
$var wire 1 M2 a $end
$var wire 1 N2 b $end
$var reg 1 F2 Cout $end
$var reg 1 O2 p $end
$var reg 1 P2 q $end
$var reg 1 Q2 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 )2 Cin $end
$var wire 1 R2 a $end
$var wire 1 S2 b $end
$var reg 1 T2 Cout $end
$var reg 1 U2 p $end
$var reg 1 V2 q $end
$var reg 1 W2 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 )2 Cin $end
$var wire 1 X2 a $end
$var wire 1 Y2 b $end
$var reg 1 Z2 Cout $end
$var reg 1 [2 p $end
$var reg 1 \2 q $end
$var reg 1 ]2 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 )2 Cin $end
$var wire 1 ^2 a $end
$var wire 1 _2 b $end
$var reg 1 `2 Cout $end
$var reg 1 a2 p $end
$var reg 1 b2 q $end
$var reg 1 c2 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 )2 Cin $end
$var wire 1 d2 a $end
$var wire 1 e2 b $end
$var reg 1 f2 Cout $end
$var reg 1 g2 p $end
$var reg 1 h2 q $end
$var reg 1 i2 sum $end
$upscope $end
$scope module total $end
$var wire 3 j2 a [2:0] $end
$var wire 3 k2 b [2:0] $end
$var wire 1 l2 gnd $end
$var wire 3 m2 sum [2:0] $end
$var wire 1 n2 carry1 $end
$var wire 1 o2 carry0 $end
$var wire 1 p2 Cout $end
$scope module adder0 $end
$var wire 1 l2 Cin $end
$var wire 1 q2 a $end
$var wire 1 r2 b $end
$var reg 1 o2 Cout $end
$var reg 1 s2 p $end
$var reg 1 t2 q $end
$var reg 1 u2 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 o2 Cin $end
$var wire 1 v2 a $end
$var wire 1 w2 b $end
$var reg 1 n2 Cout $end
$var reg 1 x2 p $end
$var reg 1 y2 q $end
$var reg 1 z2 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 n2 Cin $end
$var wire 1 {2 a $end
$var wire 1 |2 b $end
$var reg 1 p2 Cout $end
$var reg 1 }2 p $end
$var reg 1 ~2 q $end
$var reg 1 !3 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 "3 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 #3 state_0 $end
$var wire 4 $3 living_neighbors [3:0] $end
$var reg 1 %3 state_d $end
$var reg 1 &3 state_q $end
$var reg 1 '3 stay_alive $end
$scope module living $end
$var wire 1 (3 gnd $end
$var wire 8 )3 in [7:0] $end
$var wire 3 *3 sum1 [2:0] $end
$var wire 3 +3 sum0 [2:0] $end
$var wire 4 ,3 num [3:0] $end
$var wire 2 -3 count3 [1:0] $end
$var wire 2 .3 count2 [1:0] $end
$var wire 2 /3 count1 [1:0] $end
$var wire 2 03 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 13 a [1:0] $end
$var wire 2 23 b [1:0] $end
$var wire 2 33 sum [1:0] $end
$var wire 1 43 carry0 $end
$var wire 1 53 Cout $end
$scope module adder0 $end
$var wire 1 63 Cin $end
$var wire 1 73 a $end
$var wire 1 83 b $end
$var reg 1 43 Cout $end
$var reg 1 93 p $end
$var reg 1 :3 q $end
$var reg 1 ;3 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 43 Cin $end
$var wire 1 <3 a $end
$var wire 1 =3 b $end
$var reg 1 53 Cout $end
$var reg 1 >3 p $end
$var reg 1 ?3 q $end
$var reg 1 @3 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 A3 a [1:0] $end
$var wire 2 B3 b [1:0] $end
$var wire 2 C3 sum [1:0] $end
$var wire 1 D3 carry0 $end
$var wire 1 E3 Cout $end
$scope module adder0 $end
$var wire 1 F3 Cin $end
$var wire 1 G3 a $end
$var wire 1 H3 b $end
$var reg 1 D3 Cout $end
$var reg 1 I3 p $end
$var reg 1 J3 q $end
$var reg 1 K3 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 D3 Cin $end
$var wire 1 L3 a $end
$var wire 1 M3 b $end
$var reg 1 E3 Cout $end
$var reg 1 N3 p $end
$var reg 1 O3 q $end
$var reg 1 P3 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 (3 Cin $end
$var wire 1 Q3 a $end
$var wire 1 R3 b $end
$var reg 1 S3 Cout $end
$var reg 1 T3 p $end
$var reg 1 U3 q $end
$var reg 1 V3 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 (3 Cin $end
$var wire 1 W3 a $end
$var wire 1 X3 b $end
$var reg 1 Y3 Cout $end
$var reg 1 Z3 p $end
$var reg 1 [3 q $end
$var reg 1 \3 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 (3 Cin $end
$var wire 1 ]3 a $end
$var wire 1 ^3 b $end
$var reg 1 _3 Cout $end
$var reg 1 `3 p $end
$var reg 1 a3 q $end
$var reg 1 b3 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 (3 Cin $end
$var wire 1 c3 a $end
$var wire 1 d3 b $end
$var reg 1 e3 Cout $end
$var reg 1 f3 p $end
$var reg 1 g3 q $end
$var reg 1 h3 sum $end
$upscope $end
$scope module total $end
$var wire 3 i3 a [2:0] $end
$var wire 3 j3 b [2:0] $end
$var wire 1 k3 gnd $end
$var wire 3 l3 sum [2:0] $end
$var wire 1 m3 carry1 $end
$var wire 1 n3 carry0 $end
$var wire 1 o3 Cout $end
$scope module adder0 $end
$var wire 1 k3 Cin $end
$var wire 1 p3 a $end
$var wire 1 q3 b $end
$var reg 1 n3 Cout $end
$var reg 1 r3 p $end
$var reg 1 s3 q $end
$var reg 1 t3 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 n3 Cin $end
$var wire 1 u3 a $end
$var wire 1 v3 b $end
$var reg 1 m3 Cout $end
$var reg 1 w3 p $end
$var reg 1 x3 q $end
$var reg 1 y3 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 m3 Cin $end
$var wire 1 z3 a $end
$var wire 1 {3 b $end
$var reg 1 o3 Cout $end
$var reg 1 |3 p $end
$var reg 1 }3 q $end
$var reg 1 ~3 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 !4 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 "4 state_0 $end
$var wire 4 #4 living_neighbors [3:0] $end
$var reg 1 $4 state_d $end
$var reg 1 %4 state_q $end
$var reg 1 &4 stay_alive $end
$scope module living $end
$var wire 1 '4 gnd $end
$var wire 8 (4 in [7:0] $end
$var wire 3 )4 sum1 [2:0] $end
$var wire 3 *4 sum0 [2:0] $end
$var wire 4 +4 num [3:0] $end
$var wire 2 ,4 count3 [1:0] $end
$var wire 2 -4 count2 [1:0] $end
$var wire 2 .4 count1 [1:0] $end
$var wire 2 /4 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 04 a [1:0] $end
$var wire 2 14 b [1:0] $end
$var wire 2 24 sum [1:0] $end
$var wire 1 34 carry0 $end
$var wire 1 44 Cout $end
$scope module adder0 $end
$var wire 1 54 Cin $end
$var wire 1 64 a $end
$var wire 1 74 b $end
$var reg 1 34 Cout $end
$var reg 1 84 p $end
$var reg 1 94 q $end
$var reg 1 :4 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 34 Cin $end
$var wire 1 ;4 a $end
$var wire 1 <4 b $end
$var reg 1 44 Cout $end
$var reg 1 =4 p $end
$var reg 1 >4 q $end
$var reg 1 ?4 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 @4 a [1:0] $end
$var wire 2 A4 b [1:0] $end
$var wire 2 B4 sum [1:0] $end
$var wire 1 C4 carry0 $end
$var wire 1 D4 Cout $end
$scope module adder0 $end
$var wire 1 E4 Cin $end
$var wire 1 F4 a $end
$var wire 1 G4 b $end
$var reg 1 C4 Cout $end
$var reg 1 H4 p $end
$var reg 1 I4 q $end
$var reg 1 J4 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 C4 Cin $end
$var wire 1 K4 a $end
$var wire 1 L4 b $end
$var reg 1 D4 Cout $end
$var reg 1 M4 p $end
$var reg 1 N4 q $end
$var reg 1 O4 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 '4 Cin $end
$var wire 1 P4 a $end
$var wire 1 Q4 b $end
$var reg 1 R4 Cout $end
$var reg 1 S4 p $end
$var reg 1 T4 q $end
$var reg 1 U4 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 '4 Cin $end
$var wire 1 V4 a $end
$var wire 1 W4 b $end
$var reg 1 X4 Cout $end
$var reg 1 Y4 p $end
$var reg 1 Z4 q $end
$var reg 1 [4 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 '4 Cin $end
$var wire 1 \4 a $end
$var wire 1 ]4 b $end
$var reg 1 ^4 Cout $end
$var reg 1 _4 p $end
$var reg 1 `4 q $end
$var reg 1 a4 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 '4 Cin $end
$var wire 1 b4 a $end
$var wire 1 c4 b $end
$var reg 1 d4 Cout $end
$var reg 1 e4 p $end
$var reg 1 f4 q $end
$var reg 1 g4 sum $end
$upscope $end
$scope module total $end
$var wire 3 h4 a [2:0] $end
$var wire 3 i4 b [2:0] $end
$var wire 1 j4 gnd $end
$var wire 3 k4 sum [2:0] $end
$var wire 1 l4 carry1 $end
$var wire 1 m4 carry0 $end
$var wire 1 n4 Cout $end
$scope module adder0 $end
$var wire 1 j4 Cin $end
$var wire 1 o4 a $end
$var wire 1 p4 b $end
$var reg 1 m4 Cout $end
$var reg 1 q4 p $end
$var reg 1 r4 q $end
$var reg 1 s4 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 m4 Cin $end
$var wire 1 t4 a $end
$var wire 1 u4 b $end
$var reg 1 l4 Cout $end
$var reg 1 v4 p $end
$var reg 1 w4 q $end
$var reg 1 x4 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 l4 Cin $end
$var wire 1 y4 a $end
$var wire 1 z4 b $end
$var reg 1 n4 Cout $end
$var reg 1 {4 p $end
$var reg 1 |4 q $end
$var reg 1 }4 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ~4 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 !5 state_0 $end
$var wire 4 "5 living_neighbors [3:0] $end
$var reg 1 #5 state_d $end
$var reg 1 $5 state_q $end
$var reg 1 %5 stay_alive $end
$scope module living $end
$var wire 1 &5 gnd $end
$var wire 8 '5 in [7:0] $end
$var wire 3 (5 sum1 [2:0] $end
$var wire 3 )5 sum0 [2:0] $end
$var wire 4 *5 num [3:0] $end
$var wire 2 +5 count3 [1:0] $end
$var wire 2 ,5 count2 [1:0] $end
$var wire 2 -5 count1 [1:0] $end
$var wire 2 .5 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 /5 a [1:0] $end
$var wire 2 05 b [1:0] $end
$var wire 2 15 sum [1:0] $end
$var wire 1 25 carry0 $end
$var wire 1 35 Cout $end
$scope module adder0 $end
$var wire 1 45 Cin $end
$var wire 1 55 a $end
$var wire 1 65 b $end
$var reg 1 25 Cout $end
$var reg 1 75 p $end
$var reg 1 85 q $end
$var reg 1 95 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 25 Cin $end
$var wire 1 :5 a $end
$var wire 1 ;5 b $end
$var reg 1 35 Cout $end
$var reg 1 <5 p $end
$var reg 1 =5 q $end
$var reg 1 >5 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 ?5 a [1:0] $end
$var wire 2 @5 b [1:0] $end
$var wire 2 A5 sum [1:0] $end
$var wire 1 B5 carry0 $end
$var wire 1 C5 Cout $end
$scope module adder0 $end
$var wire 1 D5 Cin $end
$var wire 1 E5 a $end
$var wire 1 F5 b $end
$var reg 1 B5 Cout $end
$var reg 1 G5 p $end
$var reg 1 H5 q $end
$var reg 1 I5 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 B5 Cin $end
$var wire 1 J5 a $end
$var wire 1 K5 b $end
$var reg 1 C5 Cout $end
$var reg 1 L5 p $end
$var reg 1 M5 q $end
$var reg 1 N5 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 &5 Cin $end
$var wire 1 O5 a $end
$var wire 1 P5 b $end
$var reg 1 Q5 Cout $end
$var reg 1 R5 p $end
$var reg 1 S5 q $end
$var reg 1 T5 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 &5 Cin $end
$var wire 1 U5 a $end
$var wire 1 V5 b $end
$var reg 1 W5 Cout $end
$var reg 1 X5 p $end
$var reg 1 Y5 q $end
$var reg 1 Z5 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 &5 Cin $end
$var wire 1 [5 a $end
$var wire 1 \5 b $end
$var reg 1 ]5 Cout $end
$var reg 1 ^5 p $end
$var reg 1 _5 q $end
$var reg 1 `5 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 &5 Cin $end
$var wire 1 a5 a $end
$var wire 1 b5 b $end
$var reg 1 c5 Cout $end
$var reg 1 d5 p $end
$var reg 1 e5 q $end
$var reg 1 f5 sum $end
$upscope $end
$scope module total $end
$var wire 3 g5 a [2:0] $end
$var wire 3 h5 b [2:0] $end
$var wire 1 i5 gnd $end
$var wire 3 j5 sum [2:0] $end
$var wire 1 k5 carry1 $end
$var wire 1 l5 carry0 $end
$var wire 1 m5 Cout $end
$scope module adder0 $end
$var wire 1 i5 Cin $end
$var wire 1 n5 a $end
$var wire 1 o5 b $end
$var reg 1 l5 Cout $end
$var reg 1 p5 p $end
$var reg 1 q5 q $end
$var reg 1 r5 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 l5 Cin $end
$var wire 1 s5 a $end
$var wire 1 t5 b $end
$var reg 1 k5 Cout $end
$var reg 1 u5 p $end
$var reg 1 v5 q $end
$var reg 1 w5 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 k5 Cin $end
$var wire 1 x5 a $end
$var wire 1 y5 b $end
$var reg 1 m5 Cout $end
$var reg 1 z5 p $end
$var reg 1 {5 q $end
$var reg 1 |5 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 }5 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ~5 state_0 $end
$var wire 4 !6 living_neighbors [3:0] $end
$var reg 1 "6 state_d $end
$var reg 1 #6 state_q $end
$var reg 1 $6 stay_alive $end
$scope module living $end
$var wire 1 %6 gnd $end
$var wire 8 &6 in [7:0] $end
$var wire 3 '6 sum1 [2:0] $end
$var wire 3 (6 sum0 [2:0] $end
$var wire 4 )6 num [3:0] $end
$var wire 2 *6 count3 [1:0] $end
$var wire 2 +6 count2 [1:0] $end
$var wire 2 ,6 count1 [1:0] $end
$var wire 2 -6 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 .6 a [1:0] $end
$var wire 2 /6 b [1:0] $end
$var wire 2 06 sum [1:0] $end
$var wire 1 16 carry0 $end
$var wire 1 26 Cout $end
$scope module adder0 $end
$var wire 1 36 Cin $end
$var wire 1 46 a $end
$var wire 1 56 b $end
$var reg 1 16 Cout $end
$var reg 1 66 p $end
$var reg 1 76 q $end
$var reg 1 86 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 16 Cin $end
$var wire 1 96 a $end
$var wire 1 :6 b $end
$var reg 1 26 Cout $end
$var reg 1 ;6 p $end
$var reg 1 <6 q $end
$var reg 1 =6 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 >6 a [1:0] $end
$var wire 2 ?6 b [1:0] $end
$var wire 2 @6 sum [1:0] $end
$var wire 1 A6 carry0 $end
$var wire 1 B6 Cout $end
$scope module adder0 $end
$var wire 1 C6 Cin $end
$var wire 1 D6 a $end
$var wire 1 E6 b $end
$var reg 1 A6 Cout $end
$var reg 1 F6 p $end
$var reg 1 G6 q $end
$var reg 1 H6 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 A6 Cin $end
$var wire 1 I6 a $end
$var wire 1 J6 b $end
$var reg 1 B6 Cout $end
$var reg 1 K6 p $end
$var reg 1 L6 q $end
$var reg 1 M6 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 %6 Cin $end
$var wire 1 N6 a $end
$var wire 1 O6 b $end
$var reg 1 P6 Cout $end
$var reg 1 Q6 p $end
$var reg 1 R6 q $end
$var reg 1 S6 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 %6 Cin $end
$var wire 1 T6 a $end
$var wire 1 U6 b $end
$var reg 1 V6 Cout $end
$var reg 1 W6 p $end
$var reg 1 X6 q $end
$var reg 1 Y6 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 %6 Cin $end
$var wire 1 Z6 a $end
$var wire 1 [6 b $end
$var reg 1 \6 Cout $end
$var reg 1 ]6 p $end
$var reg 1 ^6 q $end
$var reg 1 _6 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 %6 Cin $end
$var wire 1 `6 a $end
$var wire 1 a6 b $end
$var reg 1 b6 Cout $end
$var reg 1 c6 p $end
$var reg 1 d6 q $end
$var reg 1 e6 sum $end
$upscope $end
$scope module total $end
$var wire 3 f6 a [2:0] $end
$var wire 3 g6 b [2:0] $end
$var wire 1 h6 gnd $end
$var wire 3 i6 sum [2:0] $end
$var wire 1 j6 carry1 $end
$var wire 1 k6 carry0 $end
$var wire 1 l6 Cout $end
$scope module adder0 $end
$var wire 1 h6 Cin $end
$var wire 1 m6 a $end
$var wire 1 n6 b $end
$var reg 1 k6 Cout $end
$var reg 1 o6 p $end
$var reg 1 p6 q $end
$var reg 1 q6 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 k6 Cin $end
$var wire 1 r6 a $end
$var wire 1 s6 b $end
$var reg 1 j6 Cout $end
$var reg 1 t6 p $end
$var reg 1 u6 q $end
$var reg 1 v6 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 j6 Cin $end
$var wire 1 w6 a $end
$var wire 1 x6 b $end
$var reg 1 l6 Cout $end
$var reg 1 y6 p $end
$var reg 1 z6 q $end
$var reg 1 {6 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 |6 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 }6 state_0 $end
$var wire 4 ~6 living_neighbors [3:0] $end
$var reg 1 !7 state_d $end
$var reg 1 "7 state_q $end
$var reg 1 #7 stay_alive $end
$scope module living $end
$var wire 1 $7 gnd $end
$var wire 8 %7 in [7:0] $end
$var wire 3 &7 sum1 [2:0] $end
$var wire 3 '7 sum0 [2:0] $end
$var wire 4 (7 num [3:0] $end
$var wire 2 )7 count3 [1:0] $end
$var wire 2 *7 count2 [1:0] $end
$var wire 2 +7 count1 [1:0] $end
$var wire 2 ,7 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 -7 a [1:0] $end
$var wire 2 .7 b [1:0] $end
$var wire 2 /7 sum [1:0] $end
$var wire 1 07 carry0 $end
$var wire 1 17 Cout $end
$scope module adder0 $end
$var wire 1 27 Cin $end
$var wire 1 37 a $end
$var wire 1 47 b $end
$var reg 1 07 Cout $end
$var reg 1 57 p $end
$var reg 1 67 q $end
$var reg 1 77 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 07 Cin $end
$var wire 1 87 a $end
$var wire 1 97 b $end
$var reg 1 17 Cout $end
$var reg 1 :7 p $end
$var reg 1 ;7 q $end
$var reg 1 <7 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 =7 a [1:0] $end
$var wire 2 >7 b [1:0] $end
$var wire 2 ?7 sum [1:0] $end
$var wire 1 @7 carry0 $end
$var wire 1 A7 Cout $end
$scope module adder0 $end
$var wire 1 B7 Cin $end
$var wire 1 C7 a $end
$var wire 1 D7 b $end
$var reg 1 @7 Cout $end
$var reg 1 E7 p $end
$var reg 1 F7 q $end
$var reg 1 G7 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 @7 Cin $end
$var wire 1 H7 a $end
$var wire 1 I7 b $end
$var reg 1 A7 Cout $end
$var reg 1 J7 p $end
$var reg 1 K7 q $end
$var reg 1 L7 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 $7 Cin $end
$var wire 1 M7 a $end
$var wire 1 N7 b $end
$var reg 1 O7 Cout $end
$var reg 1 P7 p $end
$var reg 1 Q7 q $end
$var reg 1 R7 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 $7 Cin $end
$var wire 1 S7 a $end
$var wire 1 T7 b $end
$var reg 1 U7 Cout $end
$var reg 1 V7 p $end
$var reg 1 W7 q $end
$var reg 1 X7 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 $7 Cin $end
$var wire 1 Y7 a $end
$var wire 1 Z7 b $end
$var reg 1 [7 Cout $end
$var reg 1 \7 p $end
$var reg 1 ]7 q $end
$var reg 1 ^7 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 $7 Cin $end
$var wire 1 _7 a $end
$var wire 1 `7 b $end
$var reg 1 a7 Cout $end
$var reg 1 b7 p $end
$var reg 1 c7 q $end
$var reg 1 d7 sum $end
$upscope $end
$scope module total $end
$var wire 3 e7 a [2:0] $end
$var wire 3 f7 b [2:0] $end
$var wire 1 g7 gnd $end
$var wire 3 h7 sum [2:0] $end
$var wire 1 i7 carry1 $end
$var wire 1 j7 carry0 $end
$var wire 1 k7 Cout $end
$scope module adder0 $end
$var wire 1 g7 Cin $end
$var wire 1 l7 a $end
$var wire 1 m7 b $end
$var reg 1 j7 Cout $end
$var reg 1 n7 p $end
$var reg 1 o7 q $end
$var reg 1 p7 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 j7 Cin $end
$var wire 1 q7 a $end
$var wire 1 r7 b $end
$var reg 1 i7 Cout $end
$var reg 1 s7 p $end
$var reg 1 t7 q $end
$var reg 1 u7 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 i7 Cin $end
$var wire 1 v7 a $end
$var wire 1 w7 b $end
$var reg 1 k7 Cout $end
$var reg 1 x7 p $end
$var reg 1 y7 q $end
$var reg 1 z7 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 {7 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 |7 state_0 $end
$var wire 4 }7 living_neighbors [3:0] $end
$var reg 1 ~7 state_d $end
$var reg 1 !8 state_q $end
$var reg 1 "8 stay_alive $end
$scope module living $end
$var wire 1 #8 gnd $end
$var wire 8 $8 in [7:0] $end
$var wire 3 %8 sum1 [2:0] $end
$var wire 3 &8 sum0 [2:0] $end
$var wire 4 '8 num [3:0] $end
$var wire 2 (8 count3 [1:0] $end
$var wire 2 )8 count2 [1:0] $end
$var wire 2 *8 count1 [1:0] $end
$var wire 2 +8 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 ,8 a [1:0] $end
$var wire 2 -8 b [1:0] $end
$var wire 2 .8 sum [1:0] $end
$var wire 1 /8 carry0 $end
$var wire 1 08 Cout $end
$scope module adder0 $end
$var wire 1 18 Cin $end
$var wire 1 28 a $end
$var wire 1 38 b $end
$var reg 1 /8 Cout $end
$var reg 1 48 p $end
$var reg 1 58 q $end
$var reg 1 68 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 /8 Cin $end
$var wire 1 78 a $end
$var wire 1 88 b $end
$var reg 1 08 Cout $end
$var reg 1 98 p $end
$var reg 1 :8 q $end
$var reg 1 ;8 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 <8 a [1:0] $end
$var wire 2 =8 b [1:0] $end
$var wire 2 >8 sum [1:0] $end
$var wire 1 ?8 carry0 $end
$var wire 1 @8 Cout $end
$scope module adder0 $end
$var wire 1 A8 Cin $end
$var wire 1 B8 a $end
$var wire 1 C8 b $end
$var reg 1 ?8 Cout $end
$var reg 1 D8 p $end
$var reg 1 E8 q $end
$var reg 1 F8 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ?8 Cin $end
$var wire 1 G8 a $end
$var wire 1 H8 b $end
$var reg 1 @8 Cout $end
$var reg 1 I8 p $end
$var reg 1 J8 q $end
$var reg 1 K8 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 #8 Cin $end
$var wire 1 L8 a $end
$var wire 1 M8 b $end
$var reg 1 N8 Cout $end
$var reg 1 O8 p $end
$var reg 1 P8 q $end
$var reg 1 Q8 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 #8 Cin $end
$var wire 1 R8 a $end
$var wire 1 S8 b $end
$var reg 1 T8 Cout $end
$var reg 1 U8 p $end
$var reg 1 V8 q $end
$var reg 1 W8 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 #8 Cin $end
$var wire 1 X8 a $end
$var wire 1 Y8 b $end
$var reg 1 Z8 Cout $end
$var reg 1 [8 p $end
$var reg 1 \8 q $end
$var reg 1 ]8 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 #8 Cin $end
$var wire 1 ^8 a $end
$var wire 1 _8 b $end
$var reg 1 `8 Cout $end
$var reg 1 a8 p $end
$var reg 1 b8 q $end
$var reg 1 c8 sum $end
$upscope $end
$scope module total $end
$var wire 3 d8 a [2:0] $end
$var wire 3 e8 b [2:0] $end
$var wire 1 f8 gnd $end
$var wire 3 g8 sum [2:0] $end
$var wire 1 h8 carry1 $end
$var wire 1 i8 carry0 $end
$var wire 1 j8 Cout $end
$scope module adder0 $end
$var wire 1 f8 Cin $end
$var wire 1 k8 a $end
$var wire 1 l8 b $end
$var reg 1 i8 Cout $end
$var reg 1 m8 p $end
$var reg 1 n8 q $end
$var reg 1 o8 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 i8 Cin $end
$var wire 1 p8 a $end
$var wire 1 q8 b $end
$var reg 1 h8 Cout $end
$var reg 1 r8 p $end
$var reg 1 s8 q $end
$var reg 1 t8 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 h8 Cin $end
$var wire 1 u8 a $end
$var wire 1 v8 b $end
$var reg 1 j8 Cout $end
$var reg 1 w8 p $end
$var reg 1 x8 q $end
$var reg 1 y8 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[4] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 z8 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 {8 state_0 $end
$var wire 4 |8 living_neighbors [3:0] $end
$var reg 1 }8 state_d $end
$var reg 1 ~8 state_q $end
$var reg 1 !9 stay_alive $end
$scope module living $end
$var wire 1 "9 gnd $end
$var wire 8 #9 in [7:0] $end
$var wire 3 $9 sum1 [2:0] $end
$var wire 3 %9 sum0 [2:0] $end
$var wire 4 &9 num [3:0] $end
$var wire 2 '9 count3 [1:0] $end
$var wire 2 (9 count2 [1:0] $end
$var wire 2 )9 count1 [1:0] $end
$var wire 2 *9 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 +9 a [1:0] $end
$var wire 2 ,9 b [1:0] $end
$var wire 2 -9 sum [1:0] $end
$var wire 1 .9 carry0 $end
$var wire 1 /9 Cout $end
$scope module adder0 $end
$var wire 1 09 Cin $end
$var wire 1 19 a $end
$var wire 1 29 b $end
$var reg 1 .9 Cout $end
$var reg 1 39 p $end
$var reg 1 49 q $end
$var reg 1 59 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 .9 Cin $end
$var wire 1 69 a $end
$var wire 1 79 b $end
$var reg 1 /9 Cout $end
$var reg 1 89 p $end
$var reg 1 99 q $end
$var reg 1 :9 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 ;9 a [1:0] $end
$var wire 2 <9 b [1:0] $end
$var wire 2 =9 sum [1:0] $end
$var wire 1 >9 carry0 $end
$var wire 1 ?9 Cout $end
$scope module adder0 $end
$var wire 1 @9 Cin $end
$var wire 1 A9 a $end
$var wire 1 B9 b $end
$var reg 1 >9 Cout $end
$var reg 1 C9 p $end
$var reg 1 D9 q $end
$var reg 1 E9 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 >9 Cin $end
$var wire 1 F9 a $end
$var wire 1 G9 b $end
$var reg 1 ?9 Cout $end
$var reg 1 H9 p $end
$var reg 1 I9 q $end
$var reg 1 J9 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 "9 Cin $end
$var wire 1 K9 a $end
$var wire 1 L9 b $end
$var reg 1 M9 Cout $end
$var reg 1 N9 p $end
$var reg 1 O9 q $end
$var reg 1 P9 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 "9 Cin $end
$var wire 1 Q9 a $end
$var wire 1 R9 b $end
$var reg 1 S9 Cout $end
$var reg 1 T9 p $end
$var reg 1 U9 q $end
$var reg 1 V9 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 "9 Cin $end
$var wire 1 W9 a $end
$var wire 1 X9 b $end
$var reg 1 Y9 Cout $end
$var reg 1 Z9 p $end
$var reg 1 [9 q $end
$var reg 1 \9 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 "9 Cin $end
$var wire 1 ]9 a $end
$var wire 1 ^9 b $end
$var reg 1 _9 Cout $end
$var reg 1 `9 p $end
$var reg 1 a9 q $end
$var reg 1 b9 sum $end
$upscope $end
$scope module total $end
$var wire 3 c9 a [2:0] $end
$var wire 3 d9 b [2:0] $end
$var wire 1 e9 gnd $end
$var wire 3 f9 sum [2:0] $end
$var wire 1 g9 carry1 $end
$var wire 1 h9 carry0 $end
$var wire 1 i9 Cout $end
$scope module adder0 $end
$var wire 1 e9 Cin $end
$var wire 1 j9 a $end
$var wire 1 k9 b $end
$var reg 1 h9 Cout $end
$var reg 1 l9 p $end
$var reg 1 m9 q $end
$var reg 1 n9 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 h9 Cin $end
$var wire 1 o9 a $end
$var wire 1 p9 b $end
$var reg 1 g9 Cout $end
$var reg 1 q9 p $end
$var reg 1 r9 q $end
$var reg 1 s9 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 g9 Cin $end
$var wire 1 t9 a $end
$var wire 1 u9 b $end
$var reg 1 i9 Cout $end
$var reg 1 v9 p $end
$var reg 1 w9 q $end
$var reg 1 x9 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 y9 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 z9 state_0 $end
$var wire 4 {9 living_neighbors [3:0] $end
$var reg 1 |9 state_d $end
$var reg 1 }9 state_q $end
$var reg 1 ~9 stay_alive $end
$scope module living $end
$var wire 1 !: gnd $end
$var wire 8 ": in [7:0] $end
$var wire 3 #: sum1 [2:0] $end
$var wire 3 $: sum0 [2:0] $end
$var wire 4 %: num [3:0] $end
$var wire 2 &: count3 [1:0] $end
$var wire 2 ': count2 [1:0] $end
$var wire 2 (: count1 [1:0] $end
$var wire 2 ): count0 [1:0] $end
$scope module adder0 $end
$var wire 2 *: a [1:0] $end
$var wire 2 +: b [1:0] $end
$var wire 2 ,: sum [1:0] $end
$var wire 1 -: carry0 $end
$var wire 1 .: Cout $end
$scope module adder0 $end
$var wire 1 /: Cin $end
$var wire 1 0: a $end
$var wire 1 1: b $end
$var reg 1 -: Cout $end
$var reg 1 2: p $end
$var reg 1 3: q $end
$var reg 1 4: sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 -: Cin $end
$var wire 1 5: a $end
$var wire 1 6: b $end
$var reg 1 .: Cout $end
$var reg 1 7: p $end
$var reg 1 8: q $end
$var reg 1 9: sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 :: a [1:0] $end
$var wire 2 ;: b [1:0] $end
$var wire 2 <: sum [1:0] $end
$var wire 1 =: carry0 $end
$var wire 1 >: Cout $end
$scope module adder0 $end
$var wire 1 ?: Cin $end
$var wire 1 @: a $end
$var wire 1 A: b $end
$var reg 1 =: Cout $end
$var reg 1 B: p $end
$var reg 1 C: q $end
$var reg 1 D: sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 =: Cin $end
$var wire 1 E: a $end
$var wire 1 F: b $end
$var reg 1 >: Cout $end
$var reg 1 G: p $end
$var reg 1 H: q $end
$var reg 1 I: sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 !: Cin $end
$var wire 1 J: a $end
$var wire 1 K: b $end
$var reg 1 L: Cout $end
$var reg 1 M: p $end
$var reg 1 N: q $end
$var reg 1 O: sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 !: Cin $end
$var wire 1 P: a $end
$var wire 1 Q: b $end
$var reg 1 R: Cout $end
$var reg 1 S: p $end
$var reg 1 T: q $end
$var reg 1 U: sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 !: Cin $end
$var wire 1 V: a $end
$var wire 1 W: b $end
$var reg 1 X: Cout $end
$var reg 1 Y: p $end
$var reg 1 Z: q $end
$var reg 1 [: sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 !: Cin $end
$var wire 1 \: a $end
$var wire 1 ]: b $end
$var reg 1 ^: Cout $end
$var reg 1 _: p $end
$var reg 1 `: q $end
$var reg 1 a: sum $end
$upscope $end
$scope module total $end
$var wire 3 b: a [2:0] $end
$var wire 3 c: b [2:0] $end
$var wire 1 d: gnd $end
$var wire 3 e: sum [2:0] $end
$var wire 1 f: carry1 $end
$var wire 1 g: carry0 $end
$var wire 1 h: Cout $end
$scope module adder0 $end
$var wire 1 d: Cin $end
$var wire 1 i: a $end
$var wire 1 j: b $end
$var reg 1 g: Cout $end
$var reg 1 k: p $end
$var reg 1 l: q $end
$var reg 1 m: sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 g: Cin $end
$var wire 1 n: a $end
$var wire 1 o: b $end
$var reg 1 f: Cout $end
$var reg 1 p: p $end
$var reg 1 q: q $end
$var reg 1 r: sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 f: Cin $end
$var wire 1 s: a $end
$var wire 1 t: b $end
$var reg 1 h: Cout $end
$var reg 1 u: p $end
$var reg 1 v: q $end
$var reg 1 w: sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 x: neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 y: state_0 $end
$var wire 4 z: living_neighbors [3:0] $end
$var reg 1 {: state_d $end
$var reg 1 |: state_q $end
$var reg 1 }: stay_alive $end
$scope module living $end
$var wire 1 ~: gnd $end
$var wire 8 !; in [7:0] $end
$var wire 3 "; sum1 [2:0] $end
$var wire 3 #; sum0 [2:0] $end
$var wire 4 $; num [3:0] $end
$var wire 2 %; count3 [1:0] $end
$var wire 2 &; count2 [1:0] $end
$var wire 2 '; count1 [1:0] $end
$var wire 2 (; count0 [1:0] $end
$scope module adder0 $end
$var wire 2 ); a [1:0] $end
$var wire 2 *; b [1:0] $end
$var wire 2 +; sum [1:0] $end
$var wire 1 ,; carry0 $end
$var wire 1 -; Cout $end
$scope module adder0 $end
$var wire 1 .; Cin $end
$var wire 1 /; a $end
$var wire 1 0; b $end
$var reg 1 ,; Cout $end
$var reg 1 1; p $end
$var reg 1 2; q $end
$var reg 1 3; sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ,; Cin $end
$var wire 1 4; a $end
$var wire 1 5; b $end
$var reg 1 -; Cout $end
$var reg 1 6; p $end
$var reg 1 7; q $end
$var reg 1 8; sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 9; a [1:0] $end
$var wire 2 :; b [1:0] $end
$var wire 2 ;; sum [1:0] $end
$var wire 1 <; carry0 $end
$var wire 1 =; Cout $end
$scope module adder0 $end
$var wire 1 >; Cin $end
$var wire 1 ?; a $end
$var wire 1 @; b $end
$var reg 1 <; Cout $end
$var reg 1 A; p $end
$var reg 1 B; q $end
$var reg 1 C; sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 <; Cin $end
$var wire 1 D; a $end
$var wire 1 E; b $end
$var reg 1 =; Cout $end
$var reg 1 F; p $end
$var reg 1 G; q $end
$var reg 1 H; sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 ~: Cin $end
$var wire 1 I; a $end
$var wire 1 J; b $end
$var reg 1 K; Cout $end
$var reg 1 L; p $end
$var reg 1 M; q $end
$var reg 1 N; sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 ~: Cin $end
$var wire 1 O; a $end
$var wire 1 P; b $end
$var reg 1 Q; Cout $end
$var reg 1 R; p $end
$var reg 1 S; q $end
$var reg 1 T; sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 ~: Cin $end
$var wire 1 U; a $end
$var wire 1 V; b $end
$var reg 1 W; Cout $end
$var reg 1 X; p $end
$var reg 1 Y; q $end
$var reg 1 Z; sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 ~: Cin $end
$var wire 1 [; a $end
$var wire 1 \; b $end
$var reg 1 ]; Cout $end
$var reg 1 ^; p $end
$var reg 1 _; q $end
$var reg 1 `; sum $end
$upscope $end
$scope module total $end
$var wire 3 a; a [2:0] $end
$var wire 3 b; b [2:0] $end
$var wire 1 c; gnd $end
$var wire 3 d; sum [2:0] $end
$var wire 1 e; carry1 $end
$var wire 1 f; carry0 $end
$var wire 1 g; Cout $end
$scope module adder0 $end
$var wire 1 c; Cin $end
$var wire 1 h; a $end
$var wire 1 i; b $end
$var reg 1 f; Cout $end
$var reg 1 j; p $end
$var reg 1 k; q $end
$var reg 1 l; sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 f; Cin $end
$var wire 1 m; a $end
$var wire 1 n; b $end
$var reg 1 e; Cout $end
$var reg 1 o; p $end
$var reg 1 p; q $end
$var reg 1 q; sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 e; Cin $end
$var wire 1 r; a $end
$var wire 1 s; b $end
$var reg 1 g; Cout $end
$var reg 1 t; p $end
$var reg 1 u; q $end
$var reg 1 v; sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 w; neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 x; state_0 $end
$var wire 4 y; living_neighbors [3:0] $end
$var reg 1 z; state_d $end
$var reg 1 {; state_q $end
$var reg 1 |; stay_alive $end
$scope module living $end
$var wire 1 }; gnd $end
$var wire 8 ~; in [7:0] $end
$var wire 3 !< sum1 [2:0] $end
$var wire 3 "< sum0 [2:0] $end
$var wire 4 #< num [3:0] $end
$var wire 2 $< count3 [1:0] $end
$var wire 2 %< count2 [1:0] $end
$var wire 2 &< count1 [1:0] $end
$var wire 2 '< count0 [1:0] $end
$scope module adder0 $end
$var wire 2 (< a [1:0] $end
$var wire 2 )< b [1:0] $end
$var wire 2 *< sum [1:0] $end
$var wire 1 +< carry0 $end
$var wire 1 ,< Cout $end
$scope module adder0 $end
$var wire 1 -< Cin $end
$var wire 1 .< a $end
$var wire 1 /< b $end
$var reg 1 +< Cout $end
$var reg 1 0< p $end
$var reg 1 1< q $end
$var reg 1 2< sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 +< Cin $end
$var wire 1 3< a $end
$var wire 1 4< b $end
$var reg 1 ,< Cout $end
$var reg 1 5< p $end
$var reg 1 6< q $end
$var reg 1 7< sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 8< a [1:0] $end
$var wire 2 9< b [1:0] $end
$var wire 2 :< sum [1:0] $end
$var wire 1 ;< carry0 $end
$var wire 1 << Cout $end
$scope module adder0 $end
$var wire 1 =< Cin $end
$var wire 1 >< a $end
$var wire 1 ?< b $end
$var reg 1 ;< Cout $end
$var reg 1 @< p $end
$var reg 1 A< q $end
$var reg 1 B< sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ;< Cin $end
$var wire 1 C< a $end
$var wire 1 D< b $end
$var reg 1 << Cout $end
$var reg 1 E< p $end
$var reg 1 F< q $end
$var reg 1 G< sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 }; Cin $end
$var wire 1 H< a $end
$var wire 1 I< b $end
$var reg 1 J< Cout $end
$var reg 1 K< p $end
$var reg 1 L< q $end
$var reg 1 M< sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 }; Cin $end
$var wire 1 N< a $end
$var wire 1 O< b $end
$var reg 1 P< Cout $end
$var reg 1 Q< p $end
$var reg 1 R< q $end
$var reg 1 S< sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 }; Cin $end
$var wire 1 T< a $end
$var wire 1 U< b $end
$var reg 1 V< Cout $end
$var reg 1 W< p $end
$var reg 1 X< q $end
$var reg 1 Y< sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 }; Cin $end
$var wire 1 Z< a $end
$var wire 1 [< b $end
$var reg 1 \< Cout $end
$var reg 1 ]< p $end
$var reg 1 ^< q $end
$var reg 1 _< sum $end
$upscope $end
$scope module total $end
$var wire 3 `< a [2:0] $end
$var wire 3 a< b [2:0] $end
$var wire 1 b< gnd $end
$var wire 3 c< sum [2:0] $end
$var wire 1 d< carry1 $end
$var wire 1 e< carry0 $end
$var wire 1 f< Cout $end
$scope module adder0 $end
$var wire 1 b< Cin $end
$var wire 1 g< a $end
$var wire 1 h< b $end
$var reg 1 e< Cout $end
$var reg 1 i< p $end
$var reg 1 j< q $end
$var reg 1 k< sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 e< Cin $end
$var wire 1 l< a $end
$var wire 1 m< b $end
$var reg 1 d< Cout $end
$var reg 1 n< p $end
$var reg 1 o< q $end
$var reg 1 p< sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 d< Cin $end
$var wire 1 q< a $end
$var wire 1 r< b $end
$var reg 1 f< Cout $end
$var reg 1 s< p $end
$var reg 1 t< q $end
$var reg 1 u< sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 v< neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 w< state_0 $end
$var wire 4 x< living_neighbors [3:0] $end
$var reg 1 y< state_d $end
$var reg 1 z< state_q $end
$var reg 1 {< stay_alive $end
$scope module living $end
$var wire 1 |< gnd $end
$var wire 8 }< in [7:0] $end
$var wire 3 ~< sum1 [2:0] $end
$var wire 3 != sum0 [2:0] $end
$var wire 4 "= num [3:0] $end
$var wire 2 #= count3 [1:0] $end
$var wire 2 $= count2 [1:0] $end
$var wire 2 %= count1 [1:0] $end
$var wire 2 &= count0 [1:0] $end
$scope module adder0 $end
$var wire 2 '= a [1:0] $end
$var wire 2 (= b [1:0] $end
$var wire 2 )= sum [1:0] $end
$var wire 1 *= carry0 $end
$var wire 1 += Cout $end
$scope module adder0 $end
$var wire 1 ,= Cin $end
$var wire 1 -= a $end
$var wire 1 .= b $end
$var reg 1 *= Cout $end
$var reg 1 /= p $end
$var reg 1 0= q $end
$var reg 1 1= sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 *= Cin $end
$var wire 1 2= a $end
$var wire 1 3= b $end
$var reg 1 += Cout $end
$var reg 1 4= p $end
$var reg 1 5= q $end
$var reg 1 6= sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 7= a [1:0] $end
$var wire 2 8= b [1:0] $end
$var wire 2 9= sum [1:0] $end
$var wire 1 := carry0 $end
$var wire 1 ;= Cout $end
$scope module adder0 $end
$var wire 1 <= Cin $end
$var wire 1 == a $end
$var wire 1 >= b $end
$var reg 1 := Cout $end
$var reg 1 ?= p $end
$var reg 1 @= q $end
$var reg 1 A= sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 := Cin $end
$var wire 1 B= a $end
$var wire 1 C= b $end
$var reg 1 ;= Cout $end
$var reg 1 D= p $end
$var reg 1 E= q $end
$var reg 1 F= sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 |< Cin $end
$var wire 1 G= a $end
$var wire 1 H= b $end
$var reg 1 I= Cout $end
$var reg 1 J= p $end
$var reg 1 K= q $end
$var reg 1 L= sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 |< Cin $end
$var wire 1 M= a $end
$var wire 1 N= b $end
$var reg 1 O= Cout $end
$var reg 1 P= p $end
$var reg 1 Q= q $end
$var reg 1 R= sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 |< Cin $end
$var wire 1 S= a $end
$var wire 1 T= b $end
$var reg 1 U= Cout $end
$var reg 1 V= p $end
$var reg 1 W= q $end
$var reg 1 X= sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 |< Cin $end
$var wire 1 Y= a $end
$var wire 1 Z= b $end
$var reg 1 [= Cout $end
$var reg 1 \= p $end
$var reg 1 ]= q $end
$var reg 1 ^= sum $end
$upscope $end
$scope module total $end
$var wire 3 _= a [2:0] $end
$var wire 3 `= b [2:0] $end
$var wire 1 a= gnd $end
$var wire 3 b= sum [2:0] $end
$var wire 1 c= carry1 $end
$var wire 1 d= carry0 $end
$var wire 1 e= Cout $end
$scope module adder0 $end
$var wire 1 a= Cin $end
$var wire 1 f= a $end
$var wire 1 g= b $end
$var reg 1 d= Cout $end
$var reg 1 h= p $end
$var reg 1 i= q $end
$var reg 1 j= sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 d= Cin $end
$var wire 1 k= a $end
$var wire 1 l= b $end
$var reg 1 c= Cout $end
$var reg 1 m= p $end
$var reg 1 n= q $end
$var reg 1 o= sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 c= Cin $end
$var wire 1 p= a $end
$var wire 1 q= b $end
$var reg 1 e= Cout $end
$var reg 1 r= p $end
$var reg 1 s= q $end
$var reg 1 t= sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 u= neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 v= state_0 $end
$var wire 4 w= living_neighbors [3:0] $end
$var reg 1 x= state_d $end
$var reg 1 y= state_q $end
$var reg 1 z= stay_alive $end
$scope module living $end
$var wire 1 {= gnd $end
$var wire 8 |= in [7:0] $end
$var wire 3 }= sum1 [2:0] $end
$var wire 3 ~= sum0 [2:0] $end
$var wire 4 !> num [3:0] $end
$var wire 2 "> count3 [1:0] $end
$var wire 2 #> count2 [1:0] $end
$var wire 2 $> count1 [1:0] $end
$var wire 2 %> count0 [1:0] $end
$scope module adder0 $end
$var wire 2 &> a [1:0] $end
$var wire 2 '> b [1:0] $end
$var wire 2 (> sum [1:0] $end
$var wire 1 )> carry0 $end
$var wire 1 *> Cout $end
$scope module adder0 $end
$var wire 1 +> Cin $end
$var wire 1 ,> a $end
$var wire 1 -> b $end
$var reg 1 )> Cout $end
$var reg 1 .> p $end
$var reg 1 /> q $end
$var reg 1 0> sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 )> Cin $end
$var wire 1 1> a $end
$var wire 1 2> b $end
$var reg 1 *> Cout $end
$var reg 1 3> p $end
$var reg 1 4> q $end
$var reg 1 5> sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 6> a [1:0] $end
$var wire 2 7> b [1:0] $end
$var wire 2 8> sum [1:0] $end
$var wire 1 9> carry0 $end
$var wire 1 :> Cout $end
$scope module adder0 $end
$var wire 1 ;> Cin $end
$var wire 1 <> a $end
$var wire 1 => b $end
$var reg 1 9> Cout $end
$var reg 1 >> p $end
$var reg 1 ?> q $end
$var reg 1 @> sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 9> Cin $end
$var wire 1 A> a $end
$var wire 1 B> b $end
$var reg 1 :> Cout $end
$var reg 1 C> p $end
$var reg 1 D> q $end
$var reg 1 E> sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 {= Cin $end
$var wire 1 F> a $end
$var wire 1 G> b $end
$var reg 1 H> Cout $end
$var reg 1 I> p $end
$var reg 1 J> q $end
$var reg 1 K> sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 {= Cin $end
$var wire 1 L> a $end
$var wire 1 M> b $end
$var reg 1 N> Cout $end
$var reg 1 O> p $end
$var reg 1 P> q $end
$var reg 1 Q> sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 {= Cin $end
$var wire 1 R> a $end
$var wire 1 S> b $end
$var reg 1 T> Cout $end
$var reg 1 U> p $end
$var reg 1 V> q $end
$var reg 1 W> sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 {= Cin $end
$var wire 1 X> a $end
$var wire 1 Y> b $end
$var reg 1 Z> Cout $end
$var reg 1 [> p $end
$var reg 1 \> q $end
$var reg 1 ]> sum $end
$upscope $end
$scope module total $end
$var wire 3 ^> a [2:0] $end
$var wire 3 _> b [2:0] $end
$var wire 1 `> gnd $end
$var wire 3 a> sum [2:0] $end
$var wire 1 b> carry1 $end
$var wire 1 c> carry0 $end
$var wire 1 d> Cout $end
$scope module adder0 $end
$var wire 1 `> Cin $end
$var wire 1 e> a $end
$var wire 1 f> b $end
$var reg 1 c> Cout $end
$var reg 1 g> p $end
$var reg 1 h> q $end
$var reg 1 i> sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 c> Cin $end
$var wire 1 j> a $end
$var wire 1 k> b $end
$var reg 1 b> Cout $end
$var reg 1 l> p $end
$var reg 1 m> q $end
$var reg 1 n> sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 b> Cin $end
$var wire 1 o> a $end
$var wire 1 p> b $end
$var reg 1 d> Cout $end
$var reg 1 q> p $end
$var reg 1 r> q $end
$var reg 1 s> sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 t> neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 u> state_0 $end
$var wire 4 v> living_neighbors [3:0] $end
$var reg 1 w> state_d $end
$var reg 1 x> state_q $end
$var reg 1 y> stay_alive $end
$scope module living $end
$var wire 1 z> gnd $end
$var wire 8 {> in [7:0] $end
$var wire 3 |> sum1 [2:0] $end
$var wire 3 }> sum0 [2:0] $end
$var wire 4 ~> num [3:0] $end
$var wire 2 !? count3 [1:0] $end
$var wire 2 "? count2 [1:0] $end
$var wire 2 #? count1 [1:0] $end
$var wire 2 $? count0 [1:0] $end
$scope module adder0 $end
$var wire 2 %? a [1:0] $end
$var wire 2 &? b [1:0] $end
$var wire 2 '? sum [1:0] $end
$var wire 1 (? carry0 $end
$var wire 1 )? Cout $end
$scope module adder0 $end
$var wire 1 *? Cin $end
$var wire 1 +? a $end
$var wire 1 ,? b $end
$var reg 1 (? Cout $end
$var reg 1 -? p $end
$var reg 1 .? q $end
$var reg 1 /? sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 (? Cin $end
$var wire 1 0? a $end
$var wire 1 1? b $end
$var reg 1 )? Cout $end
$var reg 1 2? p $end
$var reg 1 3? q $end
$var reg 1 4? sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 5? a [1:0] $end
$var wire 2 6? b [1:0] $end
$var wire 2 7? sum [1:0] $end
$var wire 1 8? carry0 $end
$var wire 1 9? Cout $end
$scope module adder0 $end
$var wire 1 :? Cin $end
$var wire 1 ;? a $end
$var wire 1 <? b $end
$var reg 1 8? Cout $end
$var reg 1 =? p $end
$var reg 1 >? q $end
$var reg 1 ?? sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 8? Cin $end
$var wire 1 @? a $end
$var wire 1 A? b $end
$var reg 1 9? Cout $end
$var reg 1 B? p $end
$var reg 1 C? q $end
$var reg 1 D? sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 z> Cin $end
$var wire 1 E? a $end
$var wire 1 F? b $end
$var reg 1 G? Cout $end
$var reg 1 H? p $end
$var reg 1 I? q $end
$var reg 1 J? sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 z> Cin $end
$var wire 1 K? a $end
$var wire 1 L? b $end
$var reg 1 M? Cout $end
$var reg 1 N? p $end
$var reg 1 O? q $end
$var reg 1 P? sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 z> Cin $end
$var wire 1 Q? a $end
$var wire 1 R? b $end
$var reg 1 S? Cout $end
$var reg 1 T? p $end
$var reg 1 U? q $end
$var reg 1 V? sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 z> Cin $end
$var wire 1 W? a $end
$var wire 1 X? b $end
$var reg 1 Y? Cout $end
$var reg 1 Z? p $end
$var reg 1 [? q $end
$var reg 1 \? sum $end
$upscope $end
$scope module total $end
$var wire 3 ]? a [2:0] $end
$var wire 3 ^? b [2:0] $end
$var wire 1 _? gnd $end
$var wire 3 `? sum [2:0] $end
$var wire 1 a? carry1 $end
$var wire 1 b? carry0 $end
$var wire 1 c? Cout $end
$scope module adder0 $end
$var wire 1 _? Cin $end
$var wire 1 d? a $end
$var wire 1 e? b $end
$var reg 1 b? Cout $end
$var reg 1 f? p $end
$var reg 1 g? q $end
$var reg 1 h? sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 b? Cin $end
$var wire 1 i? a $end
$var wire 1 j? b $end
$var reg 1 a? Cout $end
$var reg 1 k? p $end
$var reg 1 l? q $end
$var reg 1 m? sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 a? Cin $end
$var wire 1 n? a $end
$var wire 1 o? b $end
$var reg 1 c? Cout $end
$var reg 1 p? p $end
$var reg 1 q? q $end
$var reg 1 r? sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 s? neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 t? state_0 $end
$var wire 4 u? living_neighbors [3:0] $end
$var reg 1 v? state_d $end
$var reg 1 w? state_q $end
$var reg 1 x? stay_alive $end
$scope module living $end
$var wire 1 y? gnd $end
$var wire 8 z? in [7:0] $end
$var wire 3 {? sum1 [2:0] $end
$var wire 3 |? sum0 [2:0] $end
$var wire 4 }? num [3:0] $end
$var wire 2 ~? count3 [1:0] $end
$var wire 2 !@ count2 [1:0] $end
$var wire 2 "@ count1 [1:0] $end
$var wire 2 #@ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 $@ a [1:0] $end
$var wire 2 %@ b [1:0] $end
$var wire 2 &@ sum [1:0] $end
$var wire 1 '@ carry0 $end
$var wire 1 (@ Cout $end
$scope module adder0 $end
$var wire 1 )@ Cin $end
$var wire 1 *@ a $end
$var wire 1 +@ b $end
$var reg 1 '@ Cout $end
$var reg 1 ,@ p $end
$var reg 1 -@ q $end
$var reg 1 .@ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 '@ Cin $end
$var wire 1 /@ a $end
$var wire 1 0@ b $end
$var reg 1 (@ Cout $end
$var reg 1 1@ p $end
$var reg 1 2@ q $end
$var reg 1 3@ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 4@ a [1:0] $end
$var wire 2 5@ b [1:0] $end
$var wire 2 6@ sum [1:0] $end
$var wire 1 7@ carry0 $end
$var wire 1 8@ Cout $end
$scope module adder0 $end
$var wire 1 9@ Cin $end
$var wire 1 :@ a $end
$var wire 1 ;@ b $end
$var reg 1 7@ Cout $end
$var reg 1 <@ p $end
$var reg 1 =@ q $end
$var reg 1 >@ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 7@ Cin $end
$var wire 1 ?@ a $end
$var wire 1 @@ b $end
$var reg 1 8@ Cout $end
$var reg 1 A@ p $end
$var reg 1 B@ q $end
$var reg 1 C@ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 y? Cin $end
$var wire 1 D@ a $end
$var wire 1 E@ b $end
$var reg 1 F@ Cout $end
$var reg 1 G@ p $end
$var reg 1 H@ q $end
$var reg 1 I@ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 y? Cin $end
$var wire 1 J@ a $end
$var wire 1 K@ b $end
$var reg 1 L@ Cout $end
$var reg 1 M@ p $end
$var reg 1 N@ q $end
$var reg 1 O@ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 y? Cin $end
$var wire 1 P@ a $end
$var wire 1 Q@ b $end
$var reg 1 R@ Cout $end
$var reg 1 S@ p $end
$var reg 1 T@ q $end
$var reg 1 U@ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 y? Cin $end
$var wire 1 V@ a $end
$var wire 1 W@ b $end
$var reg 1 X@ Cout $end
$var reg 1 Y@ p $end
$var reg 1 Z@ q $end
$var reg 1 [@ sum $end
$upscope $end
$scope module total $end
$var wire 3 \@ a [2:0] $end
$var wire 3 ]@ b [2:0] $end
$var wire 1 ^@ gnd $end
$var wire 3 _@ sum [2:0] $end
$var wire 1 `@ carry1 $end
$var wire 1 a@ carry0 $end
$var wire 1 b@ Cout $end
$scope module adder0 $end
$var wire 1 ^@ Cin $end
$var wire 1 c@ a $end
$var wire 1 d@ b $end
$var reg 1 a@ Cout $end
$var reg 1 e@ p $end
$var reg 1 f@ q $end
$var reg 1 g@ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 a@ Cin $end
$var wire 1 h@ a $end
$var wire 1 i@ b $end
$var reg 1 `@ Cout $end
$var reg 1 j@ p $end
$var reg 1 k@ q $end
$var reg 1 l@ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 `@ Cin $end
$var wire 1 m@ a $end
$var wire 1 n@ b $end
$var reg 1 b@ Cout $end
$var reg 1 o@ p $end
$var reg 1 p@ q $end
$var reg 1 q@ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[5] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 r@ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 s@ state_0 $end
$var wire 4 t@ living_neighbors [3:0] $end
$var reg 1 u@ state_d $end
$var reg 1 v@ state_q $end
$var reg 1 w@ stay_alive $end
$scope module living $end
$var wire 1 x@ gnd $end
$var wire 8 y@ in [7:0] $end
$var wire 3 z@ sum1 [2:0] $end
$var wire 3 {@ sum0 [2:0] $end
$var wire 4 |@ num [3:0] $end
$var wire 2 }@ count3 [1:0] $end
$var wire 2 ~@ count2 [1:0] $end
$var wire 2 !A count1 [1:0] $end
$var wire 2 "A count0 [1:0] $end
$scope module adder0 $end
$var wire 2 #A a [1:0] $end
$var wire 2 $A b [1:0] $end
$var wire 2 %A sum [1:0] $end
$var wire 1 &A carry0 $end
$var wire 1 'A Cout $end
$scope module adder0 $end
$var wire 1 (A Cin $end
$var wire 1 )A a $end
$var wire 1 *A b $end
$var reg 1 &A Cout $end
$var reg 1 +A p $end
$var reg 1 ,A q $end
$var reg 1 -A sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 &A Cin $end
$var wire 1 .A a $end
$var wire 1 /A b $end
$var reg 1 'A Cout $end
$var reg 1 0A p $end
$var reg 1 1A q $end
$var reg 1 2A sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 3A a [1:0] $end
$var wire 2 4A b [1:0] $end
$var wire 2 5A sum [1:0] $end
$var wire 1 6A carry0 $end
$var wire 1 7A Cout $end
$scope module adder0 $end
$var wire 1 8A Cin $end
$var wire 1 9A a $end
$var wire 1 :A b $end
$var reg 1 6A Cout $end
$var reg 1 ;A p $end
$var reg 1 <A q $end
$var reg 1 =A sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 6A Cin $end
$var wire 1 >A a $end
$var wire 1 ?A b $end
$var reg 1 7A Cout $end
$var reg 1 @A p $end
$var reg 1 AA q $end
$var reg 1 BA sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 x@ Cin $end
$var wire 1 CA a $end
$var wire 1 DA b $end
$var reg 1 EA Cout $end
$var reg 1 FA p $end
$var reg 1 GA q $end
$var reg 1 HA sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 x@ Cin $end
$var wire 1 IA a $end
$var wire 1 JA b $end
$var reg 1 KA Cout $end
$var reg 1 LA p $end
$var reg 1 MA q $end
$var reg 1 NA sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 x@ Cin $end
$var wire 1 OA a $end
$var wire 1 PA b $end
$var reg 1 QA Cout $end
$var reg 1 RA p $end
$var reg 1 SA q $end
$var reg 1 TA sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 x@ Cin $end
$var wire 1 UA a $end
$var wire 1 VA b $end
$var reg 1 WA Cout $end
$var reg 1 XA p $end
$var reg 1 YA q $end
$var reg 1 ZA sum $end
$upscope $end
$scope module total $end
$var wire 3 [A a [2:0] $end
$var wire 3 \A b [2:0] $end
$var wire 1 ]A gnd $end
$var wire 3 ^A sum [2:0] $end
$var wire 1 _A carry1 $end
$var wire 1 `A carry0 $end
$var wire 1 aA Cout $end
$scope module adder0 $end
$var wire 1 ]A Cin $end
$var wire 1 bA a $end
$var wire 1 cA b $end
$var reg 1 `A Cout $end
$var reg 1 dA p $end
$var reg 1 eA q $end
$var reg 1 fA sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 `A Cin $end
$var wire 1 gA a $end
$var wire 1 hA b $end
$var reg 1 _A Cout $end
$var reg 1 iA p $end
$var reg 1 jA q $end
$var reg 1 kA sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 _A Cin $end
$var wire 1 lA a $end
$var wire 1 mA b $end
$var reg 1 aA Cout $end
$var reg 1 nA p $end
$var reg 1 oA q $end
$var reg 1 pA sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 qA neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 rA state_0 $end
$var wire 4 sA living_neighbors [3:0] $end
$var reg 1 tA state_d $end
$var reg 1 uA state_q $end
$var reg 1 vA stay_alive $end
$scope module living $end
$var wire 1 wA gnd $end
$var wire 8 xA in [7:0] $end
$var wire 3 yA sum1 [2:0] $end
$var wire 3 zA sum0 [2:0] $end
$var wire 4 {A num [3:0] $end
$var wire 2 |A count3 [1:0] $end
$var wire 2 }A count2 [1:0] $end
$var wire 2 ~A count1 [1:0] $end
$var wire 2 !B count0 [1:0] $end
$scope module adder0 $end
$var wire 2 "B a [1:0] $end
$var wire 2 #B b [1:0] $end
$var wire 2 $B sum [1:0] $end
$var wire 1 %B carry0 $end
$var wire 1 &B Cout $end
$scope module adder0 $end
$var wire 1 'B Cin $end
$var wire 1 (B a $end
$var wire 1 )B b $end
$var reg 1 %B Cout $end
$var reg 1 *B p $end
$var reg 1 +B q $end
$var reg 1 ,B sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 %B Cin $end
$var wire 1 -B a $end
$var wire 1 .B b $end
$var reg 1 &B Cout $end
$var reg 1 /B p $end
$var reg 1 0B q $end
$var reg 1 1B sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 2B a [1:0] $end
$var wire 2 3B b [1:0] $end
$var wire 2 4B sum [1:0] $end
$var wire 1 5B carry0 $end
$var wire 1 6B Cout $end
$scope module adder0 $end
$var wire 1 7B Cin $end
$var wire 1 8B a $end
$var wire 1 9B b $end
$var reg 1 5B Cout $end
$var reg 1 :B p $end
$var reg 1 ;B q $end
$var reg 1 <B sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 5B Cin $end
$var wire 1 =B a $end
$var wire 1 >B b $end
$var reg 1 6B Cout $end
$var reg 1 ?B p $end
$var reg 1 @B q $end
$var reg 1 AB sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 wA Cin $end
$var wire 1 BB a $end
$var wire 1 CB b $end
$var reg 1 DB Cout $end
$var reg 1 EB p $end
$var reg 1 FB q $end
$var reg 1 GB sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 wA Cin $end
$var wire 1 HB a $end
$var wire 1 IB b $end
$var reg 1 JB Cout $end
$var reg 1 KB p $end
$var reg 1 LB q $end
$var reg 1 MB sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 wA Cin $end
$var wire 1 NB a $end
$var wire 1 OB b $end
$var reg 1 PB Cout $end
$var reg 1 QB p $end
$var reg 1 RB q $end
$var reg 1 SB sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 wA Cin $end
$var wire 1 TB a $end
$var wire 1 UB b $end
$var reg 1 VB Cout $end
$var reg 1 WB p $end
$var reg 1 XB q $end
$var reg 1 YB sum $end
$upscope $end
$scope module total $end
$var wire 3 ZB a [2:0] $end
$var wire 3 [B b [2:0] $end
$var wire 1 \B gnd $end
$var wire 3 ]B sum [2:0] $end
$var wire 1 ^B carry1 $end
$var wire 1 _B carry0 $end
$var wire 1 `B Cout $end
$scope module adder0 $end
$var wire 1 \B Cin $end
$var wire 1 aB a $end
$var wire 1 bB b $end
$var reg 1 _B Cout $end
$var reg 1 cB p $end
$var reg 1 dB q $end
$var reg 1 eB sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 _B Cin $end
$var wire 1 fB a $end
$var wire 1 gB b $end
$var reg 1 ^B Cout $end
$var reg 1 hB p $end
$var reg 1 iB q $end
$var reg 1 jB sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 ^B Cin $end
$var wire 1 kB a $end
$var wire 1 lB b $end
$var reg 1 `B Cout $end
$var reg 1 mB p $end
$var reg 1 nB q $end
$var reg 1 oB sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 pB neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 qB state_0 $end
$var wire 4 rB living_neighbors [3:0] $end
$var reg 1 sB state_d $end
$var reg 1 tB state_q $end
$var reg 1 uB stay_alive $end
$scope module living $end
$var wire 1 vB gnd $end
$var wire 8 wB in [7:0] $end
$var wire 3 xB sum1 [2:0] $end
$var wire 3 yB sum0 [2:0] $end
$var wire 4 zB num [3:0] $end
$var wire 2 {B count3 [1:0] $end
$var wire 2 |B count2 [1:0] $end
$var wire 2 }B count1 [1:0] $end
$var wire 2 ~B count0 [1:0] $end
$scope module adder0 $end
$var wire 2 !C a [1:0] $end
$var wire 2 "C b [1:0] $end
$var wire 2 #C sum [1:0] $end
$var wire 1 $C carry0 $end
$var wire 1 %C Cout $end
$scope module adder0 $end
$var wire 1 &C Cin $end
$var wire 1 'C a $end
$var wire 1 (C b $end
$var reg 1 $C Cout $end
$var reg 1 )C p $end
$var reg 1 *C q $end
$var reg 1 +C sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 $C Cin $end
$var wire 1 ,C a $end
$var wire 1 -C b $end
$var reg 1 %C Cout $end
$var reg 1 .C p $end
$var reg 1 /C q $end
$var reg 1 0C sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 1C a [1:0] $end
$var wire 2 2C b [1:0] $end
$var wire 2 3C sum [1:0] $end
$var wire 1 4C carry0 $end
$var wire 1 5C Cout $end
$scope module adder0 $end
$var wire 1 6C Cin $end
$var wire 1 7C a $end
$var wire 1 8C b $end
$var reg 1 4C Cout $end
$var reg 1 9C p $end
$var reg 1 :C q $end
$var reg 1 ;C sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 4C Cin $end
$var wire 1 <C a $end
$var wire 1 =C b $end
$var reg 1 5C Cout $end
$var reg 1 >C p $end
$var reg 1 ?C q $end
$var reg 1 @C sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 vB Cin $end
$var wire 1 AC a $end
$var wire 1 BC b $end
$var reg 1 CC Cout $end
$var reg 1 DC p $end
$var reg 1 EC q $end
$var reg 1 FC sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 vB Cin $end
$var wire 1 GC a $end
$var wire 1 HC b $end
$var reg 1 IC Cout $end
$var reg 1 JC p $end
$var reg 1 KC q $end
$var reg 1 LC sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 vB Cin $end
$var wire 1 MC a $end
$var wire 1 NC b $end
$var reg 1 OC Cout $end
$var reg 1 PC p $end
$var reg 1 QC q $end
$var reg 1 RC sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 vB Cin $end
$var wire 1 SC a $end
$var wire 1 TC b $end
$var reg 1 UC Cout $end
$var reg 1 VC p $end
$var reg 1 WC q $end
$var reg 1 XC sum $end
$upscope $end
$scope module total $end
$var wire 3 YC a [2:0] $end
$var wire 3 ZC b [2:0] $end
$var wire 1 [C gnd $end
$var wire 3 \C sum [2:0] $end
$var wire 1 ]C carry1 $end
$var wire 1 ^C carry0 $end
$var wire 1 _C Cout $end
$scope module adder0 $end
$var wire 1 [C Cin $end
$var wire 1 `C a $end
$var wire 1 aC b $end
$var reg 1 ^C Cout $end
$var reg 1 bC p $end
$var reg 1 cC q $end
$var reg 1 dC sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ^C Cin $end
$var wire 1 eC a $end
$var wire 1 fC b $end
$var reg 1 ]C Cout $end
$var reg 1 gC p $end
$var reg 1 hC q $end
$var reg 1 iC sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 ]C Cin $end
$var wire 1 jC a $end
$var wire 1 kC b $end
$var reg 1 _C Cout $end
$var reg 1 lC p $end
$var reg 1 mC q $end
$var reg 1 nC sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 oC neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 pC state_0 $end
$var wire 4 qC living_neighbors [3:0] $end
$var reg 1 rC state_d $end
$var reg 1 sC state_q $end
$var reg 1 tC stay_alive $end
$scope module living $end
$var wire 1 uC gnd $end
$var wire 8 vC in [7:0] $end
$var wire 3 wC sum1 [2:0] $end
$var wire 3 xC sum0 [2:0] $end
$var wire 4 yC num [3:0] $end
$var wire 2 zC count3 [1:0] $end
$var wire 2 {C count2 [1:0] $end
$var wire 2 |C count1 [1:0] $end
$var wire 2 }C count0 [1:0] $end
$scope module adder0 $end
$var wire 2 ~C a [1:0] $end
$var wire 2 !D b [1:0] $end
$var wire 2 "D sum [1:0] $end
$var wire 1 #D carry0 $end
$var wire 1 $D Cout $end
$scope module adder0 $end
$var wire 1 %D Cin $end
$var wire 1 &D a $end
$var wire 1 'D b $end
$var reg 1 #D Cout $end
$var reg 1 (D p $end
$var reg 1 )D q $end
$var reg 1 *D sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 #D Cin $end
$var wire 1 +D a $end
$var wire 1 ,D b $end
$var reg 1 $D Cout $end
$var reg 1 -D p $end
$var reg 1 .D q $end
$var reg 1 /D sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 0D a [1:0] $end
$var wire 2 1D b [1:0] $end
$var wire 2 2D sum [1:0] $end
$var wire 1 3D carry0 $end
$var wire 1 4D Cout $end
$scope module adder0 $end
$var wire 1 5D Cin $end
$var wire 1 6D a $end
$var wire 1 7D b $end
$var reg 1 3D Cout $end
$var reg 1 8D p $end
$var reg 1 9D q $end
$var reg 1 :D sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 3D Cin $end
$var wire 1 ;D a $end
$var wire 1 <D b $end
$var reg 1 4D Cout $end
$var reg 1 =D p $end
$var reg 1 >D q $end
$var reg 1 ?D sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 uC Cin $end
$var wire 1 @D a $end
$var wire 1 AD b $end
$var reg 1 BD Cout $end
$var reg 1 CD p $end
$var reg 1 DD q $end
$var reg 1 ED sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 uC Cin $end
$var wire 1 FD a $end
$var wire 1 GD b $end
$var reg 1 HD Cout $end
$var reg 1 ID p $end
$var reg 1 JD q $end
$var reg 1 KD sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 uC Cin $end
$var wire 1 LD a $end
$var wire 1 MD b $end
$var reg 1 ND Cout $end
$var reg 1 OD p $end
$var reg 1 PD q $end
$var reg 1 QD sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 uC Cin $end
$var wire 1 RD a $end
$var wire 1 SD b $end
$var reg 1 TD Cout $end
$var reg 1 UD p $end
$var reg 1 VD q $end
$var reg 1 WD sum $end
$upscope $end
$scope module total $end
$var wire 3 XD a [2:0] $end
$var wire 3 YD b [2:0] $end
$var wire 1 ZD gnd $end
$var wire 3 [D sum [2:0] $end
$var wire 1 \D carry1 $end
$var wire 1 ]D carry0 $end
$var wire 1 ^D Cout $end
$scope module adder0 $end
$var wire 1 ZD Cin $end
$var wire 1 _D a $end
$var wire 1 `D b $end
$var reg 1 ]D Cout $end
$var reg 1 aD p $end
$var reg 1 bD q $end
$var reg 1 cD sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ]D Cin $end
$var wire 1 dD a $end
$var wire 1 eD b $end
$var reg 1 \D Cout $end
$var reg 1 fD p $end
$var reg 1 gD q $end
$var reg 1 hD sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 \D Cin $end
$var wire 1 iD a $end
$var wire 1 jD b $end
$var reg 1 ^D Cout $end
$var reg 1 kD p $end
$var reg 1 lD q $end
$var reg 1 mD sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 nD neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 oD state_0 $end
$var wire 4 pD living_neighbors [3:0] $end
$var reg 1 qD state_d $end
$var reg 1 rD state_q $end
$var reg 1 sD stay_alive $end
$scope module living $end
$var wire 1 tD gnd $end
$var wire 8 uD in [7:0] $end
$var wire 3 vD sum1 [2:0] $end
$var wire 3 wD sum0 [2:0] $end
$var wire 4 xD num [3:0] $end
$var wire 2 yD count3 [1:0] $end
$var wire 2 zD count2 [1:0] $end
$var wire 2 {D count1 [1:0] $end
$var wire 2 |D count0 [1:0] $end
$scope module adder0 $end
$var wire 2 }D a [1:0] $end
$var wire 2 ~D b [1:0] $end
$var wire 2 !E sum [1:0] $end
$var wire 1 "E carry0 $end
$var wire 1 #E Cout $end
$scope module adder0 $end
$var wire 1 $E Cin $end
$var wire 1 %E a $end
$var wire 1 &E b $end
$var reg 1 "E Cout $end
$var reg 1 'E p $end
$var reg 1 (E q $end
$var reg 1 )E sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 "E Cin $end
$var wire 1 *E a $end
$var wire 1 +E b $end
$var reg 1 #E Cout $end
$var reg 1 ,E p $end
$var reg 1 -E q $end
$var reg 1 .E sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 /E a [1:0] $end
$var wire 2 0E b [1:0] $end
$var wire 2 1E sum [1:0] $end
$var wire 1 2E carry0 $end
$var wire 1 3E Cout $end
$scope module adder0 $end
$var wire 1 4E Cin $end
$var wire 1 5E a $end
$var wire 1 6E b $end
$var reg 1 2E Cout $end
$var reg 1 7E p $end
$var reg 1 8E q $end
$var reg 1 9E sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 2E Cin $end
$var wire 1 :E a $end
$var wire 1 ;E b $end
$var reg 1 3E Cout $end
$var reg 1 <E p $end
$var reg 1 =E q $end
$var reg 1 >E sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 tD Cin $end
$var wire 1 ?E a $end
$var wire 1 @E b $end
$var reg 1 AE Cout $end
$var reg 1 BE p $end
$var reg 1 CE q $end
$var reg 1 DE sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 tD Cin $end
$var wire 1 EE a $end
$var wire 1 FE b $end
$var reg 1 GE Cout $end
$var reg 1 HE p $end
$var reg 1 IE q $end
$var reg 1 JE sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 tD Cin $end
$var wire 1 KE a $end
$var wire 1 LE b $end
$var reg 1 ME Cout $end
$var reg 1 NE p $end
$var reg 1 OE q $end
$var reg 1 PE sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 tD Cin $end
$var wire 1 QE a $end
$var wire 1 RE b $end
$var reg 1 SE Cout $end
$var reg 1 TE p $end
$var reg 1 UE q $end
$var reg 1 VE sum $end
$upscope $end
$scope module total $end
$var wire 3 WE a [2:0] $end
$var wire 3 XE b [2:0] $end
$var wire 1 YE gnd $end
$var wire 3 ZE sum [2:0] $end
$var wire 1 [E carry1 $end
$var wire 1 \E carry0 $end
$var wire 1 ]E Cout $end
$scope module adder0 $end
$var wire 1 YE Cin $end
$var wire 1 ^E a $end
$var wire 1 _E b $end
$var reg 1 \E Cout $end
$var reg 1 `E p $end
$var reg 1 aE q $end
$var reg 1 bE sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 \E Cin $end
$var wire 1 cE a $end
$var wire 1 dE b $end
$var reg 1 [E Cout $end
$var reg 1 eE p $end
$var reg 1 fE q $end
$var reg 1 gE sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 [E Cin $end
$var wire 1 hE a $end
$var wire 1 iE b $end
$var reg 1 ]E Cout $end
$var reg 1 jE p $end
$var reg 1 kE q $end
$var reg 1 lE sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 mE neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 nE state_0 $end
$var wire 4 oE living_neighbors [3:0] $end
$var reg 1 pE state_d $end
$var reg 1 qE state_q $end
$var reg 1 rE stay_alive $end
$scope module living $end
$var wire 1 sE gnd $end
$var wire 8 tE in [7:0] $end
$var wire 3 uE sum1 [2:0] $end
$var wire 3 vE sum0 [2:0] $end
$var wire 4 wE num [3:0] $end
$var wire 2 xE count3 [1:0] $end
$var wire 2 yE count2 [1:0] $end
$var wire 2 zE count1 [1:0] $end
$var wire 2 {E count0 [1:0] $end
$scope module adder0 $end
$var wire 2 |E a [1:0] $end
$var wire 2 }E b [1:0] $end
$var wire 2 ~E sum [1:0] $end
$var wire 1 !F carry0 $end
$var wire 1 "F Cout $end
$scope module adder0 $end
$var wire 1 #F Cin $end
$var wire 1 $F a $end
$var wire 1 %F b $end
$var reg 1 !F Cout $end
$var reg 1 &F p $end
$var reg 1 'F q $end
$var reg 1 (F sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 !F Cin $end
$var wire 1 )F a $end
$var wire 1 *F b $end
$var reg 1 "F Cout $end
$var reg 1 +F p $end
$var reg 1 ,F q $end
$var reg 1 -F sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 .F a [1:0] $end
$var wire 2 /F b [1:0] $end
$var wire 2 0F sum [1:0] $end
$var wire 1 1F carry0 $end
$var wire 1 2F Cout $end
$scope module adder0 $end
$var wire 1 3F Cin $end
$var wire 1 4F a $end
$var wire 1 5F b $end
$var reg 1 1F Cout $end
$var reg 1 6F p $end
$var reg 1 7F q $end
$var reg 1 8F sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 1F Cin $end
$var wire 1 9F a $end
$var wire 1 :F b $end
$var reg 1 2F Cout $end
$var reg 1 ;F p $end
$var reg 1 <F q $end
$var reg 1 =F sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 sE Cin $end
$var wire 1 >F a $end
$var wire 1 ?F b $end
$var reg 1 @F Cout $end
$var reg 1 AF p $end
$var reg 1 BF q $end
$var reg 1 CF sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 sE Cin $end
$var wire 1 DF a $end
$var wire 1 EF b $end
$var reg 1 FF Cout $end
$var reg 1 GF p $end
$var reg 1 HF q $end
$var reg 1 IF sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 sE Cin $end
$var wire 1 JF a $end
$var wire 1 KF b $end
$var reg 1 LF Cout $end
$var reg 1 MF p $end
$var reg 1 NF q $end
$var reg 1 OF sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 sE Cin $end
$var wire 1 PF a $end
$var wire 1 QF b $end
$var reg 1 RF Cout $end
$var reg 1 SF p $end
$var reg 1 TF q $end
$var reg 1 UF sum $end
$upscope $end
$scope module total $end
$var wire 3 VF a [2:0] $end
$var wire 3 WF b [2:0] $end
$var wire 1 XF gnd $end
$var wire 3 YF sum [2:0] $end
$var wire 1 ZF carry1 $end
$var wire 1 [F carry0 $end
$var wire 1 \F Cout $end
$scope module adder0 $end
$var wire 1 XF Cin $end
$var wire 1 ]F a $end
$var wire 1 ^F b $end
$var reg 1 [F Cout $end
$var reg 1 _F p $end
$var reg 1 `F q $end
$var reg 1 aF sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 [F Cin $end
$var wire 1 bF a $end
$var wire 1 cF b $end
$var reg 1 ZF Cout $end
$var reg 1 dF p $end
$var reg 1 eF q $end
$var reg 1 fF sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 ZF Cin $end
$var wire 1 gF a $end
$var wire 1 hF b $end
$var reg 1 \F Cout $end
$var reg 1 iF p $end
$var reg 1 jF q $end
$var reg 1 kF sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 lF neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 mF state_0 $end
$var wire 4 nF living_neighbors [3:0] $end
$var reg 1 oF state_d $end
$var reg 1 pF state_q $end
$var reg 1 qF stay_alive $end
$scope module living $end
$var wire 1 rF gnd $end
$var wire 8 sF in [7:0] $end
$var wire 3 tF sum1 [2:0] $end
$var wire 3 uF sum0 [2:0] $end
$var wire 4 vF num [3:0] $end
$var wire 2 wF count3 [1:0] $end
$var wire 2 xF count2 [1:0] $end
$var wire 2 yF count1 [1:0] $end
$var wire 2 zF count0 [1:0] $end
$scope module adder0 $end
$var wire 2 {F a [1:0] $end
$var wire 2 |F b [1:0] $end
$var wire 2 }F sum [1:0] $end
$var wire 1 ~F carry0 $end
$var wire 1 !G Cout $end
$scope module adder0 $end
$var wire 1 "G Cin $end
$var wire 1 #G a $end
$var wire 1 $G b $end
$var reg 1 ~F Cout $end
$var reg 1 %G p $end
$var reg 1 &G q $end
$var reg 1 'G sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ~F Cin $end
$var wire 1 (G a $end
$var wire 1 )G b $end
$var reg 1 !G Cout $end
$var reg 1 *G p $end
$var reg 1 +G q $end
$var reg 1 ,G sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 -G a [1:0] $end
$var wire 2 .G b [1:0] $end
$var wire 2 /G sum [1:0] $end
$var wire 1 0G carry0 $end
$var wire 1 1G Cout $end
$scope module adder0 $end
$var wire 1 2G Cin $end
$var wire 1 3G a $end
$var wire 1 4G b $end
$var reg 1 0G Cout $end
$var reg 1 5G p $end
$var reg 1 6G q $end
$var reg 1 7G sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 0G Cin $end
$var wire 1 8G a $end
$var wire 1 9G b $end
$var reg 1 1G Cout $end
$var reg 1 :G p $end
$var reg 1 ;G q $end
$var reg 1 <G sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 rF Cin $end
$var wire 1 =G a $end
$var wire 1 >G b $end
$var reg 1 ?G Cout $end
$var reg 1 @G p $end
$var reg 1 AG q $end
$var reg 1 BG sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 rF Cin $end
$var wire 1 CG a $end
$var wire 1 DG b $end
$var reg 1 EG Cout $end
$var reg 1 FG p $end
$var reg 1 GG q $end
$var reg 1 HG sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 rF Cin $end
$var wire 1 IG a $end
$var wire 1 JG b $end
$var reg 1 KG Cout $end
$var reg 1 LG p $end
$var reg 1 MG q $end
$var reg 1 NG sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 rF Cin $end
$var wire 1 OG a $end
$var wire 1 PG b $end
$var reg 1 QG Cout $end
$var reg 1 RG p $end
$var reg 1 SG q $end
$var reg 1 TG sum $end
$upscope $end
$scope module total $end
$var wire 3 UG a [2:0] $end
$var wire 3 VG b [2:0] $end
$var wire 1 WG gnd $end
$var wire 3 XG sum [2:0] $end
$var wire 1 YG carry1 $end
$var wire 1 ZG carry0 $end
$var wire 1 [G Cout $end
$scope module adder0 $end
$var wire 1 WG Cin $end
$var wire 1 \G a $end
$var wire 1 ]G b $end
$var reg 1 ZG Cout $end
$var reg 1 ^G p $end
$var reg 1 _G q $end
$var reg 1 `G sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ZG Cin $end
$var wire 1 aG a $end
$var wire 1 bG b $end
$var reg 1 YG Cout $end
$var reg 1 cG p $end
$var reg 1 dG q $end
$var reg 1 eG sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 YG Cin $end
$var wire 1 fG a $end
$var wire 1 gG b $end
$var reg 1 [G Cout $end
$var reg 1 hG p $end
$var reg 1 iG q $end
$var reg 1 jG sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 kG neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 lG state_0 $end
$var wire 4 mG living_neighbors [3:0] $end
$var reg 1 nG state_d $end
$var reg 1 oG state_q $end
$var reg 1 pG stay_alive $end
$scope module living $end
$var wire 1 qG gnd $end
$var wire 8 rG in [7:0] $end
$var wire 3 sG sum1 [2:0] $end
$var wire 3 tG sum0 [2:0] $end
$var wire 4 uG num [3:0] $end
$var wire 2 vG count3 [1:0] $end
$var wire 2 wG count2 [1:0] $end
$var wire 2 xG count1 [1:0] $end
$var wire 2 yG count0 [1:0] $end
$scope module adder0 $end
$var wire 2 zG a [1:0] $end
$var wire 2 {G b [1:0] $end
$var wire 2 |G sum [1:0] $end
$var wire 1 }G carry0 $end
$var wire 1 ~G Cout $end
$scope module adder0 $end
$var wire 1 !H Cin $end
$var wire 1 "H a $end
$var wire 1 #H b $end
$var reg 1 }G Cout $end
$var reg 1 $H p $end
$var reg 1 %H q $end
$var reg 1 &H sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 }G Cin $end
$var wire 1 'H a $end
$var wire 1 (H b $end
$var reg 1 ~G Cout $end
$var reg 1 )H p $end
$var reg 1 *H q $end
$var reg 1 +H sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 ,H a [1:0] $end
$var wire 2 -H b [1:0] $end
$var wire 2 .H sum [1:0] $end
$var wire 1 /H carry0 $end
$var wire 1 0H Cout $end
$scope module adder0 $end
$var wire 1 1H Cin $end
$var wire 1 2H a $end
$var wire 1 3H b $end
$var reg 1 /H Cout $end
$var reg 1 4H p $end
$var reg 1 5H q $end
$var reg 1 6H sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 /H Cin $end
$var wire 1 7H a $end
$var wire 1 8H b $end
$var reg 1 0H Cout $end
$var reg 1 9H p $end
$var reg 1 :H q $end
$var reg 1 ;H sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 qG Cin $end
$var wire 1 <H a $end
$var wire 1 =H b $end
$var reg 1 >H Cout $end
$var reg 1 ?H p $end
$var reg 1 @H q $end
$var reg 1 AH sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 qG Cin $end
$var wire 1 BH a $end
$var wire 1 CH b $end
$var reg 1 DH Cout $end
$var reg 1 EH p $end
$var reg 1 FH q $end
$var reg 1 GH sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 qG Cin $end
$var wire 1 HH a $end
$var wire 1 IH b $end
$var reg 1 JH Cout $end
$var reg 1 KH p $end
$var reg 1 LH q $end
$var reg 1 MH sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 qG Cin $end
$var wire 1 NH a $end
$var wire 1 OH b $end
$var reg 1 PH Cout $end
$var reg 1 QH p $end
$var reg 1 RH q $end
$var reg 1 SH sum $end
$upscope $end
$scope module total $end
$var wire 3 TH a [2:0] $end
$var wire 3 UH b [2:0] $end
$var wire 1 VH gnd $end
$var wire 3 WH sum [2:0] $end
$var wire 1 XH carry1 $end
$var wire 1 YH carry0 $end
$var wire 1 ZH Cout $end
$scope module adder0 $end
$var wire 1 VH Cin $end
$var wire 1 [H a $end
$var wire 1 \H b $end
$var reg 1 YH Cout $end
$var reg 1 ]H p $end
$var reg 1 ^H q $end
$var reg 1 _H sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 YH Cin $end
$var wire 1 `H a $end
$var wire 1 aH b $end
$var reg 1 XH Cout $end
$var reg 1 bH p $end
$var reg 1 cH q $end
$var reg 1 dH sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 XH Cin $end
$var wire 1 eH a $end
$var wire 1 fH b $end
$var reg 1 ZH Cout $end
$var reg 1 gH p $end
$var reg 1 hH q $end
$var reg 1 iH sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[6] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 jH neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 kH state_0 $end
$var wire 4 lH living_neighbors [3:0] $end
$var reg 1 mH state_d $end
$var reg 1 nH state_q $end
$var reg 1 oH stay_alive $end
$scope module living $end
$var wire 1 pH gnd $end
$var wire 8 qH in [7:0] $end
$var wire 3 rH sum1 [2:0] $end
$var wire 3 sH sum0 [2:0] $end
$var wire 4 tH num [3:0] $end
$var wire 2 uH count3 [1:0] $end
$var wire 2 vH count2 [1:0] $end
$var wire 2 wH count1 [1:0] $end
$var wire 2 xH count0 [1:0] $end
$scope module adder0 $end
$var wire 2 yH a [1:0] $end
$var wire 2 zH b [1:0] $end
$var wire 2 {H sum [1:0] $end
$var wire 1 |H carry0 $end
$var wire 1 }H Cout $end
$scope module adder0 $end
$var wire 1 ~H Cin $end
$var wire 1 !I a $end
$var wire 1 "I b $end
$var reg 1 |H Cout $end
$var reg 1 #I p $end
$var reg 1 $I q $end
$var reg 1 %I sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 |H Cin $end
$var wire 1 &I a $end
$var wire 1 'I b $end
$var reg 1 }H Cout $end
$var reg 1 (I p $end
$var reg 1 )I q $end
$var reg 1 *I sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 +I a [1:0] $end
$var wire 2 ,I b [1:0] $end
$var wire 2 -I sum [1:0] $end
$var wire 1 .I carry0 $end
$var wire 1 /I Cout $end
$scope module adder0 $end
$var wire 1 0I Cin $end
$var wire 1 1I a $end
$var wire 1 2I b $end
$var reg 1 .I Cout $end
$var reg 1 3I p $end
$var reg 1 4I q $end
$var reg 1 5I sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 .I Cin $end
$var wire 1 6I a $end
$var wire 1 7I b $end
$var reg 1 /I Cout $end
$var reg 1 8I p $end
$var reg 1 9I q $end
$var reg 1 :I sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 pH Cin $end
$var wire 1 ;I a $end
$var wire 1 <I b $end
$var reg 1 =I Cout $end
$var reg 1 >I p $end
$var reg 1 ?I q $end
$var reg 1 @I sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 pH Cin $end
$var wire 1 AI a $end
$var wire 1 BI b $end
$var reg 1 CI Cout $end
$var reg 1 DI p $end
$var reg 1 EI q $end
$var reg 1 FI sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 pH Cin $end
$var wire 1 GI a $end
$var wire 1 HI b $end
$var reg 1 II Cout $end
$var reg 1 JI p $end
$var reg 1 KI q $end
$var reg 1 LI sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 pH Cin $end
$var wire 1 MI a $end
$var wire 1 NI b $end
$var reg 1 OI Cout $end
$var reg 1 PI p $end
$var reg 1 QI q $end
$var reg 1 RI sum $end
$upscope $end
$scope module total $end
$var wire 3 SI a [2:0] $end
$var wire 3 TI b [2:0] $end
$var wire 1 UI gnd $end
$var wire 3 VI sum [2:0] $end
$var wire 1 WI carry1 $end
$var wire 1 XI carry0 $end
$var wire 1 YI Cout $end
$scope module adder0 $end
$var wire 1 UI Cin $end
$var wire 1 ZI a $end
$var wire 1 [I b $end
$var reg 1 XI Cout $end
$var reg 1 \I p $end
$var reg 1 ]I q $end
$var reg 1 ^I sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 XI Cin $end
$var wire 1 _I a $end
$var wire 1 `I b $end
$var reg 1 WI Cout $end
$var reg 1 aI p $end
$var reg 1 bI q $end
$var reg 1 cI sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 WI Cin $end
$var wire 1 dI a $end
$var wire 1 eI b $end
$var reg 1 YI Cout $end
$var reg 1 fI p $end
$var reg 1 gI q $end
$var reg 1 hI sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 iI neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 jI state_0 $end
$var wire 4 kI living_neighbors [3:0] $end
$var reg 1 lI state_d $end
$var reg 1 mI state_q $end
$var reg 1 nI stay_alive $end
$scope module living $end
$var wire 1 oI gnd $end
$var wire 8 pI in [7:0] $end
$var wire 3 qI sum1 [2:0] $end
$var wire 3 rI sum0 [2:0] $end
$var wire 4 sI num [3:0] $end
$var wire 2 tI count3 [1:0] $end
$var wire 2 uI count2 [1:0] $end
$var wire 2 vI count1 [1:0] $end
$var wire 2 wI count0 [1:0] $end
$scope module adder0 $end
$var wire 2 xI a [1:0] $end
$var wire 2 yI b [1:0] $end
$var wire 2 zI sum [1:0] $end
$var wire 1 {I carry0 $end
$var wire 1 |I Cout $end
$scope module adder0 $end
$var wire 1 }I Cin $end
$var wire 1 ~I a $end
$var wire 1 !J b $end
$var reg 1 {I Cout $end
$var reg 1 "J p $end
$var reg 1 #J q $end
$var reg 1 $J sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 {I Cin $end
$var wire 1 %J a $end
$var wire 1 &J b $end
$var reg 1 |I Cout $end
$var reg 1 'J p $end
$var reg 1 (J q $end
$var reg 1 )J sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 *J a [1:0] $end
$var wire 2 +J b [1:0] $end
$var wire 2 ,J sum [1:0] $end
$var wire 1 -J carry0 $end
$var wire 1 .J Cout $end
$scope module adder0 $end
$var wire 1 /J Cin $end
$var wire 1 0J a $end
$var wire 1 1J b $end
$var reg 1 -J Cout $end
$var reg 1 2J p $end
$var reg 1 3J q $end
$var reg 1 4J sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 -J Cin $end
$var wire 1 5J a $end
$var wire 1 6J b $end
$var reg 1 .J Cout $end
$var reg 1 7J p $end
$var reg 1 8J q $end
$var reg 1 9J sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 oI Cin $end
$var wire 1 :J a $end
$var wire 1 ;J b $end
$var reg 1 <J Cout $end
$var reg 1 =J p $end
$var reg 1 >J q $end
$var reg 1 ?J sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 oI Cin $end
$var wire 1 @J a $end
$var wire 1 AJ b $end
$var reg 1 BJ Cout $end
$var reg 1 CJ p $end
$var reg 1 DJ q $end
$var reg 1 EJ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 oI Cin $end
$var wire 1 FJ a $end
$var wire 1 GJ b $end
$var reg 1 HJ Cout $end
$var reg 1 IJ p $end
$var reg 1 JJ q $end
$var reg 1 KJ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 oI Cin $end
$var wire 1 LJ a $end
$var wire 1 MJ b $end
$var reg 1 NJ Cout $end
$var reg 1 OJ p $end
$var reg 1 PJ q $end
$var reg 1 QJ sum $end
$upscope $end
$scope module total $end
$var wire 3 RJ a [2:0] $end
$var wire 3 SJ b [2:0] $end
$var wire 1 TJ gnd $end
$var wire 3 UJ sum [2:0] $end
$var wire 1 VJ carry1 $end
$var wire 1 WJ carry0 $end
$var wire 1 XJ Cout $end
$scope module adder0 $end
$var wire 1 TJ Cin $end
$var wire 1 YJ a $end
$var wire 1 ZJ b $end
$var reg 1 WJ Cout $end
$var reg 1 [J p $end
$var reg 1 \J q $end
$var reg 1 ]J sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 WJ Cin $end
$var wire 1 ^J a $end
$var wire 1 _J b $end
$var reg 1 VJ Cout $end
$var reg 1 `J p $end
$var reg 1 aJ q $end
$var reg 1 bJ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 VJ Cin $end
$var wire 1 cJ a $end
$var wire 1 dJ b $end
$var reg 1 XJ Cout $end
$var reg 1 eJ p $end
$var reg 1 fJ q $end
$var reg 1 gJ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 hJ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 iJ state_0 $end
$var wire 4 jJ living_neighbors [3:0] $end
$var reg 1 kJ state_d $end
$var reg 1 lJ state_q $end
$var reg 1 mJ stay_alive $end
$scope module living $end
$var wire 1 nJ gnd $end
$var wire 8 oJ in [7:0] $end
$var wire 3 pJ sum1 [2:0] $end
$var wire 3 qJ sum0 [2:0] $end
$var wire 4 rJ num [3:0] $end
$var wire 2 sJ count3 [1:0] $end
$var wire 2 tJ count2 [1:0] $end
$var wire 2 uJ count1 [1:0] $end
$var wire 2 vJ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 wJ a [1:0] $end
$var wire 2 xJ b [1:0] $end
$var wire 2 yJ sum [1:0] $end
$var wire 1 zJ carry0 $end
$var wire 1 {J Cout $end
$scope module adder0 $end
$var wire 1 |J Cin $end
$var wire 1 }J a $end
$var wire 1 ~J b $end
$var reg 1 zJ Cout $end
$var reg 1 !K p $end
$var reg 1 "K q $end
$var reg 1 #K sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 zJ Cin $end
$var wire 1 $K a $end
$var wire 1 %K b $end
$var reg 1 {J Cout $end
$var reg 1 &K p $end
$var reg 1 'K q $end
$var reg 1 (K sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 )K a [1:0] $end
$var wire 2 *K b [1:0] $end
$var wire 2 +K sum [1:0] $end
$var wire 1 ,K carry0 $end
$var wire 1 -K Cout $end
$scope module adder0 $end
$var wire 1 .K Cin $end
$var wire 1 /K a $end
$var wire 1 0K b $end
$var reg 1 ,K Cout $end
$var reg 1 1K p $end
$var reg 1 2K q $end
$var reg 1 3K sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ,K Cin $end
$var wire 1 4K a $end
$var wire 1 5K b $end
$var reg 1 -K Cout $end
$var reg 1 6K p $end
$var reg 1 7K q $end
$var reg 1 8K sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 nJ Cin $end
$var wire 1 9K a $end
$var wire 1 :K b $end
$var reg 1 ;K Cout $end
$var reg 1 <K p $end
$var reg 1 =K q $end
$var reg 1 >K sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 nJ Cin $end
$var wire 1 ?K a $end
$var wire 1 @K b $end
$var reg 1 AK Cout $end
$var reg 1 BK p $end
$var reg 1 CK q $end
$var reg 1 DK sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 nJ Cin $end
$var wire 1 EK a $end
$var wire 1 FK b $end
$var reg 1 GK Cout $end
$var reg 1 HK p $end
$var reg 1 IK q $end
$var reg 1 JK sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 nJ Cin $end
$var wire 1 KK a $end
$var wire 1 LK b $end
$var reg 1 MK Cout $end
$var reg 1 NK p $end
$var reg 1 OK q $end
$var reg 1 PK sum $end
$upscope $end
$scope module total $end
$var wire 3 QK a [2:0] $end
$var wire 3 RK b [2:0] $end
$var wire 1 SK gnd $end
$var wire 3 TK sum [2:0] $end
$var wire 1 UK carry1 $end
$var wire 1 VK carry0 $end
$var wire 1 WK Cout $end
$scope module adder0 $end
$var wire 1 SK Cin $end
$var wire 1 XK a $end
$var wire 1 YK b $end
$var reg 1 VK Cout $end
$var reg 1 ZK p $end
$var reg 1 [K q $end
$var reg 1 \K sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 VK Cin $end
$var wire 1 ]K a $end
$var wire 1 ^K b $end
$var reg 1 UK Cout $end
$var reg 1 _K p $end
$var reg 1 `K q $end
$var reg 1 aK sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 UK Cin $end
$var wire 1 bK a $end
$var wire 1 cK b $end
$var reg 1 WK Cout $end
$var reg 1 dK p $end
$var reg 1 eK q $end
$var reg 1 fK sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 gK neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 hK state_0 $end
$var wire 4 iK living_neighbors [3:0] $end
$var reg 1 jK state_d $end
$var reg 1 kK state_q $end
$var reg 1 lK stay_alive $end
$scope module living $end
$var wire 1 mK gnd $end
$var wire 8 nK in [7:0] $end
$var wire 3 oK sum1 [2:0] $end
$var wire 3 pK sum0 [2:0] $end
$var wire 4 qK num [3:0] $end
$var wire 2 rK count3 [1:0] $end
$var wire 2 sK count2 [1:0] $end
$var wire 2 tK count1 [1:0] $end
$var wire 2 uK count0 [1:0] $end
$scope module adder0 $end
$var wire 2 vK a [1:0] $end
$var wire 2 wK b [1:0] $end
$var wire 2 xK sum [1:0] $end
$var wire 1 yK carry0 $end
$var wire 1 zK Cout $end
$scope module adder0 $end
$var wire 1 {K Cin $end
$var wire 1 |K a $end
$var wire 1 }K b $end
$var reg 1 yK Cout $end
$var reg 1 ~K p $end
$var reg 1 !L q $end
$var reg 1 "L sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 yK Cin $end
$var wire 1 #L a $end
$var wire 1 $L b $end
$var reg 1 zK Cout $end
$var reg 1 %L p $end
$var reg 1 &L q $end
$var reg 1 'L sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 (L a [1:0] $end
$var wire 2 )L b [1:0] $end
$var wire 2 *L sum [1:0] $end
$var wire 1 +L carry0 $end
$var wire 1 ,L Cout $end
$scope module adder0 $end
$var wire 1 -L Cin $end
$var wire 1 .L a $end
$var wire 1 /L b $end
$var reg 1 +L Cout $end
$var reg 1 0L p $end
$var reg 1 1L q $end
$var reg 1 2L sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 +L Cin $end
$var wire 1 3L a $end
$var wire 1 4L b $end
$var reg 1 ,L Cout $end
$var reg 1 5L p $end
$var reg 1 6L q $end
$var reg 1 7L sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 mK Cin $end
$var wire 1 8L a $end
$var wire 1 9L b $end
$var reg 1 :L Cout $end
$var reg 1 ;L p $end
$var reg 1 <L q $end
$var reg 1 =L sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 mK Cin $end
$var wire 1 >L a $end
$var wire 1 ?L b $end
$var reg 1 @L Cout $end
$var reg 1 AL p $end
$var reg 1 BL q $end
$var reg 1 CL sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 mK Cin $end
$var wire 1 DL a $end
$var wire 1 EL b $end
$var reg 1 FL Cout $end
$var reg 1 GL p $end
$var reg 1 HL q $end
$var reg 1 IL sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 mK Cin $end
$var wire 1 JL a $end
$var wire 1 KL b $end
$var reg 1 LL Cout $end
$var reg 1 ML p $end
$var reg 1 NL q $end
$var reg 1 OL sum $end
$upscope $end
$scope module total $end
$var wire 3 PL a [2:0] $end
$var wire 3 QL b [2:0] $end
$var wire 1 RL gnd $end
$var wire 3 SL sum [2:0] $end
$var wire 1 TL carry1 $end
$var wire 1 UL carry0 $end
$var wire 1 VL Cout $end
$scope module adder0 $end
$var wire 1 RL Cin $end
$var wire 1 WL a $end
$var wire 1 XL b $end
$var reg 1 UL Cout $end
$var reg 1 YL p $end
$var reg 1 ZL q $end
$var reg 1 [L sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 UL Cin $end
$var wire 1 \L a $end
$var wire 1 ]L b $end
$var reg 1 TL Cout $end
$var reg 1 ^L p $end
$var reg 1 _L q $end
$var reg 1 `L sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 TL Cin $end
$var wire 1 aL a $end
$var wire 1 bL b $end
$var reg 1 VL Cout $end
$var reg 1 cL p $end
$var reg 1 dL q $end
$var reg 1 eL sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 fL neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 gL state_0 $end
$var wire 4 hL living_neighbors [3:0] $end
$var reg 1 iL state_d $end
$var reg 1 jL state_q $end
$var reg 1 kL stay_alive $end
$scope module living $end
$var wire 1 lL gnd $end
$var wire 8 mL in [7:0] $end
$var wire 3 nL sum1 [2:0] $end
$var wire 3 oL sum0 [2:0] $end
$var wire 4 pL num [3:0] $end
$var wire 2 qL count3 [1:0] $end
$var wire 2 rL count2 [1:0] $end
$var wire 2 sL count1 [1:0] $end
$var wire 2 tL count0 [1:0] $end
$scope module adder0 $end
$var wire 2 uL a [1:0] $end
$var wire 2 vL b [1:0] $end
$var wire 2 wL sum [1:0] $end
$var wire 1 xL carry0 $end
$var wire 1 yL Cout $end
$scope module adder0 $end
$var wire 1 zL Cin $end
$var wire 1 {L a $end
$var wire 1 |L b $end
$var reg 1 xL Cout $end
$var reg 1 }L p $end
$var reg 1 ~L q $end
$var reg 1 !M sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 xL Cin $end
$var wire 1 "M a $end
$var wire 1 #M b $end
$var reg 1 yL Cout $end
$var reg 1 $M p $end
$var reg 1 %M q $end
$var reg 1 &M sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 'M a [1:0] $end
$var wire 2 (M b [1:0] $end
$var wire 2 )M sum [1:0] $end
$var wire 1 *M carry0 $end
$var wire 1 +M Cout $end
$scope module adder0 $end
$var wire 1 ,M Cin $end
$var wire 1 -M a $end
$var wire 1 .M b $end
$var reg 1 *M Cout $end
$var reg 1 /M p $end
$var reg 1 0M q $end
$var reg 1 1M sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 *M Cin $end
$var wire 1 2M a $end
$var wire 1 3M b $end
$var reg 1 +M Cout $end
$var reg 1 4M p $end
$var reg 1 5M q $end
$var reg 1 6M sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 lL Cin $end
$var wire 1 7M a $end
$var wire 1 8M b $end
$var reg 1 9M Cout $end
$var reg 1 :M p $end
$var reg 1 ;M q $end
$var reg 1 <M sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 lL Cin $end
$var wire 1 =M a $end
$var wire 1 >M b $end
$var reg 1 ?M Cout $end
$var reg 1 @M p $end
$var reg 1 AM q $end
$var reg 1 BM sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 lL Cin $end
$var wire 1 CM a $end
$var wire 1 DM b $end
$var reg 1 EM Cout $end
$var reg 1 FM p $end
$var reg 1 GM q $end
$var reg 1 HM sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 lL Cin $end
$var wire 1 IM a $end
$var wire 1 JM b $end
$var reg 1 KM Cout $end
$var reg 1 LM p $end
$var reg 1 MM q $end
$var reg 1 NM sum $end
$upscope $end
$scope module total $end
$var wire 3 OM a [2:0] $end
$var wire 3 PM b [2:0] $end
$var wire 1 QM gnd $end
$var wire 3 RM sum [2:0] $end
$var wire 1 SM carry1 $end
$var wire 1 TM carry0 $end
$var wire 1 UM Cout $end
$scope module adder0 $end
$var wire 1 QM Cin $end
$var wire 1 VM a $end
$var wire 1 WM b $end
$var reg 1 TM Cout $end
$var reg 1 XM p $end
$var reg 1 YM q $end
$var reg 1 ZM sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 TM Cin $end
$var wire 1 [M a $end
$var wire 1 \M b $end
$var reg 1 SM Cout $end
$var reg 1 ]M p $end
$var reg 1 ^M q $end
$var reg 1 _M sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 SM Cin $end
$var wire 1 `M a $end
$var wire 1 aM b $end
$var reg 1 UM Cout $end
$var reg 1 bM p $end
$var reg 1 cM q $end
$var reg 1 dM sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 eM neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 fM state_0 $end
$var wire 4 gM living_neighbors [3:0] $end
$var reg 1 hM state_d $end
$var reg 1 iM state_q $end
$var reg 1 jM stay_alive $end
$scope module living $end
$var wire 1 kM gnd $end
$var wire 8 lM in [7:0] $end
$var wire 3 mM sum1 [2:0] $end
$var wire 3 nM sum0 [2:0] $end
$var wire 4 oM num [3:0] $end
$var wire 2 pM count3 [1:0] $end
$var wire 2 qM count2 [1:0] $end
$var wire 2 rM count1 [1:0] $end
$var wire 2 sM count0 [1:0] $end
$scope module adder0 $end
$var wire 2 tM a [1:0] $end
$var wire 2 uM b [1:0] $end
$var wire 2 vM sum [1:0] $end
$var wire 1 wM carry0 $end
$var wire 1 xM Cout $end
$scope module adder0 $end
$var wire 1 yM Cin $end
$var wire 1 zM a $end
$var wire 1 {M b $end
$var reg 1 wM Cout $end
$var reg 1 |M p $end
$var reg 1 }M q $end
$var reg 1 ~M sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 wM Cin $end
$var wire 1 !N a $end
$var wire 1 "N b $end
$var reg 1 xM Cout $end
$var reg 1 #N p $end
$var reg 1 $N q $end
$var reg 1 %N sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 &N a [1:0] $end
$var wire 2 'N b [1:0] $end
$var wire 2 (N sum [1:0] $end
$var wire 1 )N carry0 $end
$var wire 1 *N Cout $end
$scope module adder0 $end
$var wire 1 +N Cin $end
$var wire 1 ,N a $end
$var wire 1 -N b $end
$var reg 1 )N Cout $end
$var reg 1 .N p $end
$var reg 1 /N q $end
$var reg 1 0N sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 )N Cin $end
$var wire 1 1N a $end
$var wire 1 2N b $end
$var reg 1 *N Cout $end
$var reg 1 3N p $end
$var reg 1 4N q $end
$var reg 1 5N sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 kM Cin $end
$var wire 1 6N a $end
$var wire 1 7N b $end
$var reg 1 8N Cout $end
$var reg 1 9N p $end
$var reg 1 :N q $end
$var reg 1 ;N sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 kM Cin $end
$var wire 1 <N a $end
$var wire 1 =N b $end
$var reg 1 >N Cout $end
$var reg 1 ?N p $end
$var reg 1 @N q $end
$var reg 1 AN sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 kM Cin $end
$var wire 1 BN a $end
$var wire 1 CN b $end
$var reg 1 DN Cout $end
$var reg 1 EN p $end
$var reg 1 FN q $end
$var reg 1 GN sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 kM Cin $end
$var wire 1 HN a $end
$var wire 1 IN b $end
$var reg 1 JN Cout $end
$var reg 1 KN p $end
$var reg 1 LN q $end
$var reg 1 MN sum $end
$upscope $end
$scope module total $end
$var wire 3 NN a [2:0] $end
$var wire 3 ON b [2:0] $end
$var wire 1 PN gnd $end
$var wire 3 QN sum [2:0] $end
$var wire 1 RN carry1 $end
$var wire 1 SN carry0 $end
$var wire 1 TN Cout $end
$scope module adder0 $end
$var wire 1 PN Cin $end
$var wire 1 UN a $end
$var wire 1 VN b $end
$var reg 1 SN Cout $end
$var reg 1 WN p $end
$var reg 1 XN q $end
$var reg 1 YN sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 SN Cin $end
$var wire 1 ZN a $end
$var wire 1 [N b $end
$var reg 1 RN Cout $end
$var reg 1 \N p $end
$var reg 1 ]N q $end
$var reg 1 ^N sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 RN Cin $end
$var wire 1 _N a $end
$var wire 1 `N b $end
$var reg 1 TN Cout $end
$var reg 1 aN p $end
$var reg 1 bN q $end
$var reg 1 cN sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 dN neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 eN state_0 $end
$var wire 4 fN living_neighbors [3:0] $end
$var reg 1 gN state_d $end
$var reg 1 hN state_q $end
$var reg 1 iN stay_alive $end
$scope module living $end
$var wire 1 jN gnd $end
$var wire 8 kN in [7:0] $end
$var wire 3 lN sum1 [2:0] $end
$var wire 3 mN sum0 [2:0] $end
$var wire 4 nN num [3:0] $end
$var wire 2 oN count3 [1:0] $end
$var wire 2 pN count2 [1:0] $end
$var wire 2 qN count1 [1:0] $end
$var wire 2 rN count0 [1:0] $end
$scope module adder0 $end
$var wire 2 sN a [1:0] $end
$var wire 2 tN b [1:0] $end
$var wire 2 uN sum [1:0] $end
$var wire 1 vN carry0 $end
$var wire 1 wN Cout $end
$scope module adder0 $end
$var wire 1 xN Cin $end
$var wire 1 yN a $end
$var wire 1 zN b $end
$var reg 1 vN Cout $end
$var reg 1 {N p $end
$var reg 1 |N q $end
$var reg 1 }N sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 vN Cin $end
$var wire 1 ~N a $end
$var wire 1 !O b $end
$var reg 1 wN Cout $end
$var reg 1 "O p $end
$var reg 1 #O q $end
$var reg 1 $O sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 %O a [1:0] $end
$var wire 2 &O b [1:0] $end
$var wire 2 'O sum [1:0] $end
$var wire 1 (O carry0 $end
$var wire 1 )O Cout $end
$scope module adder0 $end
$var wire 1 *O Cin $end
$var wire 1 +O a $end
$var wire 1 ,O b $end
$var reg 1 (O Cout $end
$var reg 1 -O p $end
$var reg 1 .O q $end
$var reg 1 /O sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 (O Cin $end
$var wire 1 0O a $end
$var wire 1 1O b $end
$var reg 1 )O Cout $end
$var reg 1 2O p $end
$var reg 1 3O q $end
$var reg 1 4O sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 jN Cin $end
$var wire 1 5O a $end
$var wire 1 6O b $end
$var reg 1 7O Cout $end
$var reg 1 8O p $end
$var reg 1 9O q $end
$var reg 1 :O sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 jN Cin $end
$var wire 1 ;O a $end
$var wire 1 <O b $end
$var reg 1 =O Cout $end
$var reg 1 >O p $end
$var reg 1 ?O q $end
$var reg 1 @O sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 jN Cin $end
$var wire 1 AO a $end
$var wire 1 BO b $end
$var reg 1 CO Cout $end
$var reg 1 DO p $end
$var reg 1 EO q $end
$var reg 1 FO sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 jN Cin $end
$var wire 1 GO a $end
$var wire 1 HO b $end
$var reg 1 IO Cout $end
$var reg 1 JO p $end
$var reg 1 KO q $end
$var reg 1 LO sum $end
$upscope $end
$scope module total $end
$var wire 3 MO a [2:0] $end
$var wire 3 NO b [2:0] $end
$var wire 1 OO gnd $end
$var wire 3 PO sum [2:0] $end
$var wire 1 QO carry1 $end
$var wire 1 RO carry0 $end
$var wire 1 SO Cout $end
$scope module adder0 $end
$var wire 1 OO Cin $end
$var wire 1 TO a $end
$var wire 1 UO b $end
$var reg 1 RO Cout $end
$var reg 1 VO p $end
$var reg 1 WO q $end
$var reg 1 XO sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 RO Cin $end
$var wire 1 YO a $end
$var wire 1 ZO b $end
$var reg 1 QO Cout $end
$var reg 1 [O p $end
$var reg 1 \O q $end
$var reg 1 ]O sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 QO Cin $end
$var wire 1 ^O a $end
$var wire 1 _O b $end
$var reg 1 SO Cout $end
$var reg 1 `O p $end
$var reg 1 aO q $end
$var reg 1 bO sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 cO neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 dO state_0 $end
$var wire 4 eO living_neighbors [3:0] $end
$var reg 1 fO state_d $end
$var reg 1 gO state_q $end
$var reg 1 hO stay_alive $end
$scope module living $end
$var wire 1 iO gnd $end
$var wire 8 jO in [7:0] $end
$var wire 3 kO sum1 [2:0] $end
$var wire 3 lO sum0 [2:0] $end
$var wire 4 mO num [3:0] $end
$var wire 2 nO count3 [1:0] $end
$var wire 2 oO count2 [1:0] $end
$var wire 2 pO count1 [1:0] $end
$var wire 2 qO count0 [1:0] $end
$scope module adder0 $end
$var wire 2 rO a [1:0] $end
$var wire 2 sO b [1:0] $end
$var wire 2 tO sum [1:0] $end
$var wire 1 uO carry0 $end
$var wire 1 vO Cout $end
$scope module adder0 $end
$var wire 1 wO Cin $end
$var wire 1 xO a $end
$var wire 1 yO b $end
$var reg 1 uO Cout $end
$var reg 1 zO p $end
$var reg 1 {O q $end
$var reg 1 |O sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 uO Cin $end
$var wire 1 }O a $end
$var wire 1 ~O b $end
$var reg 1 vO Cout $end
$var reg 1 !P p $end
$var reg 1 "P q $end
$var reg 1 #P sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 $P a [1:0] $end
$var wire 2 %P b [1:0] $end
$var wire 2 &P sum [1:0] $end
$var wire 1 'P carry0 $end
$var wire 1 (P Cout $end
$scope module adder0 $end
$var wire 1 )P Cin $end
$var wire 1 *P a $end
$var wire 1 +P b $end
$var reg 1 'P Cout $end
$var reg 1 ,P p $end
$var reg 1 -P q $end
$var reg 1 .P sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 'P Cin $end
$var wire 1 /P a $end
$var wire 1 0P b $end
$var reg 1 (P Cout $end
$var reg 1 1P p $end
$var reg 1 2P q $end
$var reg 1 3P sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 iO Cin $end
$var wire 1 4P a $end
$var wire 1 5P b $end
$var reg 1 6P Cout $end
$var reg 1 7P p $end
$var reg 1 8P q $end
$var reg 1 9P sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 iO Cin $end
$var wire 1 :P a $end
$var wire 1 ;P b $end
$var reg 1 <P Cout $end
$var reg 1 =P p $end
$var reg 1 >P q $end
$var reg 1 ?P sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 iO Cin $end
$var wire 1 @P a $end
$var wire 1 AP b $end
$var reg 1 BP Cout $end
$var reg 1 CP p $end
$var reg 1 DP q $end
$var reg 1 EP sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 iO Cin $end
$var wire 1 FP a $end
$var wire 1 GP b $end
$var reg 1 HP Cout $end
$var reg 1 IP p $end
$var reg 1 JP q $end
$var reg 1 KP sum $end
$upscope $end
$scope module total $end
$var wire 3 LP a [2:0] $end
$var wire 3 MP b [2:0] $end
$var wire 1 NP gnd $end
$var wire 3 OP sum [2:0] $end
$var wire 1 PP carry1 $end
$var wire 1 QP carry0 $end
$var wire 1 RP Cout $end
$scope module adder0 $end
$var wire 1 NP Cin $end
$var wire 1 SP a $end
$var wire 1 TP b $end
$var reg 1 QP Cout $end
$var reg 1 UP p $end
$var reg 1 VP q $end
$var reg 1 WP sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 QP Cin $end
$var wire 1 XP a $end
$var wire 1 YP b $end
$var reg 1 PP Cout $end
$var reg 1 ZP p $end
$var reg 1 [P q $end
$var reg 1 \P sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 PP Cin $end
$var wire 1 ]P a $end
$var wire 1 ^P b $end
$var reg 1 RP Cout $end
$var reg 1 _P p $end
$var reg 1 `P q $end
$var reg 1 aP sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[7] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 bP neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 cP state_0 $end
$var wire 4 dP living_neighbors [3:0] $end
$var reg 1 eP state_d $end
$var reg 1 fP state_q $end
$var reg 1 gP stay_alive $end
$scope module living $end
$var wire 1 hP gnd $end
$var wire 8 iP in [7:0] $end
$var wire 3 jP sum1 [2:0] $end
$var wire 3 kP sum0 [2:0] $end
$var wire 4 lP num [3:0] $end
$var wire 2 mP count3 [1:0] $end
$var wire 2 nP count2 [1:0] $end
$var wire 2 oP count1 [1:0] $end
$var wire 2 pP count0 [1:0] $end
$scope module adder0 $end
$var wire 2 qP a [1:0] $end
$var wire 2 rP b [1:0] $end
$var wire 2 sP sum [1:0] $end
$var wire 1 tP carry0 $end
$var wire 1 uP Cout $end
$scope module adder0 $end
$var wire 1 vP Cin $end
$var wire 1 wP a $end
$var wire 1 xP b $end
$var reg 1 tP Cout $end
$var reg 1 yP p $end
$var reg 1 zP q $end
$var reg 1 {P sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 tP Cin $end
$var wire 1 |P a $end
$var wire 1 }P b $end
$var reg 1 uP Cout $end
$var reg 1 ~P p $end
$var reg 1 !Q q $end
$var reg 1 "Q sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 #Q a [1:0] $end
$var wire 2 $Q b [1:0] $end
$var wire 2 %Q sum [1:0] $end
$var wire 1 &Q carry0 $end
$var wire 1 'Q Cout $end
$scope module adder0 $end
$var wire 1 (Q Cin $end
$var wire 1 )Q a $end
$var wire 1 *Q b $end
$var reg 1 &Q Cout $end
$var reg 1 +Q p $end
$var reg 1 ,Q q $end
$var reg 1 -Q sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 &Q Cin $end
$var wire 1 .Q a $end
$var wire 1 /Q b $end
$var reg 1 'Q Cout $end
$var reg 1 0Q p $end
$var reg 1 1Q q $end
$var reg 1 2Q sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 hP Cin $end
$var wire 1 3Q a $end
$var wire 1 4Q b $end
$var reg 1 5Q Cout $end
$var reg 1 6Q p $end
$var reg 1 7Q q $end
$var reg 1 8Q sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 hP Cin $end
$var wire 1 9Q a $end
$var wire 1 :Q b $end
$var reg 1 ;Q Cout $end
$var reg 1 <Q p $end
$var reg 1 =Q q $end
$var reg 1 >Q sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 hP Cin $end
$var wire 1 ?Q a $end
$var wire 1 @Q b $end
$var reg 1 AQ Cout $end
$var reg 1 BQ p $end
$var reg 1 CQ q $end
$var reg 1 DQ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 hP Cin $end
$var wire 1 EQ a $end
$var wire 1 FQ b $end
$var reg 1 GQ Cout $end
$var reg 1 HQ p $end
$var reg 1 IQ q $end
$var reg 1 JQ sum $end
$upscope $end
$scope module total $end
$var wire 3 KQ a [2:0] $end
$var wire 3 LQ b [2:0] $end
$var wire 1 MQ gnd $end
$var wire 3 NQ sum [2:0] $end
$var wire 1 OQ carry1 $end
$var wire 1 PQ carry0 $end
$var wire 1 QQ Cout $end
$scope module adder0 $end
$var wire 1 MQ Cin $end
$var wire 1 RQ a $end
$var wire 1 SQ b $end
$var reg 1 PQ Cout $end
$var reg 1 TQ p $end
$var reg 1 UQ q $end
$var reg 1 VQ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 PQ Cin $end
$var wire 1 WQ a $end
$var wire 1 XQ b $end
$var reg 1 OQ Cout $end
$var reg 1 YQ p $end
$var reg 1 ZQ q $end
$var reg 1 [Q sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 OQ Cin $end
$var wire 1 \Q a $end
$var wire 1 ]Q b $end
$var reg 1 QQ Cout $end
$var reg 1 ^Q p $end
$var reg 1 _Q q $end
$var reg 1 `Q sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 aQ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 bQ state_0 $end
$var wire 4 cQ living_neighbors [3:0] $end
$var reg 1 dQ state_d $end
$var reg 1 eQ state_q $end
$var reg 1 fQ stay_alive $end
$scope module living $end
$var wire 1 gQ gnd $end
$var wire 8 hQ in [7:0] $end
$var wire 3 iQ sum1 [2:0] $end
$var wire 3 jQ sum0 [2:0] $end
$var wire 4 kQ num [3:0] $end
$var wire 2 lQ count3 [1:0] $end
$var wire 2 mQ count2 [1:0] $end
$var wire 2 nQ count1 [1:0] $end
$var wire 2 oQ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 pQ a [1:0] $end
$var wire 2 qQ b [1:0] $end
$var wire 2 rQ sum [1:0] $end
$var wire 1 sQ carry0 $end
$var wire 1 tQ Cout $end
$scope module adder0 $end
$var wire 1 uQ Cin $end
$var wire 1 vQ a $end
$var wire 1 wQ b $end
$var reg 1 sQ Cout $end
$var reg 1 xQ p $end
$var reg 1 yQ q $end
$var reg 1 zQ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 sQ Cin $end
$var wire 1 {Q a $end
$var wire 1 |Q b $end
$var reg 1 tQ Cout $end
$var reg 1 }Q p $end
$var reg 1 ~Q q $end
$var reg 1 !R sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 "R a [1:0] $end
$var wire 2 #R b [1:0] $end
$var wire 2 $R sum [1:0] $end
$var wire 1 %R carry0 $end
$var wire 1 &R Cout $end
$scope module adder0 $end
$var wire 1 'R Cin $end
$var wire 1 (R a $end
$var wire 1 )R b $end
$var reg 1 %R Cout $end
$var reg 1 *R p $end
$var reg 1 +R q $end
$var reg 1 ,R sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 %R Cin $end
$var wire 1 -R a $end
$var wire 1 .R b $end
$var reg 1 &R Cout $end
$var reg 1 /R p $end
$var reg 1 0R q $end
$var reg 1 1R sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 gQ Cin $end
$var wire 1 2R a $end
$var wire 1 3R b $end
$var reg 1 4R Cout $end
$var reg 1 5R p $end
$var reg 1 6R q $end
$var reg 1 7R sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 gQ Cin $end
$var wire 1 8R a $end
$var wire 1 9R b $end
$var reg 1 :R Cout $end
$var reg 1 ;R p $end
$var reg 1 <R q $end
$var reg 1 =R sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 gQ Cin $end
$var wire 1 >R a $end
$var wire 1 ?R b $end
$var reg 1 @R Cout $end
$var reg 1 AR p $end
$var reg 1 BR q $end
$var reg 1 CR sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 gQ Cin $end
$var wire 1 DR a $end
$var wire 1 ER b $end
$var reg 1 FR Cout $end
$var reg 1 GR p $end
$var reg 1 HR q $end
$var reg 1 IR sum $end
$upscope $end
$scope module total $end
$var wire 3 JR a [2:0] $end
$var wire 3 KR b [2:0] $end
$var wire 1 LR gnd $end
$var wire 3 MR sum [2:0] $end
$var wire 1 NR carry1 $end
$var wire 1 OR carry0 $end
$var wire 1 PR Cout $end
$scope module adder0 $end
$var wire 1 LR Cin $end
$var wire 1 QR a $end
$var wire 1 RR b $end
$var reg 1 OR Cout $end
$var reg 1 SR p $end
$var reg 1 TR q $end
$var reg 1 UR sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 OR Cin $end
$var wire 1 VR a $end
$var wire 1 WR b $end
$var reg 1 NR Cout $end
$var reg 1 XR p $end
$var reg 1 YR q $end
$var reg 1 ZR sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 NR Cin $end
$var wire 1 [R a $end
$var wire 1 \R b $end
$var reg 1 PR Cout $end
$var reg 1 ]R p $end
$var reg 1 ^R q $end
$var reg 1 _R sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 `R neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 aR state_0 $end
$var wire 4 bR living_neighbors [3:0] $end
$var reg 1 cR state_d $end
$var reg 1 dR state_q $end
$var reg 1 eR stay_alive $end
$scope module living $end
$var wire 1 fR gnd $end
$var wire 8 gR in [7:0] $end
$var wire 3 hR sum1 [2:0] $end
$var wire 3 iR sum0 [2:0] $end
$var wire 4 jR num [3:0] $end
$var wire 2 kR count3 [1:0] $end
$var wire 2 lR count2 [1:0] $end
$var wire 2 mR count1 [1:0] $end
$var wire 2 nR count0 [1:0] $end
$scope module adder0 $end
$var wire 2 oR a [1:0] $end
$var wire 2 pR b [1:0] $end
$var wire 2 qR sum [1:0] $end
$var wire 1 rR carry0 $end
$var wire 1 sR Cout $end
$scope module adder0 $end
$var wire 1 tR Cin $end
$var wire 1 uR a $end
$var wire 1 vR b $end
$var reg 1 rR Cout $end
$var reg 1 wR p $end
$var reg 1 xR q $end
$var reg 1 yR sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 rR Cin $end
$var wire 1 zR a $end
$var wire 1 {R b $end
$var reg 1 sR Cout $end
$var reg 1 |R p $end
$var reg 1 }R q $end
$var reg 1 ~R sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 !S a [1:0] $end
$var wire 2 "S b [1:0] $end
$var wire 2 #S sum [1:0] $end
$var wire 1 $S carry0 $end
$var wire 1 %S Cout $end
$scope module adder0 $end
$var wire 1 &S Cin $end
$var wire 1 'S a $end
$var wire 1 (S b $end
$var reg 1 $S Cout $end
$var reg 1 )S p $end
$var reg 1 *S q $end
$var reg 1 +S sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 $S Cin $end
$var wire 1 ,S a $end
$var wire 1 -S b $end
$var reg 1 %S Cout $end
$var reg 1 .S p $end
$var reg 1 /S q $end
$var reg 1 0S sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 fR Cin $end
$var wire 1 1S a $end
$var wire 1 2S b $end
$var reg 1 3S Cout $end
$var reg 1 4S p $end
$var reg 1 5S q $end
$var reg 1 6S sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 fR Cin $end
$var wire 1 7S a $end
$var wire 1 8S b $end
$var reg 1 9S Cout $end
$var reg 1 :S p $end
$var reg 1 ;S q $end
$var reg 1 <S sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 fR Cin $end
$var wire 1 =S a $end
$var wire 1 >S b $end
$var reg 1 ?S Cout $end
$var reg 1 @S p $end
$var reg 1 AS q $end
$var reg 1 BS sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 fR Cin $end
$var wire 1 CS a $end
$var wire 1 DS b $end
$var reg 1 ES Cout $end
$var reg 1 FS p $end
$var reg 1 GS q $end
$var reg 1 HS sum $end
$upscope $end
$scope module total $end
$var wire 3 IS a [2:0] $end
$var wire 3 JS b [2:0] $end
$var wire 1 KS gnd $end
$var wire 3 LS sum [2:0] $end
$var wire 1 MS carry1 $end
$var wire 1 NS carry0 $end
$var wire 1 OS Cout $end
$scope module adder0 $end
$var wire 1 KS Cin $end
$var wire 1 PS a $end
$var wire 1 QS b $end
$var reg 1 NS Cout $end
$var reg 1 RS p $end
$var reg 1 SS q $end
$var reg 1 TS sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 NS Cin $end
$var wire 1 US a $end
$var wire 1 VS b $end
$var reg 1 MS Cout $end
$var reg 1 WS p $end
$var reg 1 XS q $end
$var reg 1 YS sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 MS Cin $end
$var wire 1 ZS a $end
$var wire 1 [S b $end
$var reg 1 OS Cout $end
$var reg 1 \S p $end
$var reg 1 ]S q $end
$var reg 1 ^S sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 _S neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 `S state_0 $end
$var wire 4 aS living_neighbors [3:0] $end
$var reg 1 bS state_d $end
$var reg 1 cS state_q $end
$var reg 1 dS stay_alive $end
$scope module living $end
$var wire 1 eS gnd $end
$var wire 8 fS in [7:0] $end
$var wire 3 gS sum1 [2:0] $end
$var wire 3 hS sum0 [2:0] $end
$var wire 4 iS num [3:0] $end
$var wire 2 jS count3 [1:0] $end
$var wire 2 kS count2 [1:0] $end
$var wire 2 lS count1 [1:0] $end
$var wire 2 mS count0 [1:0] $end
$scope module adder0 $end
$var wire 2 nS a [1:0] $end
$var wire 2 oS b [1:0] $end
$var wire 2 pS sum [1:0] $end
$var wire 1 qS carry0 $end
$var wire 1 rS Cout $end
$scope module adder0 $end
$var wire 1 sS Cin $end
$var wire 1 tS a $end
$var wire 1 uS b $end
$var reg 1 qS Cout $end
$var reg 1 vS p $end
$var reg 1 wS q $end
$var reg 1 xS sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 qS Cin $end
$var wire 1 yS a $end
$var wire 1 zS b $end
$var reg 1 rS Cout $end
$var reg 1 {S p $end
$var reg 1 |S q $end
$var reg 1 }S sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 ~S a [1:0] $end
$var wire 2 !T b [1:0] $end
$var wire 2 "T sum [1:0] $end
$var wire 1 #T carry0 $end
$var wire 1 $T Cout $end
$scope module adder0 $end
$var wire 1 %T Cin $end
$var wire 1 &T a $end
$var wire 1 'T b $end
$var reg 1 #T Cout $end
$var reg 1 (T p $end
$var reg 1 )T q $end
$var reg 1 *T sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 #T Cin $end
$var wire 1 +T a $end
$var wire 1 ,T b $end
$var reg 1 $T Cout $end
$var reg 1 -T p $end
$var reg 1 .T q $end
$var reg 1 /T sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 eS Cin $end
$var wire 1 0T a $end
$var wire 1 1T b $end
$var reg 1 2T Cout $end
$var reg 1 3T p $end
$var reg 1 4T q $end
$var reg 1 5T sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 eS Cin $end
$var wire 1 6T a $end
$var wire 1 7T b $end
$var reg 1 8T Cout $end
$var reg 1 9T p $end
$var reg 1 :T q $end
$var reg 1 ;T sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 eS Cin $end
$var wire 1 <T a $end
$var wire 1 =T b $end
$var reg 1 >T Cout $end
$var reg 1 ?T p $end
$var reg 1 @T q $end
$var reg 1 AT sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 eS Cin $end
$var wire 1 BT a $end
$var wire 1 CT b $end
$var reg 1 DT Cout $end
$var reg 1 ET p $end
$var reg 1 FT q $end
$var reg 1 GT sum $end
$upscope $end
$scope module total $end
$var wire 3 HT a [2:0] $end
$var wire 3 IT b [2:0] $end
$var wire 1 JT gnd $end
$var wire 3 KT sum [2:0] $end
$var wire 1 LT carry1 $end
$var wire 1 MT carry0 $end
$var wire 1 NT Cout $end
$scope module adder0 $end
$var wire 1 JT Cin $end
$var wire 1 OT a $end
$var wire 1 PT b $end
$var reg 1 MT Cout $end
$var reg 1 QT p $end
$var reg 1 RT q $end
$var reg 1 ST sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 MT Cin $end
$var wire 1 TT a $end
$var wire 1 UT b $end
$var reg 1 LT Cout $end
$var reg 1 VT p $end
$var reg 1 WT q $end
$var reg 1 XT sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 LT Cin $end
$var wire 1 YT a $end
$var wire 1 ZT b $end
$var reg 1 NT Cout $end
$var reg 1 [T p $end
$var reg 1 \T q $end
$var reg 1 ]T sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ^T neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 _T state_0 $end
$var wire 4 `T living_neighbors [3:0] $end
$var reg 1 aT state_d $end
$var reg 1 bT state_q $end
$var reg 1 cT stay_alive $end
$scope module living $end
$var wire 1 dT gnd $end
$var wire 8 eT in [7:0] $end
$var wire 3 fT sum1 [2:0] $end
$var wire 3 gT sum0 [2:0] $end
$var wire 4 hT num [3:0] $end
$var wire 2 iT count3 [1:0] $end
$var wire 2 jT count2 [1:0] $end
$var wire 2 kT count1 [1:0] $end
$var wire 2 lT count0 [1:0] $end
$scope module adder0 $end
$var wire 2 mT a [1:0] $end
$var wire 2 nT b [1:0] $end
$var wire 2 oT sum [1:0] $end
$var wire 1 pT carry0 $end
$var wire 1 qT Cout $end
$scope module adder0 $end
$var wire 1 rT Cin $end
$var wire 1 sT a $end
$var wire 1 tT b $end
$var reg 1 pT Cout $end
$var reg 1 uT p $end
$var reg 1 vT q $end
$var reg 1 wT sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 pT Cin $end
$var wire 1 xT a $end
$var wire 1 yT b $end
$var reg 1 qT Cout $end
$var reg 1 zT p $end
$var reg 1 {T q $end
$var reg 1 |T sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 }T a [1:0] $end
$var wire 2 ~T b [1:0] $end
$var wire 2 !U sum [1:0] $end
$var wire 1 "U carry0 $end
$var wire 1 #U Cout $end
$scope module adder0 $end
$var wire 1 $U Cin $end
$var wire 1 %U a $end
$var wire 1 &U b $end
$var reg 1 "U Cout $end
$var reg 1 'U p $end
$var reg 1 (U q $end
$var reg 1 )U sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 "U Cin $end
$var wire 1 *U a $end
$var wire 1 +U b $end
$var reg 1 #U Cout $end
$var reg 1 ,U p $end
$var reg 1 -U q $end
$var reg 1 .U sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 dT Cin $end
$var wire 1 /U a $end
$var wire 1 0U b $end
$var reg 1 1U Cout $end
$var reg 1 2U p $end
$var reg 1 3U q $end
$var reg 1 4U sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 dT Cin $end
$var wire 1 5U a $end
$var wire 1 6U b $end
$var reg 1 7U Cout $end
$var reg 1 8U p $end
$var reg 1 9U q $end
$var reg 1 :U sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 dT Cin $end
$var wire 1 ;U a $end
$var wire 1 <U b $end
$var reg 1 =U Cout $end
$var reg 1 >U p $end
$var reg 1 ?U q $end
$var reg 1 @U sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 dT Cin $end
$var wire 1 AU a $end
$var wire 1 BU b $end
$var reg 1 CU Cout $end
$var reg 1 DU p $end
$var reg 1 EU q $end
$var reg 1 FU sum $end
$upscope $end
$scope module total $end
$var wire 3 GU a [2:0] $end
$var wire 3 HU b [2:0] $end
$var wire 1 IU gnd $end
$var wire 3 JU sum [2:0] $end
$var wire 1 KU carry1 $end
$var wire 1 LU carry0 $end
$var wire 1 MU Cout $end
$scope module adder0 $end
$var wire 1 IU Cin $end
$var wire 1 NU a $end
$var wire 1 OU b $end
$var reg 1 LU Cout $end
$var reg 1 PU p $end
$var reg 1 QU q $end
$var reg 1 RU sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 LU Cin $end
$var wire 1 SU a $end
$var wire 1 TU b $end
$var reg 1 KU Cout $end
$var reg 1 UU p $end
$var reg 1 VU q $end
$var reg 1 WU sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 KU Cin $end
$var wire 1 XU a $end
$var wire 1 YU b $end
$var reg 1 MU Cout $end
$var reg 1 ZU p $end
$var reg 1 [U q $end
$var reg 1 \U sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ]U neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ^U state_0 $end
$var wire 4 _U living_neighbors [3:0] $end
$var reg 1 `U state_d $end
$var reg 1 aU state_q $end
$var reg 1 bU stay_alive $end
$scope module living $end
$var wire 1 cU gnd $end
$var wire 8 dU in [7:0] $end
$var wire 3 eU sum1 [2:0] $end
$var wire 3 fU sum0 [2:0] $end
$var wire 4 gU num [3:0] $end
$var wire 2 hU count3 [1:0] $end
$var wire 2 iU count2 [1:0] $end
$var wire 2 jU count1 [1:0] $end
$var wire 2 kU count0 [1:0] $end
$scope module adder0 $end
$var wire 2 lU a [1:0] $end
$var wire 2 mU b [1:0] $end
$var wire 2 nU sum [1:0] $end
$var wire 1 oU carry0 $end
$var wire 1 pU Cout $end
$scope module adder0 $end
$var wire 1 qU Cin $end
$var wire 1 rU a $end
$var wire 1 sU b $end
$var reg 1 oU Cout $end
$var reg 1 tU p $end
$var reg 1 uU q $end
$var reg 1 vU sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 oU Cin $end
$var wire 1 wU a $end
$var wire 1 xU b $end
$var reg 1 pU Cout $end
$var reg 1 yU p $end
$var reg 1 zU q $end
$var reg 1 {U sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 |U a [1:0] $end
$var wire 2 }U b [1:0] $end
$var wire 2 ~U sum [1:0] $end
$var wire 1 !V carry0 $end
$var wire 1 "V Cout $end
$scope module adder0 $end
$var wire 1 #V Cin $end
$var wire 1 $V a $end
$var wire 1 %V b $end
$var reg 1 !V Cout $end
$var reg 1 &V p $end
$var reg 1 'V q $end
$var reg 1 (V sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 !V Cin $end
$var wire 1 )V a $end
$var wire 1 *V b $end
$var reg 1 "V Cout $end
$var reg 1 +V p $end
$var reg 1 ,V q $end
$var reg 1 -V sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 cU Cin $end
$var wire 1 .V a $end
$var wire 1 /V b $end
$var reg 1 0V Cout $end
$var reg 1 1V p $end
$var reg 1 2V q $end
$var reg 1 3V sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 cU Cin $end
$var wire 1 4V a $end
$var wire 1 5V b $end
$var reg 1 6V Cout $end
$var reg 1 7V p $end
$var reg 1 8V q $end
$var reg 1 9V sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 cU Cin $end
$var wire 1 :V a $end
$var wire 1 ;V b $end
$var reg 1 <V Cout $end
$var reg 1 =V p $end
$var reg 1 >V q $end
$var reg 1 ?V sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 cU Cin $end
$var wire 1 @V a $end
$var wire 1 AV b $end
$var reg 1 BV Cout $end
$var reg 1 CV p $end
$var reg 1 DV q $end
$var reg 1 EV sum $end
$upscope $end
$scope module total $end
$var wire 3 FV a [2:0] $end
$var wire 3 GV b [2:0] $end
$var wire 1 HV gnd $end
$var wire 3 IV sum [2:0] $end
$var wire 1 JV carry1 $end
$var wire 1 KV carry0 $end
$var wire 1 LV Cout $end
$scope module adder0 $end
$var wire 1 HV Cin $end
$var wire 1 MV a $end
$var wire 1 NV b $end
$var reg 1 KV Cout $end
$var reg 1 OV p $end
$var reg 1 PV q $end
$var reg 1 QV sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 KV Cin $end
$var wire 1 RV a $end
$var wire 1 SV b $end
$var reg 1 JV Cout $end
$var reg 1 TV p $end
$var reg 1 UV q $end
$var reg 1 VV sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 JV Cin $end
$var wire 1 WV a $end
$var wire 1 XV b $end
$var reg 1 LV Cout $end
$var reg 1 YV p $end
$var reg 1 ZV q $end
$var reg 1 [V sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 \V neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ]V state_0 $end
$var wire 4 ^V living_neighbors [3:0] $end
$var reg 1 _V state_d $end
$var reg 1 `V state_q $end
$var reg 1 aV stay_alive $end
$scope module living $end
$var wire 1 bV gnd $end
$var wire 8 cV in [7:0] $end
$var wire 3 dV sum1 [2:0] $end
$var wire 3 eV sum0 [2:0] $end
$var wire 4 fV num [3:0] $end
$var wire 2 gV count3 [1:0] $end
$var wire 2 hV count2 [1:0] $end
$var wire 2 iV count1 [1:0] $end
$var wire 2 jV count0 [1:0] $end
$scope module adder0 $end
$var wire 2 kV a [1:0] $end
$var wire 2 lV b [1:0] $end
$var wire 2 mV sum [1:0] $end
$var wire 1 nV carry0 $end
$var wire 1 oV Cout $end
$scope module adder0 $end
$var wire 1 pV Cin $end
$var wire 1 qV a $end
$var wire 1 rV b $end
$var reg 1 nV Cout $end
$var reg 1 sV p $end
$var reg 1 tV q $end
$var reg 1 uV sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 nV Cin $end
$var wire 1 vV a $end
$var wire 1 wV b $end
$var reg 1 oV Cout $end
$var reg 1 xV p $end
$var reg 1 yV q $end
$var reg 1 zV sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 {V a [1:0] $end
$var wire 2 |V b [1:0] $end
$var wire 2 }V sum [1:0] $end
$var wire 1 ~V carry0 $end
$var wire 1 !W Cout $end
$scope module adder0 $end
$var wire 1 "W Cin $end
$var wire 1 #W a $end
$var wire 1 $W b $end
$var reg 1 ~V Cout $end
$var reg 1 %W p $end
$var reg 1 &W q $end
$var reg 1 'W sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ~V Cin $end
$var wire 1 (W a $end
$var wire 1 )W b $end
$var reg 1 !W Cout $end
$var reg 1 *W p $end
$var reg 1 +W q $end
$var reg 1 ,W sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 bV Cin $end
$var wire 1 -W a $end
$var wire 1 .W b $end
$var reg 1 /W Cout $end
$var reg 1 0W p $end
$var reg 1 1W q $end
$var reg 1 2W sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 bV Cin $end
$var wire 1 3W a $end
$var wire 1 4W b $end
$var reg 1 5W Cout $end
$var reg 1 6W p $end
$var reg 1 7W q $end
$var reg 1 8W sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 bV Cin $end
$var wire 1 9W a $end
$var wire 1 :W b $end
$var reg 1 ;W Cout $end
$var reg 1 <W p $end
$var reg 1 =W q $end
$var reg 1 >W sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 bV Cin $end
$var wire 1 ?W a $end
$var wire 1 @W b $end
$var reg 1 AW Cout $end
$var reg 1 BW p $end
$var reg 1 CW q $end
$var reg 1 DW sum $end
$upscope $end
$scope module total $end
$var wire 3 EW a [2:0] $end
$var wire 3 FW b [2:0] $end
$var wire 1 GW gnd $end
$var wire 3 HW sum [2:0] $end
$var wire 1 IW carry1 $end
$var wire 1 JW carry0 $end
$var wire 1 KW Cout $end
$scope module adder0 $end
$var wire 1 GW Cin $end
$var wire 1 LW a $end
$var wire 1 MW b $end
$var reg 1 JW Cout $end
$var reg 1 NW p $end
$var reg 1 OW q $end
$var reg 1 PW sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 JW Cin $end
$var wire 1 QW a $end
$var wire 1 RW b $end
$var reg 1 IW Cout $end
$var reg 1 SW p $end
$var reg 1 TW q $end
$var reg 1 UW sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 IW Cin $end
$var wire 1 VW a $end
$var wire 1 WW b $end
$var reg 1 KW Cout $end
$var reg 1 XW p $end
$var reg 1 YW q $end
$var reg 1 ZW sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 [W neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 \W state_0 $end
$var wire 4 ]W living_neighbors [3:0] $end
$var reg 1 ^W state_d $end
$var reg 1 _W state_q $end
$var reg 1 `W stay_alive $end
$scope module living $end
$var wire 1 aW gnd $end
$var wire 8 bW in [7:0] $end
$var wire 3 cW sum1 [2:0] $end
$var wire 3 dW sum0 [2:0] $end
$var wire 4 eW num [3:0] $end
$var wire 2 fW count3 [1:0] $end
$var wire 2 gW count2 [1:0] $end
$var wire 2 hW count1 [1:0] $end
$var wire 2 iW count0 [1:0] $end
$scope module adder0 $end
$var wire 2 jW a [1:0] $end
$var wire 2 kW b [1:0] $end
$var wire 2 lW sum [1:0] $end
$var wire 1 mW carry0 $end
$var wire 1 nW Cout $end
$scope module adder0 $end
$var wire 1 oW Cin $end
$var wire 1 pW a $end
$var wire 1 qW b $end
$var reg 1 mW Cout $end
$var reg 1 rW p $end
$var reg 1 sW q $end
$var reg 1 tW sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 mW Cin $end
$var wire 1 uW a $end
$var wire 1 vW b $end
$var reg 1 nW Cout $end
$var reg 1 wW p $end
$var reg 1 xW q $end
$var reg 1 yW sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 zW a [1:0] $end
$var wire 2 {W b [1:0] $end
$var wire 2 |W sum [1:0] $end
$var wire 1 }W carry0 $end
$var wire 1 ~W Cout $end
$scope module adder0 $end
$var wire 1 !X Cin $end
$var wire 1 "X a $end
$var wire 1 #X b $end
$var reg 1 }W Cout $end
$var reg 1 $X p $end
$var reg 1 %X q $end
$var reg 1 &X sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 }W Cin $end
$var wire 1 'X a $end
$var wire 1 (X b $end
$var reg 1 ~W Cout $end
$var reg 1 )X p $end
$var reg 1 *X q $end
$var reg 1 +X sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 aW Cin $end
$var wire 1 ,X a $end
$var wire 1 -X b $end
$var reg 1 .X Cout $end
$var reg 1 /X p $end
$var reg 1 0X q $end
$var reg 1 1X sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 aW Cin $end
$var wire 1 2X a $end
$var wire 1 3X b $end
$var reg 1 4X Cout $end
$var reg 1 5X p $end
$var reg 1 6X q $end
$var reg 1 7X sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 aW Cin $end
$var wire 1 8X a $end
$var wire 1 9X b $end
$var reg 1 :X Cout $end
$var reg 1 ;X p $end
$var reg 1 <X q $end
$var reg 1 =X sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 aW Cin $end
$var wire 1 >X a $end
$var wire 1 ?X b $end
$var reg 1 @X Cout $end
$var reg 1 AX p $end
$var reg 1 BX q $end
$var reg 1 CX sum $end
$upscope $end
$scope module total $end
$var wire 3 DX a [2:0] $end
$var wire 3 EX b [2:0] $end
$var wire 1 FX gnd $end
$var wire 3 GX sum [2:0] $end
$var wire 1 HX carry1 $end
$var wire 1 IX carry0 $end
$var wire 1 JX Cout $end
$scope module adder0 $end
$var wire 1 FX Cin $end
$var wire 1 KX a $end
$var wire 1 LX b $end
$var reg 1 IX Cout $end
$var reg 1 MX p $end
$var reg 1 NX q $end
$var reg 1 OX sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 IX Cin $end
$var wire 1 PX a $end
$var wire 1 QX b $end
$var reg 1 HX Cout $end
$var reg 1 RX p $end
$var reg 1 SX q $end
$var reg 1 TX sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 HX Cin $end
$var wire 1 UX a $end
$var wire 1 VX b $end
$var reg 1 JX Cout $end
$var reg 1 WX p $end
$var reg 1 XX q $end
$var reg 1 YX sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[8] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ZX neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 [X state_0 $end
$var wire 4 \X living_neighbors [3:0] $end
$var reg 1 ]X state_d $end
$var reg 1 ^X state_q $end
$var reg 1 _X stay_alive $end
$scope module living $end
$var wire 1 `X gnd $end
$var wire 8 aX in [7:0] $end
$var wire 3 bX sum1 [2:0] $end
$var wire 3 cX sum0 [2:0] $end
$var wire 4 dX num [3:0] $end
$var wire 2 eX count3 [1:0] $end
$var wire 2 fX count2 [1:0] $end
$var wire 2 gX count1 [1:0] $end
$var wire 2 hX count0 [1:0] $end
$scope module adder0 $end
$var wire 2 iX a [1:0] $end
$var wire 2 jX b [1:0] $end
$var wire 2 kX sum [1:0] $end
$var wire 1 lX carry0 $end
$var wire 1 mX Cout $end
$scope module adder0 $end
$var wire 1 nX Cin $end
$var wire 1 oX a $end
$var wire 1 pX b $end
$var reg 1 lX Cout $end
$var reg 1 qX p $end
$var reg 1 rX q $end
$var reg 1 sX sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 lX Cin $end
$var wire 1 tX a $end
$var wire 1 uX b $end
$var reg 1 mX Cout $end
$var reg 1 vX p $end
$var reg 1 wX q $end
$var reg 1 xX sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 yX a [1:0] $end
$var wire 2 zX b [1:0] $end
$var wire 2 {X sum [1:0] $end
$var wire 1 |X carry0 $end
$var wire 1 }X Cout $end
$scope module adder0 $end
$var wire 1 ~X Cin $end
$var wire 1 !Y a $end
$var wire 1 "Y b $end
$var reg 1 |X Cout $end
$var reg 1 #Y p $end
$var reg 1 $Y q $end
$var reg 1 %Y sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 |X Cin $end
$var wire 1 &Y a $end
$var wire 1 'Y b $end
$var reg 1 }X Cout $end
$var reg 1 (Y p $end
$var reg 1 )Y q $end
$var reg 1 *Y sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 `X Cin $end
$var wire 1 +Y a $end
$var wire 1 ,Y b $end
$var reg 1 -Y Cout $end
$var reg 1 .Y p $end
$var reg 1 /Y q $end
$var reg 1 0Y sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 `X Cin $end
$var wire 1 1Y a $end
$var wire 1 2Y b $end
$var reg 1 3Y Cout $end
$var reg 1 4Y p $end
$var reg 1 5Y q $end
$var reg 1 6Y sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 `X Cin $end
$var wire 1 7Y a $end
$var wire 1 8Y b $end
$var reg 1 9Y Cout $end
$var reg 1 :Y p $end
$var reg 1 ;Y q $end
$var reg 1 <Y sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 `X Cin $end
$var wire 1 =Y a $end
$var wire 1 >Y b $end
$var reg 1 ?Y Cout $end
$var reg 1 @Y p $end
$var reg 1 AY q $end
$var reg 1 BY sum $end
$upscope $end
$scope module total $end
$var wire 3 CY a [2:0] $end
$var wire 3 DY b [2:0] $end
$var wire 1 EY gnd $end
$var wire 3 FY sum [2:0] $end
$var wire 1 GY carry1 $end
$var wire 1 HY carry0 $end
$var wire 1 IY Cout $end
$scope module adder0 $end
$var wire 1 EY Cin $end
$var wire 1 JY a $end
$var wire 1 KY b $end
$var reg 1 HY Cout $end
$var reg 1 LY p $end
$var reg 1 MY q $end
$var reg 1 NY sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 HY Cin $end
$var wire 1 OY a $end
$var wire 1 PY b $end
$var reg 1 GY Cout $end
$var reg 1 QY p $end
$var reg 1 RY q $end
$var reg 1 SY sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 GY Cin $end
$var wire 1 TY a $end
$var wire 1 UY b $end
$var reg 1 IY Cout $end
$var reg 1 VY p $end
$var reg 1 WY q $end
$var reg 1 XY sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 YY neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ZY state_0 $end
$var wire 4 [Y living_neighbors [3:0] $end
$var reg 1 \Y state_d $end
$var reg 1 ]Y state_q $end
$var reg 1 ^Y stay_alive $end
$scope module living $end
$var wire 1 _Y gnd $end
$var wire 8 `Y in [7:0] $end
$var wire 3 aY sum1 [2:0] $end
$var wire 3 bY sum0 [2:0] $end
$var wire 4 cY num [3:0] $end
$var wire 2 dY count3 [1:0] $end
$var wire 2 eY count2 [1:0] $end
$var wire 2 fY count1 [1:0] $end
$var wire 2 gY count0 [1:0] $end
$scope module adder0 $end
$var wire 2 hY a [1:0] $end
$var wire 2 iY b [1:0] $end
$var wire 2 jY sum [1:0] $end
$var wire 1 kY carry0 $end
$var wire 1 lY Cout $end
$scope module adder0 $end
$var wire 1 mY Cin $end
$var wire 1 nY a $end
$var wire 1 oY b $end
$var reg 1 kY Cout $end
$var reg 1 pY p $end
$var reg 1 qY q $end
$var reg 1 rY sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 kY Cin $end
$var wire 1 sY a $end
$var wire 1 tY b $end
$var reg 1 lY Cout $end
$var reg 1 uY p $end
$var reg 1 vY q $end
$var reg 1 wY sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 xY a [1:0] $end
$var wire 2 yY b [1:0] $end
$var wire 2 zY sum [1:0] $end
$var wire 1 {Y carry0 $end
$var wire 1 |Y Cout $end
$scope module adder0 $end
$var wire 1 }Y Cin $end
$var wire 1 ~Y a $end
$var wire 1 !Z b $end
$var reg 1 {Y Cout $end
$var reg 1 "Z p $end
$var reg 1 #Z q $end
$var reg 1 $Z sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 {Y Cin $end
$var wire 1 %Z a $end
$var wire 1 &Z b $end
$var reg 1 |Y Cout $end
$var reg 1 'Z p $end
$var reg 1 (Z q $end
$var reg 1 )Z sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 _Y Cin $end
$var wire 1 *Z a $end
$var wire 1 +Z b $end
$var reg 1 ,Z Cout $end
$var reg 1 -Z p $end
$var reg 1 .Z q $end
$var reg 1 /Z sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 _Y Cin $end
$var wire 1 0Z a $end
$var wire 1 1Z b $end
$var reg 1 2Z Cout $end
$var reg 1 3Z p $end
$var reg 1 4Z q $end
$var reg 1 5Z sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 _Y Cin $end
$var wire 1 6Z a $end
$var wire 1 7Z b $end
$var reg 1 8Z Cout $end
$var reg 1 9Z p $end
$var reg 1 :Z q $end
$var reg 1 ;Z sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 _Y Cin $end
$var wire 1 <Z a $end
$var wire 1 =Z b $end
$var reg 1 >Z Cout $end
$var reg 1 ?Z p $end
$var reg 1 @Z q $end
$var reg 1 AZ sum $end
$upscope $end
$scope module total $end
$var wire 3 BZ a [2:0] $end
$var wire 3 CZ b [2:0] $end
$var wire 1 DZ gnd $end
$var wire 3 EZ sum [2:0] $end
$var wire 1 FZ carry1 $end
$var wire 1 GZ carry0 $end
$var wire 1 HZ Cout $end
$scope module adder0 $end
$var wire 1 DZ Cin $end
$var wire 1 IZ a $end
$var wire 1 JZ b $end
$var reg 1 GZ Cout $end
$var reg 1 KZ p $end
$var reg 1 LZ q $end
$var reg 1 MZ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 GZ Cin $end
$var wire 1 NZ a $end
$var wire 1 OZ b $end
$var reg 1 FZ Cout $end
$var reg 1 PZ p $end
$var reg 1 QZ q $end
$var reg 1 RZ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 FZ Cin $end
$var wire 1 SZ a $end
$var wire 1 TZ b $end
$var reg 1 HZ Cout $end
$var reg 1 UZ p $end
$var reg 1 VZ q $end
$var reg 1 WZ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 XZ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 YZ state_0 $end
$var wire 4 ZZ living_neighbors [3:0] $end
$var reg 1 [Z state_d $end
$var reg 1 \Z state_q $end
$var reg 1 ]Z stay_alive $end
$scope module living $end
$var wire 1 ^Z gnd $end
$var wire 8 _Z in [7:0] $end
$var wire 3 `Z sum1 [2:0] $end
$var wire 3 aZ sum0 [2:0] $end
$var wire 4 bZ num [3:0] $end
$var wire 2 cZ count3 [1:0] $end
$var wire 2 dZ count2 [1:0] $end
$var wire 2 eZ count1 [1:0] $end
$var wire 2 fZ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 gZ a [1:0] $end
$var wire 2 hZ b [1:0] $end
$var wire 2 iZ sum [1:0] $end
$var wire 1 jZ carry0 $end
$var wire 1 kZ Cout $end
$scope module adder0 $end
$var wire 1 lZ Cin $end
$var wire 1 mZ a $end
$var wire 1 nZ b $end
$var reg 1 jZ Cout $end
$var reg 1 oZ p $end
$var reg 1 pZ q $end
$var reg 1 qZ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 jZ Cin $end
$var wire 1 rZ a $end
$var wire 1 sZ b $end
$var reg 1 kZ Cout $end
$var reg 1 tZ p $end
$var reg 1 uZ q $end
$var reg 1 vZ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 wZ a [1:0] $end
$var wire 2 xZ b [1:0] $end
$var wire 2 yZ sum [1:0] $end
$var wire 1 zZ carry0 $end
$var wire 1 {Z Cout $end
$scope module adder0 $end
$var wire 1 |Z Cin $end
$var wire 1 }Z a $end
$var wire 1 ~Z b $end
$var reg 1 zZ Cout $end
$var reg 1 ![ p $end
$var reg 1 "[ q $end
$var reg 1 #[ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 zZ Cin $end
$var wire 1 $[ a $end
$var wire 1 %[ b $end
$var reg 1 {Z Cout $end
$var reg 1 &[ p $end
$var reg 1 '[ q $end
$var reg 1 ([ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 ^Z Cin $end
$var wire 1 )[ a $end
$var wire 1 *[ b $end
$var reg 1 +[ Cout $end
$var reg 1 ,[ p $end
$var reg 1 -[ q $end
$var reg 1 .[ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 ^Z Cin $end
$var wire 1 /[ a $end
$var wire 1 0[ b $end
$var reg 1 1[ Cout $end
$var reg 1 2[ p $end
$var reg 1 3[ q $end
$var reg 1 4[ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 ^Z Cin $end
$var wire 1 5[ a $end
$var wire 1 6[ b $end
$var reg 1 7[ Cout $end
$var reg 1 8[ p $end
$var reg 1 9[ q $end
$var reg 1 :[ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 ^Z Cin $end
$var wire 1 ;[ a $end
$var wire 1 <[ b $end
$var reg 1 =[ Cout $end
$var reg 1 >[ p $end
$var reg 1 ?[ q $end
$var reg 1 @[ sum $end
$upscope $end
$scope module total $end
$var wire 3 A[ a [2:0] $end
$var wire 3 B[ b [2:0] $end
$var wire 1 C[ gnd $end
$var wire 3 D[ sum [2:0] $end
$var wire 1 E[ carry1 $end
$var wire 1 F[ carry0 $end
$var wire 1 G[ Cout $end
$scope module adder0 $end
$var wire 1 C[ Cin $end
$var wire 1 H[ a $end
$var wire 1 I[ b $end
$var reg 1 F[ Cout $end
$var reg 1 J[ p $end
$var reg 1 K[ q $end
$var reg 1 L[ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 F[ Cin $end
$var wire 1 M[ a $end
$var wire 1 N[ b $end
$var reg 1 E[ Cout $end
$var reg 1 O[ p $end
$var reg 1 P[ q $end
$var reg 1 Q[ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 E[ Cin $end
$var wire 1 R[ a $end
$var wire 1 S[ b $end
$var reg 1 G[ Cout $end
$var reg 1 T[ p $end
$var reg 1 U[ q $end
$var reg 1 V[ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 W[ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 X[ state_0 $end
$var wire 4 Y[ living_neighbors [3:0] $end
$var reg 1 Z[ state_d $end
$var reg 1 [[ state_q $end
$var reg 1 \[ stay_alive $end
$scope module living $end
$var wire 1 ][ gnd $end
$var wire 8 ^[ in [7:0] $end
$var wire 3 _[ sum1 [2:0] $end
$var wire 3 `[ sum0 [2:0] $end
$var wire 4 a[ num [3:0] $end
$var wire 2 b[ count3 [1:0] $end
$var wire 2 c[ count2 [1:0] $end
$var wire 2 d[ count1 [1:0] $end
$var wire 2 e[ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 f[ a [1:0] $end
$var wire 2 g[ b [1:0] $end
$var wire 2 h[ sum [1:0] $end
$var wire 1 i[ carry0 $end
$var wire 1 j[ Cout $end
$scope module adder0 $end
$var wire 1 k[ Cin $end
$var wire 1 l[ a $end
$var wire 1 m[ b $end
$var reg 1 i[ Cout $end
$var reg 1 n[ p $end
$var reg 1 o[ q $end
$var reg 1 p[ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 i[ Cin $end
$var wire 1 q[ a $end
$var wire 1 r[ b $end
$var reg 1 j[ Cout $end
$var reg 1 s[ p $end
$var reg 1 t[ q $end
$var reg 1 u[ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 v[ a [1:0] $end
$var wire 2 w[ b [1:0] $end
$var wire 2 x[ sum [1:0] $end
$var wire 1 y[ carry0 $end
$var wire 1 z[ Cout $end
$scope module adder0 $end
$var wire 1 {[ Cin $end
$var wire 1 |[ a $end
$var wire 1 }[ b $end
$var reg 1 y[ Cout $end
$var reg 1 ~[ p $end
$var reg 1 !\ q $end
$var reg 1 "\ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 y[ Cin $end
$var wire 1 #\ a $end
$var wire 1 $\ b $end
$var reg 1 z[ Cout $end
$var reg 1 %\ p $end
$var reg 1 &\ q $end
$var reg 1 '\ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 ][ Cin $end
$var wire 1 (\ a $end
$var wire 1 )\ b $end
$var reg 1 *\ Cout $end
$var reg 1 +\ p $end
$var reg 1 ,\ q $end
$var reg 1 -\ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 ][ Cin $end
$var wire 1 .\ a $end
$var wire 1 /\ b $end
$var reg 1 0\ Cout $end
$var reg 1 1\ p $end
$var reg 1 2\ q $end
$var reg 1 3\ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 ][ Cin $end
$var wire 1 4\ a $end
$var wire 1 5\ b $end
$var reg 1 6\ Cout $end
$var reg 1 7\ p $end
$var reg 1 8\ q $end
$var reg 1 9\ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 ][ Cin $end
$var wire 1 :\ a $end
$var wire 1 ;\ b $end
$var reg 1 <\ Cout $end
$var reg 1 =\ p $end
$var reg 1 >\ q $end
$var reg 1 ?\ sum $end
$upscope $end
$scope module total $end
$var wire 3 @\ a [2:0] $end
$var wire 3 A\ b [2:0] $end
$var wire 1 B\ gnd $end
$var wire 3 C\ sum [2:0] $end
$var wire 1 D\ carry1 $end
$var wire 1 E\ carry0 $end
$var wire 1 F\ Cout $end
$scope module adder0 $end
$var wire 1 B\ Cin $end
$var wire 1 G\ a $end
$var wire 1 H\ b $end
$var reg 1 E\ Cout $end
$var reg 1 I\ p $end
$var reg 1 J\ q $end
$var reg 1 K\ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 E\ Cin $end
$var wire 1 L\ a $end
$var wire 1 M\ b $end
$var reg 1 D\ Cout $end
$var reg 1 N\ p $end
$var reg 1 O\ q $end
$var reg 1 P\ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 D\ Cin $end
$var wire 1 Q\ a $end
$var wire 1 R\ b $end
$var reg 1 F\ Cout $end
$var reg 1 S\ p $end
$var reg 1 T\ q $end
$var reg 1 U\ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 V\ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 W\ state_0 $end
$var wire 4 X\ living_neighbors [3:0] $end
$var reg 1 Y\ state_d $end
$var reg 1 Z\ state_q $end
$var reg 1 [\ stay_alive $end
$scope module living $end
$var wire 1 \\ gnd $end
$var wire 8 ]\ in [7:0] $end
$var wire 3 ^\ sum1 [2:0] $end
$var wire 3 _\ sum0 [2:0] $end
$var wire 4 `\ num [3:0] $end
$var wire 2 a\ count3 [1:0] $end
$var wire 2 b\ count2 [1:0] $end
$var wire 2 c\ count1 [1:0] $end
$var wire 2 d\ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 e\ a [1:0] $end
$var wire 2 f\ b [1:0] $end
$var wire 2 g\ sum [1:0] $end
$var wire 1 h\ carry0 $end
$var wire 1 i\ Cout $end
$scope module adder0 $end
$var wire 1 j\ Cin $end
$var wire 1 k\ a $end
$var wire 1 l\ b $end
$var reg 1 h\ Cout $end
$var reg 1 m\ p $end
$var reg 1 n\ q $end
$var reg 1 o\ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 h\ Cin $end
$var wire 1 p\ a $end
$var wire 1 q\ b $end
$var reg 1 i\ Cout $end
$var reg 1 r\ p $end
$var reg 1 s\ q $end
$var reg 1 t\ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 u\ a [1:0] $end
$var wire 2 v\ b [1:0] $end
$var wire 2 w\ sum [1:0] $end
$var wire 1 x\ carry0 $end
$var wire 1 y\ Cout $end
$scope module adder0 $end
$var wire 1 z\ Cin $end
$var wire 1 {\ a $end
$var wire 1 |\ b $end
$var reg 1 x\ Cout $end
$var reg 1 }\ p $end
$var reg 1 ~\ q $end
$var reg 1 !] sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 x\ Cin $end
$var wire 1 "] a $end
$var wire 1 #] b $end
$var reg 1 y\ Cout $end
$var reg 1 $] p $end
$var reg 1 %] q $end
$var reg 1 &] sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 \\ Cin $end
$var wire 1 '] a $end
$var wire 1 (] b $end
$var reg 1 )] Cout $end
$var reg 1 *] p $end
$var reg 1 +] q $end
$var reg 1 ,] sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 \\ Cin $end
$var wire 1 -] a $end
$var wire 1 .] b $end
$var reg 1 /] Cout $end
$var reg 1 0] p $end
$var reg 1 1] q $end
$var reg 1 2] sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 \\ Cin $end
$var wire 1 3] a $end
$var wire 1 4] b $end
$var reg 1 5] Cout $end
$var reg 1 6] p $end
$var reg 1 7] q $end
$var reg 1 8] sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 \\ Cin $end
$var wire 1 9] a $end
$var wire 1 :] b $end
$var reg 1 ;] Cout $end
$var reg 1 <] p $end
$var reg 1 =] q $end
$var reg 1 >] sum $end
$upscope $end
$scope module total $end
$var wire 3 ?] a [2:0] $end
$var wire 3 @] b [2:0] $end
$var wire 1 A] gnd $end
$var wire 3 B] sum [2:0] $end
$var wire 1 C] carry1 $end
$var wire 1 D] carry0 $end
$var wire 1 E] Cout $end
$scope module adder0 $end
$var wire 1 A] Cin $end
$var wire 1 F] a $end
$var wire 1 G] b $end
$var reg 1 D] Cout $end
$var reg 1 H] p $end
$var reg 1 I] q $end
$var reg 1 J] sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 D] Cin $end
$var wire 1 K] a $end
$var wire 1 L] b $end
$var reg 1 C] Cout $end
$var reg 1 M] p $end
$var reg 1 N] q $end
$var reg 1 O] sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 C] Cin $end
$var wire 1 P] a $end
$var wire 1 Q] b $end
$var reg 1 E] Cout $end
$var reg 1 R] p $end
$var reg 1 S] q $end
$var reg 1 T] sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 U] neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 V] state_0 $end
$var wire 4 W] living_neighbors [3:0] $end
$var reg 1 X] state_d $end
$var reg 1 Y] state_q $end
$var reg 1 Z] stay_alive $end
$scope module living $end
$var wire 1 [] gnd $end
$var wire 8 \] in [7:0] $end
$var wire 3 ]] sum1 [2:0] $end
$var wire 3 ^] sum0 [2:0] $end
$var wire 4 _] num [3:0] $end
$var wire 2 `] count3 [1:0] $end
$var wire 2 a] count2 [1:0] $end
$var wire 2 b] count1 [1:0] $end
$var wire 2 c] count0 [1:0] $end
$scope module adder0 $end
$var wire 2 d] a [1:0] $end
$var wire 2 e] b [1:0] $end
$var wire 2 f] sum [1:0] $end
$var wire 1 g] carry0 $end
$var wire 1 h] Cout $end
$scope module adder0 $end
$var wire 1 i] Cin $end
$var wire 1 j] a $end
$var wire 1 k] b $end
$var reg 1 g] Cout $end
$var reg 1 l] p $end
$var reg 1 m] q $end
$var reg 1 n] sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 g] Cin $end
$var wire 1 o] a $end
$var wire 1 p] b $end
$var reg 1 h] Cout $end
$var reg 1 q] p $end
$var reg 1 r] q $end
$var reg 1 s] sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 t] a [1:0] $end
$var wire 2 u] b [1:0] $end
$var wire 2 v] sum [1:0] $end
$var wire 1 w] carry0 $end
$var wire 1 x] Cout $end
$scope module adder0 $end
$var wire 1 y] Cin $end
$var wire 1 z] a $end
$var wire 1 {] b $end
$var reg 1 w] Cout $end
$var reg 1 |] p $end
$var reg 1 }] q $end
$var reg 1 ~] sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 w] Cin $end
$var wire 1 !^ a $end
$var wire 1 "^ b $end
$var reg 1 x] Cout $end
$var reg 1 #^ p $end
$var reg 1 $^ q $end
$var reg 1 %^ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 [] Cin $end
$var wire 1 &^ a $end
$var wire 1 '^ b $end
$var reg 1 (^ Cout $end
$var reg 1 )^ p $end
$var reg 1 *^ q $end
$var reg 1 +^ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 [] Cin $end
$var wire 1 ,^ a $end
$var wire 1 -^ b $end
$var reg 1 .^ Cout $end
$var reg 1 /^ p $end
$var reg 1 0^ q $end
$var reg 1 1^ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 [] Cin $end
$var wire 1 2^ a $end
$var wire 1 3^ b $end
$var reg 1 4^ Cout $end
$var reg 1 5^ p $end
$var reg 1 6^ q $end
$var reg 1 7^ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 [] Cin $end
$var wire 1 8^ a $end
$var wire 1 9^ b $end
$var reg 1 :^ Cout $end
$var reg 1 ;^ p $end
$var reg 1 <^ q $end
$var reg 1 =^ sum $end
$upscope $end
$scope module total $end
$var wire 3 >^ a [2:0] $end
$var wire 3 ?^ b [2:0] $end
$var wire 1 @^ gnd $end
$var wire 3 A^ sum [2:0] $end
$var wire 1 B^ carry1 $end
$var wire 1 C^ carry0 $end
$var wire 1 D^ Cout $end
$scope module adder0 $end
$var wire 1 @^ Cin $end
$var wire 1 E^ a $end
$var wire 1 F^ b $end
$var reg 1 C^ Cout $end
$var reg 1 G^ p $end
$var reg 1 H^ q $end
$var reg 1 I^ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 C^ Cin $end
$var wire 1 J^ a $end
$var wire 1 K^ b $end
$var reg 1 B^ Cout $end
$var reg 1 L^ p $end
$var reg 1 M^ q $end
$var reg 1 N^ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 B^ Cin $end
$var wire 1 O^ a $end
$var wire 1 P^ b $end
$var reg 1 D^ Cout $end
$var reg 1 Q^ p $end
$var reg 1 R^ q $end
$var reg 1 S^ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 T^ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 U^ state_0 $end
$var wire 4 V^ living_neighbors [3:0] $end
$var reg 1 W^ state_d $end
$var reg 1 X^ state_q $end
$var reg 1 Y^ stay_alive $end
$scope module living $end
$var wire 1 Z^ gnd $end
$var wire 8 [^ in [7:0] $end
$var wire 3 \^ sum1 [2:0] $end
$var wire 3 ]^ sum0 [2:0] $end
$var wire 4 ^^ num [3:0] $end
$var wire 2 _^ count3 [1:0] $end
$var wire 2 `^ count2 [1:0] $end
$var wire 2 a^ count1 [1:0] $end
$var wire 2 b^ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 c^ a [1:0] $end
$var wire 2 d^ b [1:0] $end
$var wire 2 e^ sum [1:0] $end
$var wire 1 f^ carry0 $end
$var wire 1 g^ Cout $end
$scope module adder0 $end
$var wire 1 h^ Cin $end
$var wire 1 i^ a $end
$var wire 1 j^ b $end
$var reg 1 f^ Cout $end
$var reg 1 k^ p $end
$var reg 1 l^ q $end
$var reg 1 m^ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 f^ Cin $end
$var wire 1 n^ a $end
$var wire 1 o^ b $end
$var reg 1 g^ Cout $end
$var reg 1 p^ p $end
$var reg 1 q^ q $end
$var reg 1 r^ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 s^ a [1:0] $end
$var wire 2 t^ b [1:0] $end
$var wire 2 u^ sum [1:0] $end
$var wire 1 v^ carry0 $end
$var wire 1 w^ Cout $end
$scope module adder0 $end
$var wire 1 x^ Cin $end
$var wire 1 y^ a $end
$var wire 1 z^ b $end
$var reg 1 v^ Cout $end
$var reg 1 {^ p $end
$var reg 1 |^ q $end
$var reg 1 }^ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 v^ Cin $end
$var wire 1 ~^ a $end
$var wire 1 !_ b $end
$var reg 1 w^ Cout $end
$var reg 1 "_ p $end
$var reg 1 #_ q $end
$var reg 1 $_ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 Z^ Cin $end
$var wire 1 %_ a $end
$var wire 1 &_ b $end
$var reg 1 '_ Cout $end
$var reg 1 (_ p $end
$var reg 1 )_ q $end
$var reg 1 *_ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 Z^ Cin $end
$var wire 1 +_ a $end
$var wire 1 ,_ b $end
$var reg 1 -_ Cout $end
$var reg 1 ._ p $end
$var reg 1 /_ q $end
$var reg 1 0_ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 Z^ Cin $end
$var wire 1 1_ a $end
$var wire 1 2_ b $end
$var reg 1 3_ Cout $end
$var reg 1 4_ p $end
$var reg 1 5_ q $end
$var reg 1 6_ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 Z^ Cin $end
$var wire 1 7_ a $end
$var wire 1 8_ b $end
$var reg 1 9_ Cout $end
$var reg 1 :_ p $end
$var reg 1 ;_ q $end
$var reg 1 <_ sum $end
$upscope $end
$scope module total $end
$var wire 3 =_ a [2:0] $end
$var wire 3 >_ b [2:0] $end
$var wire 1 ?_ gnd $end
$var wire 3 @_ sum [2:0] $end
$var wire 1 A_ carry1 $end
$var wire 1 B_ carry0 $end
$var wire 1 C_ Cout $end
$scope module adder0 $end
$var wire 1 ?_ Cin $end
$var wire 1 D_ a $end
$var wire 1 E_ b $end
$var reg 1 B_ Cout $end
$var reg 1 F_ p $end
$var reg 1 G_ q $end
$var reg 1 H_ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 B_ Cin $end
$var wire 1 I_ a $end
$var wire 1 J_ b $end
$var reg 1 A_ Cout $end
$var reg 1 K_ p $end
$var reg 1 L_ q $end
$var reg 1 M_ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 A_ Cin $end
$var wire 1 N_ a $end
$var wire 1 O_ b $end
$var reg 1 C_ Cout $end
$var reg 1 P_ p $end
$var reg 1 Q_ q $end
$var reg 1 R_ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 S_ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 T_ state_0 $end
$var wire 4 U_ living_neighbors [3:0] $end
$var reg 1 V_ state_d $end
$var reg 1 W_ state_q $end
$var reg 1 X_ stay_alive $end
$scope module living $end
$var wire 1 Y_ gnd $end
$var wire 8 Z_ in [7:0] $end
$var wire 3 [_ sum1 [2:0] $end
$var wire 3 \_ sum0 [2:0] $end
$var wire 4 ]_ num [3:0] $end
$var wire 2 ^_ count3 [1:0] $end
$var wire 2 __ count2 [1:0] $end
$var wire 2 `_ count1 [1:0] $end
$var wire 2 a_ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 b_ a [1:0] $end
$var wire 2 c_ b [1:0] $end
$var wire 2 d_ sum [1:0] $end
$var wire 1 e_ carry0 $end
$var wire 1 f_ Cout $end
$scope module adder0 $end
$var wire 1 g_ Cin $end
$var wire 1 h_ a $end
$var wire 1 i_ b $end
$var reg 1 e_ Cout $end
$var reg 1 j_ p $end
$var reg 1 k_ q $end
$var reg 1 l_ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 e_ Cin $end
$var wire 1 m_ a $end
$var wire 1 n_ b $end
$var reg 1 f_ Cout $end
$var reg 1 o_ p $end
$var reg 1 p_ q $end
$var reg 1 q_ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 r_ a [1:0] $end
$var wire 2 s_ b [1:0] $end
$var wire 2 t_ sum [1:0] $end
$var wire 1 u_ carry0 $end
$var wire 1 v_ Cout $end
$scope module adder0 $end
$var wire 1 w_ Cin $end
$var wire 1 x_ a $end
$var wire 1 y_ b $end
$var reg 1 u_ Cout $end
$var reg 1 z_ p $end
$var reg 1 {_ q $end
$var reg 1 |_ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 u_ Cin $end
$var wire 1 }_ a $end
$var wire 1 ~_ b $end
$var reg 1 v_ Cout $end
$var reg 1 !` p $end
$var reg 1 "` q $end
$var reg 1 #` sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 Y_ Cin $end
$var wire 1 $` a $end
$var wire 1 %` b $end
$var reg 1 &` Cout $end
$var reg 1 '` p $end
$var reg 1 (` q $end
$var reg 1 )` sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 Y_ Cin $end
$var wire 1 *` a $end
$var wire 1 +` b $end
$var reg 1 ,` Cout $end
$var reg 1 -` p $end
$var reg 1 .` q $end
$var reg 1 /` sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 Y_ Cin $end
$var wire 1 0` a $end
$var wire 1 1` b $end
$var reg 1 2` Cout $end
$var reg 1 3` p $end
$var reg 1 4` q $end
$var reg 1 5` sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 Y_ Cin $end
$var wire 1 6` a $end
$var wire 1 7` b $end
$var reg 1 8` Cout $end
$var reg 1 9` p $end
$var reg 1 :` q $end
$var reg 1 ;` sum $end
$upscope $end
$scope module total $end
$var wire 3 <` a [2:0] $end
$var wire 3 =` b [2:0] $end
$var wire 1 >` gnd $end
$var wire 3 ?` sum [2:0] $end
$var wire 1 @` carry1 $end
$var wire 1 A` carry0 $end
$var wire 1 B` Cout $end
$scope module adder0 $end
$var wire 1 >` Cin $end
$var wire 1 C` a $end
$var wire 1 D` b $end
$var reg 1 A` Cout $end
$var reg 1 E` p $end
$var reg 1 F` q $end
$var reg 1 G` sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 A` Cin $end
$var wire 1 H` a $end
$var wire 1 I` b $end
$var reg 1 @` Cout $end
$var reg 1 J` p $end
$var reg 1 K` q $end
$var reg 1 L` sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 @` Cin $end
$var wire 1 M` a $end
$var wire 1 N` b $end
$var reg 1 B` Cout $end
$var reg 1 O` p $end
$var reg 1 P` q $end
$var reg 1 Q` sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[9] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$scope begin genblk2[6] $end
$upscope $end
$scope begin genblk2[7] $end
$upscope $end
$scope module LED_DRIVER $end
$var wire 64 R` cells [63:0] $end
$var wire 1 S` ena $end
$var wire 4 T` x [3:0] $end
$var wire 8 U` x_decoded [7:0] $end
$var reg 8 V` cols [7:0] $end
$var reg 8 W` rows [7:0] $end
$scope module COL_DECODER $end
$var wire 1 S` ena $end
$var wire 3 X` in [2:0] $end
$var wire 8 Y` out [7:0] $end
$var wire 4 Z` ena1 [3:0] $end
$scope module dec0 $end
$var wire 1 [` ena $end
$var wire 2 \` in [1:0] $end
$var wire 4 ]` out [3:0] $end
$var wire 2 ^` ena1 [1:0] $end
$scope module dec0 $end
$var wire 1 _` ena $end
$var wire 1 `` in $end
$var reg 2 a` out [1:0] $end
$upscope $end
$scope module dec1 $end
$var wire 1 b` ena $end
$var wire 1 c` in $end
$var reg 2 d` out [1:0] $end
$upscope $end
$scope module switcher $end
$var wire 1 [` ena $end
$var wire 1 e` in $end
$var reg 2 f` out [1:0] $end
$upscope $end
$upscope $end
$scope module dec1 $end
$var wire 1 g` ena $end
$var wire 2 h` in [1:0] $end
$var wire 4 i` out [3:0] $end
$var wire 2 j` ena1 [1:0] $end
$scope module dec0 $end
$var wire 1 k` ena $end
$var wire 1 l` in $end
$var reg 2 m` out [1:0] $end
$upscope $end
$scope module dec1 $end
$var wire 1 n` ena $end
$var wire 1 o` in $end
$var reg 2 p` out [1:0] $end
$upscope $end
$scope module switcher $end
$var wire 1 g` ena $end
$var wire 1 q` in $end
$var reg 2 r` out [1:0] $end
$upscope $end
$upscope $end
$scope module switcher $end
$var wire 1 S` ena $end
$var wire 1 s` in $end
$var reg 2 t` out [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin clocks_and_dividers $end
$upscope $end
$scope begin io_logic $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx t`
xs`
bx r`
xq`
bx p`
xo`
xn`
bx m`
xl`
xk`
bx j`
bx i`
bx h`
xg`
bx f`
xe`
bx d`
xc`
xb`
bx a`
x``
x_`
bx ^`
bx ]`
bx \`
x[`
b0xx Z`
bx Y`
bx X`
bx W`
bx V`
bx U`
bx T`
1S`
bx R`
xQ`
0P`
0O`
0N`
0M`
xL`
0K`
xJ`
xI`
0H`
xG`
xF`
xE`
xD`
xC`
0B`
xA`
x@`
bx ?`
0>`
b0xx =`
b0x <`
x;`
x:`
x9`
x8`
x7`
x6`
05`
04`
03`
02`
01`
00`
0/`
0.`
0-`
0,`
0+`
0*`
x)`
0(`
x'`
0&`
0%`
x$`
x#`
0"`
x!`
x~_
0}_
x|_
0{_
xz_
xy_
0x_
0w_
0v_
0u_
bx t_
bx s_
b0 r_
0q_
0p_
0o_
0n_
0m_
xl_
0k_
xj_
0i_
xh_
0g_
0f_
0e_
b0x d_
b0 c_
b0x b_
b0x a_
b0 `_
b0 __
bx ^_
b0xxx ]_
b0x \_
b0xx [_
bx00000x Z_
0Y_
xX_
xW_
xV_
b0xxx U_
0T_
bx00000x S_
xR_
0Q_
xP_
xO_
0N_
xM_
0L_
xK_
xJ_
0I_
xH_
xG_
xF_
xE_
xD_
xC_
xB_
xA_
bx @_
0?_
bx >_
b0x =_
x<_
x;_
x:_
x9_
x8_
x7_
x6_
x5_
x4_
x3_
x2_
x1_
00_
0/_
0._
0-_
0,_
0+_
x*_
0)_
x(_
0'_
0&_
x%_
x$_
x#_
x"_
x!_
x~^
x}^
x|^
x{^
xz^
xy^
0x^
xw^
xv^
bx u^
bx t^
bx s^
0r^
0q^
0p^
0o^
0n^
xm^
0l^
xk^
0j^
xi^
0h^
0g^
0f^
b0x e^
b0 d^
b0x c^
b0x b^
b0 a^
bx `^
bx _^
bx ^^
b0x ]^
bx \^
bx000x [^
0Z^
xY^
xX^
xW^
bx V^
0U^
bx000x T^
xS^
0R^
xQ^
xP^
0O^
xN^
0M^
xL^
xK^
0J^
xI^
xH^
xG^
xF^
xE^
xD^
xC^
xB^
bx A^
0@^
bx ?^
b0x >^
x=^
x<^
x;^
x:^
x9^
x8^
x7^
x6^
x5^
x4^
x3^
x2^
01^
00^
0/^
0.^
0-^
0,^
x+^
0*^
x)^
0(^
0'^
x&^
x%^
x$^
x#^
x"^
x!^
x~]
x}]
x|]
x{]
xz]
0y]
xx]
xw]
bx v]
bx u]
bx t]
0s]
0r]
0q]
0p]
0o]
xn]
0m]
xl]
0k]
xj]
0i]
0h]
0g]
b0x f]
b0 e]
b0x d]
b0x c]
b0 b]
bx a]
bx `]
bx _]
b0x ^]
bx ]]
bx000x \]
0[]
xZ]
xY]
xX]
bx W]
0V]
bx000x U]
xT]
0S]
xR]
xQ]
0P]
xO]
0N]
xM]
xL]
0K]
xJ]
xI]
xH]
xG]
xF]
xE]
xD]
xC]
bx B]
0A]
bx @]
b0x ?]
x>]
x=]
x<]
x;]
x:]
x9]
x8]
x7]
x6]
x5]
x4]
x3]
02]
01]
00]
0/]
0.]
0-]
x,]
0+]
x*]
0)]
0(]
x']
x&]
x%]
x$]
x#]
x"]
x!]
x~\
x}\
x|\
x{\
0z\
xy\
xx\
bx w\
bx v\
bx u\
0t\
0s\
0r\
0q\
0p\
xo\
0n\
xm\
0l\
xk\
0j\
0i\
0h\
b0x g\
b0 f\
b0x e\
b0x d\
b0 c\
bx b\
bx a\
bx `\
b0x _\
bx ^\
bx000x ]\
0\\
x[\
xZ\
xY\
bx X\
0W\
bx000x V\
xU\
0T\
xS\
xR\
0Q\
xP\
0O\
xN\
xM\
0L\
xK\
xJ\
xI\
xH\
xG\
xF\
xE\
xD\
bx C\
0B\
bx A\
b0x @\
x?\
x>\
x=\
x<\
x;\
x:\
x9\
x8\
x7\
x6\
x5\
x4\
03\
02\
01\
00\
0/\
0.\
x-\
0,\
x+\
0*\
0)\
x(\
x'\
x&\
x%\
x$\
x#\
x"\
x!\
x~[
x}[
x|[
0{[
xz[
xy[
bx x[
bx w[
bx v[
0u[
0t[
0s[
0r[
0q[
xp[
0o[
xn[
0m[
xl[
0k[
0j[
0i[
b0x h[
b0 g[
b0x f[
b0x e[
b0 d[
bx c[
bx b[
bx a[
b0x `[
bx _[
bx000x ^[
0][
x\[
x[[
xZ[
bx Y[
0X[
bx000x W[
xV[
0U[
xT[
xS[
0R[
xQ[
0P[
xO[
xN[
0M[
xL[
xK[
xJ[
xI[
xH[
xG[
xF[
xE[
bx D[
0C[
bx B[
b0x A[
x@[
x?[
x>[
x=[
x<[
x;[
x:[
x9[
x8[
x7[
x6[
x5[
04[
03[
02[
01[
00[
0/[
x.[
0-[
x,[
0+[
0*[
x)[
x([
x'[
x&[
x%[
x$[
x#[
x"[
x![
x~Z
x}Z
0|Z
x{Z
xzZ
bx yZ
bx xZ
bx wZ
0vZ
0uZ
0tZ
0sZ
0rZ
xqZ
0pZ
xoZ
0nZ
xmZ
0lZ
0kZ
0jZ
b0x iZ
b0 hZ
b0x gZ
b0x fZ
b0 eZ
bx dZ
bx cZ
bx bZ
b0x aZ
bx `Z
bx000x _Z
0^Z
x]Z
x\Z
x[Z
bx ZZ
0YZ
bx000x XZ
xWZ
0VZ
xUZ
xTZ
0SZ
xRZ
0QZ
xPZ
xOZ
0NZ
xMZ
xLZ
xKZ
xJZ
xIZ
xHZ
xGZ
xFZ
bx EZ
0DZ
bx CZ
b0x BZ
xAZ
x@Z
x?Z
x>Z
x=Z
x<Z
x;Z
x:Z
x9Z
x8Z
x7Z
x6Z
05Z
04Z
03Z
02Z
01Z
00Z
x/Z
0.Z
x-Z
0,Z
0+Z
x*Z
x)Z
x(Z
x'Z
x&Z
x%Z
x$Z
x#Z
x"Z
x!Z
x~Y
0}Y
x|Y
x{Y
bx zY
bx yY
bx xY
0wY
0vY
0uY
0tY
0sY
xrY
0qY
xpY
0oY
xnY
0mY
0lY
0kY
b0x jY
b0 iY
b0x hY
b0x gY
b0 fY
bx eY
bx dY
bx cY
b0x bY
bx aY
bx000x `Y
0_Y
x^Y
x]Y
x\Y
bx [Y
0ZY
bx000x YY
xXY
0WY
xVY
xUY
0TY
xSY
0RY
xQY
xPY
0OY
xNY
0MY
xLY
xKY
0JY
0IY
0HY
0GY
bx FY
0EY
bx DY
b0 CY
xBY
0AY
x@Y
0?Y
0>Y
x=Y
x<Y
x;Y
x:Y
x9Y
x8Y
x7Y
06Y
05Y
04Y
03Y
02Y
01Y
00Y
0/Y
0.Y
0-Y
0,Y
0+Y
x*Y
0)Y
x(Y
0'Y
x&Y
x%Y
x$Y
x#Y
x"Y
x!Y
0~X
x}X
x|X
bx {X
b0x zX
bx yX
0xX
0wX
0vX
0uX
0tX
0sX
0rX
0qX
0pX
0oX
0nX
0mX
0lX
b0 kX
b0 jX
b0 iX
b0 hX
b0 gX
bx fX
b0x eX
b0xxx dX
b0 cX
bx bX
b0xxx0000 aX
0`X
x_X
x^X
x]X
b0xxx \X
0[X
b0xxx0000 ZX
xYX
0XX
xWX
0VX
xUX
xTX
xSX
xRX
xQX
xPX
xOX
xNX
xMX
xLX
xKX
xJX
xIX
xHX
bx GX
0FX
b0xx EX
bx DX
xCX
xBX
xAX
x@X
x?X
x>X
0=X
0<X
0;X
0:X
09X
08X
x7X
06X
x5X
04X
03X
x2X
x1X
x0X
x/X
x.X
x-X
x,X
x+X
0*X
x)X
x(X
0'X
x&X
0%X
x$X
x#X
0"X
0!X
0~W
0}W
bx |W
bx {W
b0 zW
xyW
0xW
xwW
0vW
xuW
xtW
xsW
xrW
xqW
xpW
0oW
xnW
xmW
bx lW
b0x kW
bx jW
bx iW
b0x hW
b0 gW
bx fW
bx eW
bx dW
b0xx cW
bx000xxx bW
0aW
x`W
x_W
x^W
bx ]W
0\W
bx000xxx [W
xZW
xYW
xXW
xWW
xVW
xUW
xTW
xSW
xRW
xQW
xPW
xOW
xNW
xMW
xLW
xKW
xJW
xIW
bx HW
0GW
bx FW
bx EW
xDW
xCW
xBW
xAW
x@W
x?W
x>W
x=W
x<W
x;W
x:W
x9W
x8W
x7W
x6W
x5W
x4W
x3W
x2W
x1W
x0W
x/W
x.W
x-W
x,W
x+W
x*W
x)W
x(W
x'W
x&W
x%W
x$W
x#W
0"W
x!W
x~V
bx }V
bx |V
bx {V
xzV
xyV
xxV
xwV
xvV
xuV
xtV
xsV
xrV
xqV
0pV
xoV
xnV
bx mV
bx lV
bx kV
bx jV
bx iV
bx hV
bx gV
bx fV
bx eV
bx dV
bx cV
0bV
xaV
x`V
x_V
bx ^V
0]V
bx \V
x[V
xZV
xYV
xXV
xWV
xVV
xUV
xTV
xSV
xRV
xQV
xPV
xOV
xNV
xMV
xLV
xKV
xJV
bx IV
0HV
bx GV
bx FV
xEV
xDV
xCV
xBV
xAV
x@V
x?V
x>V
x=V
x<V
x;V
x:V
x9V
x8V
x7V
x6V
x5V
x4V
x3V
x2V
x1V
x0V
x/V
x.V
x-V
x,V
x+V
x*V
x)V
x(V
x'V
x&V
x%V
x$V
0#V
x"V
x!V
bx ~U
bx }U
bx |U
x{U
xzU
xyU
xxU
xwU
xvU
xuU
xtU
xsU
xrU
0qU
xpU
xoU
bx nU
bx mU
bx lU
bx kU
bx jU
bx iU
bx hU
bx gU
bx fU
bx eU
bx dU
0cU
xbU
xaU
x`U
bx _U
1^U
bx ]U
x\U
x[U
xZU
xYU
xXU
xWU
xVU
xUU
xTU
xSU
xRU
xQU
xPU
xOU
xNU
xMU
xLU
xKU
bx JU
0IU
bx HU
bx GU
xFU
xEU
xDU
xCU
xBU
xAU
x@U
x?U
x>U
x=U
x<U
x;U
x:U
x9U
x8U
x7U
x6U
x5U
x4U
x3U
x2U
x1U
x0U
x/U
x.U
x-U
x,U
x+U
x*U
x)U
x(U
x'U
x&U
x%U
0$U
x#U
x"U
bx !U
bx ~T
bx }T
x|T
x{T
xzT
xyT
xxT
xwT
xvT
xuT
xtT
xsT
0rT
xqT
xpT
bx oT
bx nT
bx mT
bx lT
bx kT
bx jT
bx iT
bx hT
bx gT
bx fT
bx eT
0dT
xcT
xbT
xaT
bx `T
0_T
bx ^T
x]T
x\T
x[T
xZT
xYT
xXT
xWT
xVT
xUT
xTT
xST
xRT
xQT
xPT
xOT
xNT
xMT
xLT
bx KT
0JT
bx IT
bx HT
xGT
xFT
xET
xDT
xCT
xBT
xAT
x@T
x?T
x>T
x=T
x<T
x;T
x:T
x9T
x8T
x7T
x6T
x5T
x4T
x3T
x2T
x1T
x0T
x/T
x.T
x-T
x,T
x+T
x*T
x)T
x(T
x'T
x&T
0%T
x$T
x#T
bx "T
bx !T
bx ~S
x}S
x|S
x{S
xzS
xyS
xxS
xwS
xvS
xuS
xtS
0sS
xrS
xqS
bx pS
bx oS
bx nS
bx mS
bx lS
bx kS
bx jS
bx iS
bx hS
bx gS
bx fS
0eS
xdS
xcS
xbS
bx aS
0`S
bx _S
x^S
x]S
x\S
x[S
xZS
xYS
xXS
xWS
xVS
xUS
xTS
xSS
xRS
xQS
xPS
xOS
xNS
xMS
bx LS
0KS
bx JS
bx IS
xHS
xGS
xFS
xES
xDS
xCS
xBS
xAS
x@S
x?S
x>S
x=S
x<S
x;S
x:S
x9S
x8S
x7S
x6S
x5S
x4S
x3S
x2S
x1S
x0S
x/S
x.S
x-S
x,S
x+S
x*S
x)S
x(S
x'S
0&S
x%S
x$S
bx #S
bx "S
bx !S
x~R
x}R
x|R
x{R
xzR
xyR
xxR
xwR
xvR
xuR
0tR
xsR
xrR
bx qR
bx pR
bx oR
bx nR
bx mR
bx lR
bx kR
bx jR
bx iR
bx hR
bx gR
0fR
xeR
xdR
xcR
bx bR
0aR
bx `R
x_R
x^R
x]R
x\R
x[R
xZR
xYR
xXR
xWR
xVR
xUR
xTR
xSR
xRR
xQR
xPR
xOR
xNR
bx MR
0LR
bx KR
bx JR
xIR
xHR
xGR
xFR
xER
xDR
xCR
xBR
xAR
x@R
x?R
x>R
x=R
x<R
x;R
x:R
x9R
x8R
x7R
x6R
x5R
x4R
x3R
x2R
x1R
x0R
x/R
x.R
x-R
x,R
x+R
x*R
x)R
x(R
0'R
x&R
x%R
bx $R
bx #R
bx "R
x!R
x~Q
x}Q
x|Q
x{Q
xzQ
xyQ
xxQ
xwQ
xvQ
0uQ
xtQ
xsQ
bx rQ
bx qQ
bx pQ
bx oQ
bx nQ
bx mQ
bx lQ
bx kQ
bx jQ
bx iQ
bx hQ
0gQ
xfQ
xeQ
xdQ
bx cQ
0bQ
bx aQ
x`Q
0_Q
x^Q
x]Q
0\Q
x[Q
xZQ
xYQ
xXQ
xWQ
xVQ
xUQ
xTQ
xSQ
xRQ
xQQ
xPQ
xOQ
bx NQ
0MQ
bx LQ
b0xx KQ
xJQ
0IQ
xHQ
0GQ
0FQ
xEQ
xDQ
xCQ
xBQ
xAQ
x@Q
x?Q
x>Q
x=Q
x<Q
x;Q
x:Q
x9Q
08Q
07Q
06Q
05Q
04Q
03Q
x2Q
01Q
x0Q
0/Q
x.Q
x-Q
x,Q
x+Q
x*Q
x)Q
0(Q
x'Q
x&Q
bx %Q
b0x $Q
bx #Q
x"Q
0!Q
x~P
x}P
0|P
x{P
0zP
xyP
xxP
0wP
0vP
0uP
0tP
bx sP
bx rP
b0 qP
b0 pP
bx oP
bx nP
b0x mP
bx lP
b0xx kP
bx jP
b0xxxxx00 iP
0hP
xgP
xfP
xeP
bx dP
0cP
b0xxxxx00 bP
xaP
0`P
x_P
0^P
x]P
x\P
x[P
xZP
xYP
xXP
xWP
xVP
xUP
xTP
xSP
xRP
xQP
xPP
bx OP
0NP
b0xx MP
bx LP
xKP
xJP
xIP
xHP
xGP
xFP
0EP
0DP
0CP
0BP
0AP
0@P
x?P
0>P
x=P
0<P
0;P
x:P
x9P
x8P
x7P
x6P
x5P
x4P
x3P
02P
x1P
x0P
0/P
x.P
0-P
x,P
x+P
0*P
0)P
0(P
0'P
bx &P
bx %P
b0 $P
x#P
0"P
x!P
0~O
x}O
x|O
x{O
xzO
xyO
xxO
0wO
xvO
xuO
bx tO
b0x sO
bx rO
bx qO
b0x pO
b0 oO
bx nO
bx mO
bx lO
b0xx kO
bx000xxx jO
0iO
xhO
xgO
xfO
bx eO
1dO
bx000xxx cO
xbO
xaO
x`O
x_O
x^O
x]O
x\O
x[O
xZO
xYO
xXO
xWO
xVO
xUO
xTO
xSO
xRO
xQO
bx PO
0OO
bx NO
bx MO
xLO
xKO
xJO
xIO
xHO
xGO
xFO
xEO
xDO
xCO
xBO
xAO
x@O
x?O
x>O
x=O
x<O
x;O
x:O
x9O
x8O
x7O
x6O
x5O
x4O
x3O
x2O
x1O
x0O
x/O
x.O
x-O
x,O
x+O
0*O
x)O
x(O
bx 'O
bx &O
bx %O
x$O
x#O
x"O
x!O
x~N
x}N
x|N
x{N
xzN
xyN
0xN
xwN
xvN
bx uN
bx tN
bx sN
bx rN
bx qN
bx pN
bx oN
bx nN
bx mN
bx lN
bx kN
0jN
xiN
xhN
xgN
bx fN
0eN
bx dN
xcN
xbN
xaN
x`N
x_N
x^N
x]N
x\N
x[N
xZN
xYN
xXN
xWN
xVN
xUN
xTN
xSN
xRN
bx QN
0PN
bx ON
bx NN
xMN
xLN
xKN
xJN
xIN
xHN
xGN
xFN
xEN
xDN
xCN
xBN
xAN
x@N
x?N
x>N
x=N
x<N
x;N
x:N
x9N
x8N
x7N
x6N
x5N
x4N
x3N
x2N
x1N
x0N
x/N
x.N
x-N
x,N
0+N
x*N
x)N
bx (N
bx 'N
bx &N
x%N
x$N
x#N
x"N
x!N
x~M
x}M
x|M
x{M
xzM
0yM
xxM
xwM
bx vM
bx uM
bx tM
bx sM
bx rM
bx qM
bx pM
bx oM
bx nM
bx mM
bx lM
0kM
xjM
xiM
xhM
bx gM
1fM
bx eM
xdM
xcM
xbM
xaM
x`M
x_M
x^M
x]M
x\M
x[M
xZM
xYM
xXM
xWM
xVM
xUM
xTM
xSM
bx RM
0QM
bx PM
bx OM
xNM
xMM
xLM
xKM
xJM
xIM
xHM
xGM
xFM
xEM
xDM
xCM
xBM
xAM
x@M
x?M
x>M
x=M
x<M
x;M
x:M
x9M
x8M
x7M
x6M
x5M
x4M
x3M
x2M
x1M
x0M
x/M
x.M
x-M
0,M
x+M
x*M
bx )M
bx (M
bx 'M
x&M
x%M
x$M
x#M
x"M
x!M
x~L
x}L
x|L
x{L
0zL
xyL
xxL
bx wL
bx vL
bx uL
bx tL
bx sL
bx rL
bx qL
bx pL
bx oL
bx nL
bx mL
0lL
xkL
xjL
xiL
bx hL
0gL
bx fL
xeL
xdL
xcL
xbL
xaL
x`L
x_L
x^L
x]L
x\L
x[L
xZL
xYL
xXL
xWL
xVL
xUL
xTL
bx SL
0RL
bx QL
bx PL
xOL
xNL
xML
xLL
xKL
xJL
xIL
xHL
xGL
xFL
xEL
xDL
xCL
xBL
xAL
x@L
x?L
x>L
x=L
x<L
x;L
x:L
x9L
x8L
x7L
x6L
x5L
x4L
x3L
x2L
x1L
x0L
x/L
x.L
0-L
x,L
x+L
bx *L
bx )L
bx (L
x'L
x&L
x%L
x$L
x#L
x"L
x!L
x~K
x}K
x|K
0{K
xzK
xyK
bx xK
bx wK
bx vK
bx uK
bx tK
bx sK
bx rK
bx qK
bx pK
bx oK
bx nK
0mK
xlK
xkK
xjK
bx iK
0hK
bx gK
xfK
xeK
xdK
xcK
xbK
xaK
x`K
x_K
x^K
x]K
x\K
x[K
xZK
xYK
xXK
xWK
xVK
xUK
bx TK
0SK
bx RK
bx QK
xPK
xOK
xNK
xMK
xLK
xKK
xJK
xIK
xHK
xGK
xFK
xEK
xDK
xCK
xBK
xAK
x@K
x?K
x>K
x=K
x<K
x;K
x:K
x9K
x8K
x7K
x6K
x5K
x4K
x3K
x2K
x1K
x0K
x/K
0.K
x-K
x,K
bx +K
bx *K
bx )K
x(K
x'K
x&K
x%K
x$K
x#K
x"K
x!K
x~J
x}J
0|J
x{J
xzJ
bx yJ
bx xJ
bx wJ
bx vJ
bx uJ
bx tJ
bx sJ
bx rJ
bx qJ
bx pJ
bx oJ
0nJ
xmJ
xlJ
xkJ
bx jJ
0iJ
bx hJ
xgJ
xfJ
xeJ
xdJ
xcJ
xbJ
xaJ
x`J
x_J
x^J
x]J
x\J
x[J
xZJ
xYJ
xXJ
xWJ
xVJ
bx UJ
0TJ
bx SJ
bx RJ
xQJ
xPJ
xOJ
xNJ
xMJ
xLJ
xKJ
xJJ
xIJ
xHJ
xGJ
xFJ
xEJ
xDJ
xCJ
xBJ
xAJ
x@J
x?J
x>J
x=J
x<J
x;J
x:J
x9J
x8J
x7J
x6J
x5J
x4J
x3J
x2J
x1J
x0J
0/J
x.J
x-J
bx ,J
bx +J
bx *J
x)J
x(J
x'J
x&J
x%J
x$J
x#J
x"J
x!J
x~I
0}I
x|I
x{I
bx zI
bx yI
bx xI
bx wI
bx vI
bx uI
bx tI
bx sI
bx rI
bx qI
bx pI
0oI
xnI
xmI
xlI
bx kI
0jI
bx iI
xhI
0gI
xfI
xeI
0dI
xcI
xbI
xaI
x`I
x_I
x^I
x]I
x\I
x[I
xZI
xYI
xXI
xWI
bx VI
0UI
bx TI
b0xx SI
xRI
0QI
xPI
0OI
0NI
xMI
xLI
xKI
xJI
xII
xHI
xGI
xFI
xEI
xDI
xCI
xBI
xAI
0@I
0?I
0>I
0=I
0<I
0;I
x:I
09I
x8I
07I
x6I
x5I
x4I
x3I
x2I
x1I
00I
x/I
x.I
bx -I
b0x ,I
bx +I
x*I
0)I
x(I
x'I
0&I
x%I
0$I
x#I
x"I
0!I
0~H
0}H
0|H
bx {H
bx zH
b0 yH
b0 xH
bx wH
bx vH
b0x uH
bx tH
b0xx sH
bx rH
b0xxxxx00 qH
0pH
xoH
xnH
xmH
bx lH
0kH
b0xxxxx00 jH
xiH
0hH
xgH
0fH
xeH
xdH
xcH
xbH
xaH
x`H
x_H
x^H
x]H
x\H
x[H
xZH
xYH
xXH
bx WH
0VH
b0xx UH
bx TH
xSH
xRH
xQH
xPH
xOH
xNH
0MH
0LH
0KH
0JH
0IH
0HH
xGH
0FH
xEH
0DH
0CH
xBH
xAH
x@H
x?H
x>H
x=H
x<H
x;H
0:H
x9H
x8H
07H
x6H
05H
x4H
x3H
02H
01H
00H
0/H
bx .H
bx -H
b0 ,H
x+H
0*H
x)H
0(H
x'H
x&H
x%H
x$H
x#H
x"H
0!H
x~G
x}G
bx |G
b0x {G
bx zG
bx yG
b0x xG
b0 wG
bx vG
bx uG
bx tG
b0xx sG
bx000xxx rG
0qG
xpG
xoG
xnG
bx mG
0lG
bx000xxx kG
xjG
xiG
xhG
xgG
xfG
xeG
xdG
xcG
xbG
xaG
x`G
x_G
x^G
x]G
x\G
x[G
xZG
xYG
bx XG
0WG
bx VG
bx UG
xTG
xSG
xRG
xQG
xPG
xOG
xNG
xMG
xLG
xKG
xJG
xIG
xHG
xGG
xFG
xEG
xDG
xCG
xBG
xAG
x@G
x?G
x>G
x=G
x<G
x;G
x:G
x9G
x8G
x7G
x6G
x5G
x4G
x3G
02G
x1G
x0G
bx /G
bx .G
bx -G
x,G
x+G
x*G
x)G
x(G
x'G
x&G
x%G
x$G
x#G
0"G
x!G
x~F
bx }F
bx |F
bx {F
bx zF
bx yF
bx xF
bx wF
bx vF
bx uF
bx tF
bx sF
0rF
xqF
xpF
xoF
bx nF
1mF
bx lF
xkF
xjF
xiF
xhF
xgF
xfF
xeF
xdF
xcF
xbF
xaF
x`F
x_F
x^F
x]F
x\F
x[F
xZF
bx YF
0XF
bx WF
bx VF
xUF
xTF
xSF
xRF
xQF
xPF
xOF
xNF
xMF
xLF
xKF
xJF
xIF
xHF
xGF
xFF
xEF
xDF
xCF
xBF
xAF
x@F
x?F
x>F
x=F
x<F
x;F
x:F
x9F
x8F
x7F
x6F
x5F
x4F
03F
x2F
x1F
bx 0F
bx /F
bx .F
x-F
x,F
x+F
x*F
x)F
x(F
x'F
x&F
x%F
x$F
0#F
x"F
x!F
bx ~E
bx }E
bx |E
bx {E
bx zE
bx yE
bx xE
bx wE
bx vE
bx uE
bx tE
0sE
xrE
xqE
xpE
bx oE
1nE
bx mE
xlE
xkE
xjE
xiE
xhE
xgE
xfE
xeE
xdE
xcE
xbE
xaE
x`E
x_E
x^E
x]E
x\E
x[E
bx ZE
0YE
bx XE
bx WE
xVE
xUE
xTE
xSE
xRE
xQE
xPE
xOE
xNE
xME
xLE
xKE
xJE
xIE
xHE
xGE
xFE
xEE
xDE
xCE
xBE
xAE
x@E
x?E
x>E
x=E
x<E
x;E
x:E
x9E
x8E
x7E
x6E
x5E
04E
x3E
x2E
bx 1E
bx 0E
bx /E
x.E
x-E
x,E
x+E
x*E
x)E
x(E
x'E
x&E
x%E
0$E
x#E
x"E
bx !E
bx ~D
bx }D
bx |D
bx {D
bx zD
bx yD
bx xD
bx wD
bx vD
bx uD
0tD
xsD
xrD
xqD
bx pD
0oD
bx nD
xmD
xlD
xkD
xjD
xiD
xhD
xgD
xfD
xeD
xdD
xcD
xbD
xaD
x`D
x_D
x^D
x]D
x\D
bx [D
0ZD
bx YD
bx XD
xWD
xVD
xUD
xTD
xSD
xRD
xQD
xPD
xOD
xND
xMD
xLD
xKD
xJD
xID
xHD
xGD
xFD
xED
xDD
xCD
xBD
xAD
x@D
x?D
x>D
x=D
x<D
x;D
x:D
x9D
x8D
x7D
x6D
05D
x4D
x3D
bx 2D
bx 1D
bx 0D
x/D
x.D
x-D
x,D
x+D
x*D
x)D
x(D
x'D
x&D
0%D
x$D
x#D
bx "D
bx !D
bx ~C
bx }C
bx |C
bx {C
bx zC
bx yC
bx xC
bx wC
bx vC
0uC
xtC
xsC
xrC
bx qC
0pC
bx oC
xnC
xmC
xlC
xkC
xjC
xiC
xhC
xgC
xfC
xeC
xdC
xcC
xbC
xaC
x`C
x_C
x^C
x]C
bx \C
0[C
bx ZC
bx YC
xXC
xWC
xVC
xUC
xTC
xSC
xRC
xQC
xPC
xOC
xNC
xMC
xLC
xKC
xJC
xIC
xHC
xGC
xFC
xEC
xDC
xCC
xBC
xAC
x@C
x?C
x>C
x=C
x<C
x;C
x:C
x9C
x8C
x7C
06C
x5C
x4C
bx 3C
bx 2C
bx 1C
x0C
x/C
x.C
x-C
x,C
x+C
x*C
x)C
x(C
x'C
0&C
x%C
x$C
bx #C
bx "C
bx !C
bx ~B
bx }B
bx |B
bx {B
bx zB
bx yB
bx xB
bx wB
0vB
xuB
xtB
xsB
bx rB
0qB
bx pB
xoB
xnB
xmB
xlB
xkB
xjB
xiB
xhB
xgB
xfB
xeB
xdB
xcB
xbB
xaB
x`B
x_B
x^B
bx ]B
0\B
bx [B
bx ZB
xYB
xXB
xWB
xVB
xUB
xTB
xSB
xRB
xQB
xPB
xOB
xNB
xMB
xLB
xKB
xJB
xIB
xHB
xGB
xFB
xEB
xDB
xCB
xBB
xAB
x@B
x?B
x>B
x=B
x<B
x;B
x:B
x9B
x8B
07B
x6B
x5B
bx 4B
bx 3B
bx 2B
x1B
x0B
x/B
x.B
x-B
x,B
x+B
x*B
x)B
x(B
0'B
x&B
x%B
bx $B
bx #B
bx "B
bx !B
bx ~A
bx }A
bx |A
bx {A
bx zA
bx yA
bx xA
0wA
xvA
xuA
xtA
bx sA
0rA
bx qA
xpA
0oA
xnA
xmA
0lA
xkA
xjA
xiA
xhA
xgA
xfA
xeA
xdA
xcA
xbA
xaA
x`A
x_A
bx ^A
0]A
bx \A
b0xx [A
xZA
0YA
xXA
0WA
0VA
xUA
xTA
xSA
xRA
xQA
xPA
xOA
xNA
xMA
xLA
xKA
xJA
xIA
0HA
0GA
0FA
0EA
0DA
0CA
xBA
0AA
x@A
0?A
x>A
x=A
x<A
x;A
x:A
x9A
08A
x7A
x6A
bx 5A
b0x 4A
bx 3A
x2A
01A
x0A
x/A
0.A
x-A
0,A
x+A
x*A
0)A
0(A
0'A
0&A
bx %A
bx $A
b0 #A
b0 "A
bx !A
bx ~@
b0x }@
bx |@
b0xx {@
bx z@
b0xxxxx00 y@
0x@
xw@
xv@
xu@
bx t@
0s@
b0xxxxx00 r@
xq@
0p@
xo@
0n@
xm@
xl@
xk@
xj@
xi@
xh@
xg@
xf@
xe@
xd@
xc@
xb@
xa@
x`@
bx _@
0^@
b0xx ]@
bx \@
x[@
xZ@
xY@
xX@
xW@
xV@
0U@
0T@
0S@
0R@
0Q@
0P@
xO@
0N@
xM@
0L@
0K@
xJ@
xI@
xH@
xG@
xF@
xE@
xD@
xC@
0B@
xA@
x@@
0?@
x>@
0=@
x<@
x;@
0:@
09@
08@
07@
bx 6@
bx 5@
b0 4@
x3@
02@
x1@
00@
x/@
x.@
x-@
x,@
x+@
x*@
0)@
x(@
x'@
bx &@
b0x %@
bx $@
bx #@
b0x "@
b0 !@
bx ~?
bx }?
bx |?
b0xx {?
bx000xxx z?
0y?
xx?
xw?
xv?
bx u?
0t?
bx000xxx s?
xr?
xq?
xp?
xo?
xn?
xm?
xl?
xk?
xj?
xi?
xh?
xg?
xf?
xe?
xd?
xc?
xb?
xa?
bx `?
0_?
bx ^?
bx ]?
x\?
x[?
xZ?
xY?
xX?
xW?
xV?
xU?
xT?
xS?
xR?
xQ?
xP?
xO?
xN?
xM?
xL?
xK?
xJ?
xI?
xH?
xG?
xF?
xE?
xD?
xC?
xB?
xA?
x@?
x??
x>?
x=?
x<?
x;?
0:?
x9?
x8?
bx 7?
bx 6?
bx 5?
x4?
x3?
x2?
x1?
x0?
x/?
x.?
x-?
x,?
x+?
0*?
x)?
x(?
bx '?
bx &?
bx %?
bx $?
bx #?
bx "?
bx !?
bx ~>
bx }>
bx |>
bx {>
0z>
xy>
xx>
xw>
bx v>
0u>
bx t>
xs>
xr>
xq>
xp>
xo>
xn>
xm>
xl>
xk>
xj>
xi>
xh>
xg>
xf>
xe>
xd>
xc>
xb>
bx a>
0`>
bx _>
bx ^>
x]>
x\>
x[>
xZ>
xY>
xX>
xW>
xV>
xU>
xT>
xS>
xR>
xQ>
xP>
xO>
xN>
xM>
xL>
xK>
xJ>
xI>
xH>
xG>
xF>
xE>
xD>
xC>
xB>
xA>
x@>
x?>
x>>
x=>
x<>
0;>
x:>
x9>
bx 8>
bx 7>
bx 6>
x5>
x4>
x3>
x2>
x1>
x0>
x/>
x.>
x->
x,>
0+>
x*>
x)>
bx (>
bx '>
bx &>
bx %>
bx $>
bx #>
bx ">
bx !>
bx ~=
bx }=
bx |=
0{=
xz=
xy=
xx=
bx w=
0v=
bx u=
xt=
xs=
xr=
xq=
xp=
xo=
xn=
xm=
xl=
xk=
xj=
xi=
xh=
xg=
xf=
xe=
xd=
xc=
bx b=
0a=
bx `=
bx _=
x^=
x]=
x\=
x[=
xZ=
xY=
xX=
xW=
xV=
xU=
xT=
xS=
xR=
xQ=
xP=
xO=
xN=
xM=
xL=
xK=
xJ=
xI=
xH=
xG=
xF=
xE=
xD=
xC=
xB=
xA=
x@=
x?=
x>=
x==
0<=
x;=
x:=
bx 9=
bx 8=
bx 7=
x6=
x5=
x4=
x3=
x2=
x1=
x0=
x/=
x.=
x-=
0,=
x+=
x*=
bx )=
bx (=
bx '=
bx &=
bx %=
bx $=
bx #=
bx "=
bx !=
bx ~<
bx }<
0|<
x{<
xz<
xy<
bx x<
0w<
bx v<
xu<
xt<
xs<
xr<
xq<
xp<
xo<
xn<
xm<
xl<
xk<
xj<
xi<
xh<
xg<
xf<
xe<
xd<
bx c<
0b<
bx a<
bx `<
x_<
x^<
x]<
x\<
x[<
xZ<
xY<
xX<
xW<
xV<
xU<
xT<
xS<
xR<
xQ<
xP<
xO<
xN<
xM<
xL<
xK<
xJ<
xI<
xH<
xG<
xF<
xE<
xD<
xC<
xB<
xA<
x@<
x?<
x><
0=<
x<<
x;<
bx :<
bx 9<
bx 8<
x7<
x6<
x5<
x4<
x3<
x2<
x1<
x0<
x/<
x.<
0-<
x,<
x+<
bx *<
bx )<
bx (<
bx '<
bx &<
bx %<
bx $<
bx #<
bx "<
bx !<
bx ~;
0};
x|;
x{;
xz;
bx y;
0x;
bx w;
xv;
xu;
xt;
xs;
xr;
xq;
xp;
xo;
xn;
xm;
xl;
xk;
xj;
xi;
xh;
xg;
xf;
xe;
bx d;
0c;
bx b;
bx a;
x`;
x_;
x^;
x];
x\;
x[;
xZ;
xY;
xX;
xW;
xV;
xU;
xT;
xS;
xR;
xQ;
xP;
xO;
xN;
xM;
xL;
xK;
xJ;
xI;
xH;
xG;
xF;
xE;
xD;
xC;
xB;
xA;
x@;
x?;
0>;
x=;
x<;
bx ;;
bx :;
bx 9;
x8;
x7;
x6;
x5;
x4;
x3;
x2;
x1;
x0;
x/;
0.;
x-;
x,;
bx +;
bx *;
bx );
bx (;
bx ';
bx &;
bx %;
bx $;
bx #;
bx ";
bx !;
0~:
x}:
x|:
x{:
bx z:
0y:
bx x:
xw:
xv:
xu:
xt:
xs:
xr:
xq:
xp:
xo:
xn:
xm:
xl:
xk:
xj:
xi:
xh:
xg:
xf:
bx e:
0d:
bx c:
bx b:
xa:
x`:
x_:
x^:
x]:
x\:
x[:
xZ:
xY:
xX:
xW:
xV:
xU:
xT:
xS:
xR:
xQ:
xP:
xO:
xN:
xM:
xL:
xK:
xJ:
xI:
xH:
xG:
xF:
xE:
xD:
xC:
xB:
xA:
x@:
0?:
x>:
x=:
bx <:
bx ;:
bx ::
x9:
x8:
x7:
x6:
x5:
x4:
x3:
x2:
x1:
x0:
0/:
x.:
x-:
bx ,:
bx +:
bx *:
bx ):
bx (:
bx ':
bx &:
bx %:
bx $:
bx #:
bx ":
0!:
x~9
x}9
x|9
bx {9
0z9
bx y9
xx9
0w9
xv9
xu9
0t9
xs9
xr9
xq9
xp9
xo9
xn9
xm9
xl9
xk9
xj9
xi9
xh9
xg9
bx f9
0e9
bx d9
b0xx c9
xb9
0a9
x`9
0_9
0^9
x]9
x\9
x[9
xZ9
xY9
xX9
xW9
xV9
xU9
xT9
xS9
xR9
xQ9
0P9
0O9
0N9
0M9
0L9
0K9
xJ9
0I9
xH9
0G9
xF9
xE9
xD9
xC9
xB9
xA9
0@9
x?9
x>9
bx =9
b0x <9
bx ;9
x:9
099
x89
x79
069
x59
049
x39
x29
019
009
0/9
0.9
bx -9
bx ,9
b0 +9
b0 *9
bx )9
bx (9
b0x '9
bx &9
b0xx %9
bx $9
b0xxxxx00 #9
0"9
x!9
x~8
x}8
bx |8
0{8
b0xxxxx00 z8
xy8
0x8
xw8
0v8
xu8
xt8
xs8
xr8
xq8
xp8
xo8
xn8
xm8
xl8
xk8
xj8
xi8
xh8
bx g8
0f8
b0xx e8
bx d8
xc8
xb8
xa8
x`8
x_8
x^8
0]8
0\8
0[8
0Z8
0Y8
0X8
xW8
0V8
xU8
0T8
0S8
xR8
xQ8
xP8
xO8
xN8
xM8
xL8
xK8
0J8
xI8
xH8
0G8
xF8
0E8
xD8
xC8
0B8
0A8
0@8
0?8
bx >8
bx =8
b0 <8
x;8
0:8
x98
088
x78
x68
x58
x48
x38
x28
018
x08
x/8
bx .8
b0x -8
bx ,8
bx +8
b0x *8
b0 )8
bx (8
bx '8
bx &8
b0xx %8
bx000xxx $8
0#8
x"8
x!8
x~7
bx }7
0|7
bx000xxx {7
xz7
xy7
xx7
xw7
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
xn7
xm7
xl7
xk7
xj7
xi7
bx h7
0g7
bx f7
bx e7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xY7
xX7
xW7
xV7
xU7
xT7
xS7
xR7
xQ7
xP7
xO7
xN7
xM7
xL7
xK7
xJ7
xI7
xH7
xG7
xF7
xE7
xD7
xC7
0B7
xA7
x@7
bx ?7
bx >7
bx =7
x<7
x;7
x:7
x97
x87
x77
x67
x57
x47
x37
027
x17
x07
bx /7
bx .7
bx -7
bx ,7
bx +7
bx *7
bx )7
bx (7
bx '7
bx &7
bx %7
0$7
x#7
x"7
x!7
bx ~6
0}6
bx |6
x{6
xz6
xy6
xx6
xw6
xv6
xu6
xt6
xs6
xr6
xq6
xp6
xo6
xn6
xm6
xl6
xk6
xj6
bx i6
0h6
bx g6
bx f6
xe6
xd6
xc6
xb6
xa6
x`6
x_6
x^6
x]6
x\6
x[6
xZ6
xY6
xX6
xW6
xV6
xU6
xT6
xS6
xR6
xQ6
xP6
xO6
xN6
xM6
xL6
xK6
xJ6
xI6
xH6
xG6
xF6
xE6
xD6
0C6
xB6
xA6
bx @6
bx ?6
bx >6
x=6
x<6
x;6
x:6
x96
x86
x76
x66
x56
x46
036
x26
x16
bx 06
bx /6
bx .6
bx -6
bx ,6
bx +6
bx *6
bx )6
bx (6
bx '6
bx &6
0%6
x$6
x#6
x"6
bx !6
0~5
bx }5
x|5
x{5
xz5
xy5
xx5
xw5
xv5
xu5
xt5
xs5
xr5
xq5
xp5
xo5
xn5
xm5
xl5
xk5
bx j5
0i5
bx h5
bx g5
xf5
xe5
xd5
xc5
xb5
xa5
x`5
x_5
x^5
x]5
x\5
x[5
xZ5
xY5
xX5
xW5
xV5
xU5
xT5
xS5
xR5
xQ5
xP5
xO5
xN5
xM5
xL5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
0D5
xC5
xB5
bx A5
bx @5
bx ?5
x>5
x=5
x<5
x;5
x:5
x95
x85
x75
x65
x55
045
x35
x25
bx 15
bx 05
bx /5
bx .5
bx -5
bx ,5
bx +5
bx *5
bx )5
bx (5
bx '5
0&5
x%5
x$5
x#5
bx "5
0!5
bx ~4
x}4
x|4
x{4
xz4
xy4
xx4
xw4
xv4
xu4
xt4
xs4
xr4
xq4
xp4
xo4
xn4
xm4
xl4
bx k4
0j4
bx i4
bx h4
xg4
xf4
xe4
xd4
xc4
xb4
xa4
x`4
x_4
x^4
x]4
x\4
x[4
xZ4
xY4
xX4
xW4
xV4
xU4
xT4
xS4
xR4
xQ4
xP4
xO4
xN4
xM4
xL4
xK4
xJ4
xI4
xH4
xG4
xF4
0E4
xD4
xC4
bx B4
bx A4
bx @4
x?4
x>4
x=4
x<4
x;4
x:4
x94
x84
x74
x64
054
x44
x34
bx 24
bx 14
bx 04
bx /4
bx .4
bx -4
bx ,4
bx +4
bx *4
bx )4
bx (4
0'4
x&4
x%4
x$4
bx #4
0"4
bx !4
x~3
x}3
x|3
x{3
xz3
xy3
xx3
xw3
xv3
xu3
xt3
xs3
xr3
xq3
xp3
xo3
xn3
xm3
bx l3
0k3
bx j3
bx i3
xh3
xg3
xf3
xe3
xd3
xc3
xb3
xa3
x`3
x_3
x^3
x]3
x\3
x[3
xZ3
xY3
xX3
xW3
xV3
xU3
xT3
xS3
xR3
xQ3
xP3
xO3
xN3
xM3
xL3
xK3
xJ3
xI3
xH3
xG3
0F3
xE3
xD3
bx C3
bx B3
bx A3
x@3
x?3
x>3
x=3
x<3
x;3
x:3
x93
x83
x73
063
x53
x43
bx 33
bx 23
bx 13
bx 03
bx /3
bx .3
bx -3
bx ,3
bx +3
bx *3
bx )3
0(3
x'3
x&3
x%3
bx $3
0#3
bx "3
x!3
x~2
x}2
x|2
x{2
xz2
xy2
xx2
xw2
xv2
xu2
xt2
xs2
xr2
xq2
xp2
xo2
xn2
bx m2
0l2
bx k2
bx j2
xi2
xh2
xg2
xf2
xe2
xd2
xc2
xb2
xa2
x`2
x_2
x^2
x]2
x\2
x[2
xZ2
xY2
xX2
xW2
xV2
xU2
xT2
xS2
xR2
xQ2
xP2
xO2
xN2
xM2
xL2
xK2
xJ2
xI2
xH2
0G2
xF2
xE2
bx D2
bx C2
bx B2
xA2
x@2
x?2
x>2
x=2
x<2
x;2
x:2
x92
x82
072
x62
x52
bx 42
bx 32
bx 22
bx 12
bx 02
bx /2
bx .2
bx -2
bx ,2
bx +2
bx *2
0)2
x(2
x'2
x&2
bx %2
0$2
bx #2
x"2
0!2
x~1
x}1
0|1
x{1
xz1
xy1
xx1
xw1
xv1
xu1
xt1
xs1
xr1
xq1
xp1
xo1
bx n1
0m1
bx l1
b0xx k1
xj1
0i1
xh1
0g1
0f1
xe1
xd1
xc1
xb1
xa1
x`1
x_1
x^1
x]1
x\1
x[1
xZ1
xY1
0X1
0W1
0V1
0U1
0T1
0S1
xR1
0Q1
xP1
0O1
xN1
xM1
xL1
xK1
xJ1
xI1
0H1
xG1
xF1
bx E1
b0x D1
bx C1
xB1
0A1
x@1
x?1
0>1
x=1
0<1
x;1
x:1
091
081
071
061
bx 51
bx 41
b0 31
b0 21
bx 11
bx 01
b0x /1
bx .1
b0xx -1
bx ,1
b0xxxxx00 +1
0*1
x)1
x(1
x'1
bx &1
0%1
b0xxxxx00 $1
x#1
0"1
x!1
0~0
x}0
x|0
x{0
xz0
xy0
xx0
xw0
xv0
xu0
xt0
xs0
xr0
xq0
xp0
bx o0
0n0
b0xx m0
bx l0
xk0
xj0
xi0
xh0
xg0
xf0
0e0
0d0
0c0
0b0
0a0
0`0
x_0
0^0
x]0
0\0
0[0
xZ0
xY0
xX0
xW0
xV0
xU0
xT0
xS0
0R0
xQ0
xP0
0O0
xN0
0M0
xL0
xK0
0J0
0I0
0H0
0G0
bx F0
bx E0
b0 D0
xC0
0B0
xA0
0@0
x?0
x>0
x=0
x<0
x;0
x:0
090
x80
x70
bx 60
b0x 50
bx 40
bx 30
b0x 20
b0 10
bx 00
bx /0
bx .0
b0xx -0
bx000xxx ,0
0+0
x*0
x)0
x(0
bx '0
0&0
bx000xxx %0
x$0
x#0
x"0
x!0
x~/
x}/
x|/
x{/
xz/
xy/
xx/
xw/
xv/
xu/
xt/
xs/
xr/
xq/
bx p/
0o/
bx n/
bx m/
xl/
xk/
xj/
xi/
xh/
xg/
xf/
xe/
xd/
xc/
xb/
xa/
x`/
x_/
x^/
x]/
x\/
x[/
xZ/
xY/
xX/
xW/
xV/
xU/
xT/
xS/
xR/
xQ/
xP/
xO/
xN/
xM/
xL/
xK/
0J/
xI/
xH/
bx G/
bx F/
bx E/
xD/
xC/
xB/
xA/
x@/
x?/
x>/
x=/
x</
x;/
0:/
x9/
x8/
bx 7/
bx 6/
bx 5/
bx 4/
bx 3/
bx 2/
bx 1/
bx 0/
bx //
bx ./
bx -/
0,/
x+/
x*/
x)/
bx (/
0'/
bx &/
x%/
x$/
x#/
x"/
x!/
x~.
x}.
x|.
x{.
xz.
xy.
xx.
xw.
xv.
xu.
xt.
xs.
xr.
bx q.
0p.
bx o.
bx n.
xm.
xl.
xk.
xj.
xi.
xh.
xg.
xf.
xe.
xd.
xc.
xb.
xa.
x`.
x_.
x^.
x].
x\.
x[.
xZ.
xY.
xX.
xW.
xV.
xU.
xT.
xS.
xR.
xQ.
xP.
xO.
xN.
xM.
xL.
0K.
xJ.
xI.
bx H.
bx G.
bx F.
xE.
xD.
xC.
xB.
xA.
x@.
x?.
x>.
x=.
x<.
0;.
x:.
x9.
bx 8.
bx 7.
bx 6.
bx 5.
bx 4.
bx 3.
bx 2.
bx 1.
bx 0.
bx /.
bx ..
0-.
x,.
x+.
x*.
bx ).
0(.
bx '.
x&.
x%.
x$.
x#.
x".
x!.
x~-
x}-
x|-
x{-
xz-
xy-
xx-
xw-
xv-
xu-
xt-
xs-
bx r-
0q-
bx p-
bx o-
xn-
xm-
xl-
xk-
xj-
xi-
xh-
xg-
xf-
xe-
xd-
xc-
xb-
xa-
x`-
x_-
x^-
x]-
x\-
x[-
xZ-
xY-
xX-
xW-
xV-
xU-
xT-
xS-
xR-
xQ-
xP-
xO-
xN-
xM-
0L-
xK-
xJ-
bx I-
bx H-
bx G-
xF-
xE-
xD-
xC-
xB-
xA-
x@-
x?-
x>-
x=-
0<-
x;-
x:-
bx 9-
bx 8-
bx 7-
bx 6-
bx 5-
bx 4-
bx 3-
bx 2-
bx 1-
bx 0-
bx /-
0.-
x--
x,-
x+-
bx *-
0)-
bx (-
x'-
x&-
x%-
x$-
x#-
x"-
x!-
x~,
x},
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
bx s,
0r,
bx q,
bx p,
xo,
xn,
xm,
xl,
xk,
xj,
xi,
xh,
xg,
xf,
xe,
xd,
xc,
xb,
xa,
x`,
x_,
x^,
x],
x\,
x[,
xZ,
xY,
xX,
xW,
xV,
xU,
xT,
xS,
xR,
xQ,
xP,
xO,
xN,
0M,
xL,
xK,
bx J,
bx I,
bx H,
xG,
xF,
xE,
xD,
xC,
xB,
xA,
x@,
x?,
x>,
0=,
x<,
x;,
bx :,
bx 9,
bx 8,
bx 7,
bx 6,
bx 5,
bx 4,
bx 3,
bx 2,
bx 1,
bx 0,
0/,
x.,
x-,
x,,
bx +,
0*,
bx ),
x(,
x',
x&,
x%,
x$,
x#,
x",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
bx t+
0s+
bx r+
bx q+
xp+
xo+
xn+
xm+
xl+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
xb+
xa+
x`+
x_+
x^+
x]+
x\+
x[+
xZ+
xY+
xX+
xW+
xV+
xU+
xT+
xS+
xR+
xQ+
xP+
xO+
0N+
xM+
xL+
bx K+
bx J+
bx I+
xH+
xG+
xF+
xE+
xD+
xC+
xB+
xA+
x@+
x?+
0>+
x=+
x<+
bx ;+
bx :+
bx 9+
bx 8+
bx 7+
bx 6+
bx 5+
bx 4+
bx 3+
bx 2+
bx 1+
00+
x/+
x.+
x-+
bx ,+
0++
bx *+
x)+
x(+
x'+
x&+
x%+
x$+
x#+
x"+
x!+
x~*
x}*
x|*
x{*
xz*
xy*
xx*
xw*
xv*
bx u*
0t*
bx s*
bx r*
xq*
xp*
xo*
xn*
xm*
xl*
xk*
xj*
xi*
xh*
xg*
xf*
xe*
xd*
xc*
xb*
xa*
x`*
x_*
x^*
x]*
x\*
x[*
xZ*
xY*
xX*
xW*
xV*
xU*
xT*
xS*
xR*
xQ*
xP*
0O*
xN*
xM*
bx L*
bx K*
bx J*
xI*
xH*
xG*
xF*
xE*
xD*
xC*
xB*
xA*
x@*
0?*
x>*
x=*
bx <*
bx ;*
bx :*
bx 9*
bx 8*
bx 7*
bx 6*
bx 5*
bx 4*
bx 3*
bx 2*
01*
x0*
x/*
x.*
bx -*
0,*
bx +*
x**
0)*
x(*
x'*
0&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xy)
xx)
xw)
bx v)
0u)
bx t)
b0xx s)
xr)
0q)
xp)
0o)
0n)
xm)
xl)
xk)
xj)
xi)
xh)
xg)
xf)
xe)
xd)
xc)
xb)
xa)
0`)
0_)
0^)
0])
0\)
0[)
xZ)
0Y)
xX)
0W)
xV)
xU)
xT)
xS)
xR)
xQ)
0P)
xO)
xN)
bx M)
b0x L)
bx K)
xJ)
0I)
xH)
xG)
0F)
xE)
0D)
xC)
xB)
0A)
0@)
0?)
0>)
bx =)
bx <)
b0 ;)
b0 :)
bx 9)
bx 8)
b0x 7)
bx 6)
b0xx 5)
bx 4)
b0xxxxx00 3)
02)
x1)
x0)
x/)
bx .)
0-)
b0xxxxx00 ,)
x+)
0*)
x))
0()
x')
x&)
0%)
x$)
0#)
x")
x!)
0~(
x}(
0|(
x{(
0z(
0y(
0x(
bx w(
0v(
b0 u(
bx t(
0s(
0r(
0q(
0p(
0o(
0n(
0m(
0l(
0k(
0j(
0i(
0h(
xg(
0f(
xe(
0d(
0c(
xb(
xa(
x`(
x_(
x^(
x](
x\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
b0 N(
b0 M(
b0 L(
xK(
0J(
xI(
0H(
xG(
xF(
xE(
xD(
xC(
xB(
0A(
x@(
x?(
bx >(
b0x =(
bx <(
bx ;(
b0x :(
b0 9(
b0 8(
b0xxx 7(
bx 6(
b0 5(
b0xxx 4(
03(
x2(
x1(
x0(
b0xxx /(
0.(
b0xxx -(
x,(
0+(
x*(
0)(
x((
x'(
0&(
x%(
0$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
bx x'
0w'
b0x v'
bx u'
0t'
0s'
0r'
0q'
0p'
0o'
xn'
0m'
xl'
0k'
0j'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
0\'
0['
0Z'
0Y'
0X'
xW'
0V'
xU'
0T'
xS'
0R'
0Q'
0P'
b0x O'
b0 N'
b0x M'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
0B'
xA'
x@'
bx ?'
bx >'
bx ='
bx <'
bx ;'
b0x :'
b0 9'
bx 8'
bx 7'
b0x 6'
b0xxxxx 5'
04'
x3'
x2'
x1'
bx 0'
0/'
b0xxxxx .'
x-'
0,'
x+'
0*'
x)'
x('
0''
x&'
0%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
bx y&
0x&
b0x w&
bx v&
0u&
0t&
0s&
0r&
0q&
0p&
xo&
0n&
xm&
0l&
0k&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
0]&
0\&
0[&
0Z&
0Y&
xX&
0W&
xV&
0U&
xT&
0S&
0R&
0Q&
b0x P&
b0 O&
b0x N&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
0C&
xB&
xA&
bx @&
bx ?&
bx >&
bx =&
bx <&
b0x ;&
b0 :&
bx 9&
bx 8&
b0x 7&
b0xxxxx 6&
05&
x4&
x3&
x2&
bx 1&
00&
b0xxxxx /&
x.&
0-&
x,&
0+&
x*&
x)&
0(&
x'&
0&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
bx z%
0y%
b0x x%
bx w%
0v%
0u%
0t%
0s%
0r%
0q%
xp%
0o%
xn%
0m%
0l%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
0^%
0]%
0\%
0[%
0Z%
xY%
0X%
xW%
0V%
xU%
0T%
0S%
0R%
b0x Q%
b0 P%
b0x O%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
0D%
xC%
xB%
bx A%
bx @%
bx ?%
bx >%
bx =%
b0x <%
b0 ;%
bx :%
bx 9%
b0x 8%
b0xxxxx 7%
06%
x5%
x4%
x3%
bx 2%
01%
b0xxxxx 0%
x/%
0.%
x-%
0,%
x+%
x*%
0)%
x(%
0'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
bx {$
0z$
b0x y$
bx x$
0w$
0v$
0u$
0t$
0s$
0r$
xq$
0p$
xo$
0n$
0m$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
0_$
0^$
0]$
0\$
0[$
xZ$
0Y$
xX$
0W$
xV$
0U$
0T$
0S$
b0x R$
b0 Q$
b0x P$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
0E$
xD$
xC$
bx B$
bx A$
bx @$
bx ?$
bx >$
b0x =$
b0 <$
bx ;$
bx :$
b0x 9$
b0xxxxx 8$
07$
x6$
x5$
x4$
bx 3$
02$
b0xxxxx 1$
x0$
0/$
x.$
0-$
x,$
x+$
0*$
x)$
0($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
bx |#
0{#
b0x z#
bx y#
0x#
0w#
0v#
0u#
0t#
0s#
xr#
0q#
xp#
0o#
0n#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
0`#
0_#
0^#
0]#
0\#
x[#
0Z#
xY#
0X#
xW#
0V#
0U#
0T#
b0x S#
b0 R#
b0x Q#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
0F#
xE#
xD#
bx C#
bx B#
bx A#
bx @#
bx ?#
b0x >#
b0 =#
bx <#
bx ;#
b0x :#
b0xxxxx 9#
08#
x7#
x6#
x5#
bx 4#
03#
b0xxxxx 2#
x1#
00#
x/#
0.#
x-#
x,#
0+#
x*#
0)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
bx }"
0|"
b0x {"
bx z"
0y"
0x"
0w"
0v"
0u"
0t"
xs"
0r"
xq"
0p"
0o"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
0a"
0`"
0_"
0^"
0]"
x\"
0["
xZ"
0Y"
xX"
0W"
0V"
0U"
b0x T"
b0 S"
b0x R"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
0G"
xF"
xE"
bx D"
bx C"
bx B"
bx A"
bx @"
b0x ?"
b0 >"
bx ="
bx <"
b0x ;"
b0xxxxx :"
09"
x8"
x7"
x6"
bx 5"
04"
b0xxxxx 3"
x2"
01"
00"
0/"
0."
x-"
0,"
x+"
0*"
x)"
x("
x'"
x&"
x%"
x$"
0#"
x""
x!"
bx ~
0}
b0x |
b0xx {
0z
0y
0x
0w
0v
0u
xt
0s
xr
0q
0p
xo
xn
xm
xl
xk
xj
xi
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
x]
0\
x[
0Z
xY
0X
0W
0V
b0x U
b0 T
b0x S
xR
0Q
xP
xO
0N
xM
0L
xK
xJ
0I
0H
0G
0F
bx E
bx D
b0 C
b0 B
bx A
b0x @
b0 ?
b0xxx >
b0xx =
b0x <
b0xxx00 ;
0:
x9
x8
x7
b0xxx 6
05
b0xxx00 4
b1001 3
b1001 2
bx 1
x0
1/
1.
b11 -
b10 ,
bx +
bx *
bx )
b10000000010000011100000000000000000000000000000000000000000000 (
b100000000001000000011100000000000000000000000000000000000000000000000000000000000000000 '
b0xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00000000000 &
b0xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00000000000 %
bx $
bx #
0"
b11 !
$end
#5000
1_`
0k`
0n`
0b`
1[`
0g`
b0 j`
b0 r`
b0 p`
b0 i`
b0 m`
b1 ^`
b1 f`
b0 d`
b1 U`
b1 Y`
b1 ]`
b1 a`
b1 Z`
b1 t`
0q`
0o`
0l`
0e`
0c`
0``
0s`
b0 h`
b0 \`
b0 X`
00
b0 1
b0 T`
b0 *
b0 +
1"
#10000
0"
#15000
0/
b111 -
b0 ,
0.
b0 !
1"
#20000
0"
#25000
b1 *
b1 +
1"
#30000
0"
#35000
10
b10 *
b10 +
1"
#40000
0"
#45000
b10 U`
b10 Y`
b10 ]`
b10 a`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b1 X`
00
b1 1
b1 T`
b0 *
b0 +
1"
#50000
0"
#55000
b1 *
b1 +
1"
#60000
0"
#65000
10
b10 *
b10 +
1"
#70000
0"
#75000
b1 d`
0_`
1b`
b10 ^`
b10 f`
b100 U`
b100 Y`
b100 ]`
b0 a`
1q`
0o`
0l`
1e`
0c`
0``
b10 h`
b10 \`
b10 X`
00
b10 1
b10 T`
b0 *
b0 +
1"
#80000
0"
#85000
b1 *
b1 +
1"
#90000
0"
#95000
10
b10 *
b10 +
1"
#100000
0"
#105000
b1000 U`
b1000 Y`
b1000 ]`
b10 d`
1o`
1l`
1c`
1``
b11 h`
b11 \`
b11 X`
00
b11 1
b11 T`
b0 *
b0 +
1"
#110000
0"
#115000
b1 *
b1 +
1"
#120000
0"
#125000
10
b10 *
b10 +
1"
#130000
0"
#135000
b1 i`
b1 m`
1k`
b0 a`
b1 j`
b1 r`
0_`
0b`
0[`
1g`
b0 ^`
b0 f`
b10000 U`
b10000 Y`
b0 ]`
b0 d`
b10 Z`
b10 t`
0q`
0o`
0l`
0e`
0c`
0``
1s`
b0 h`
b0 \`
b100 X`
00
b100 1
b100 T`
b0 *
b0 +
1"
#140000
0"
#145000
b1 *
b1 +
1"
#150000
0"
#155000
10
b10 *
b10 +
1"
#160000
0"
#165000
b100000 U`
b100000 Y`
b10 i`
b10 m`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b101 X`
00
b101 1
b101 T`
b0 *
b0 +
1"
#170000
0"
#175000
b1 *
b1 +
1"
#180000
0"
#185000
10
b10 *
b10 +
1"
#190000
0"
#195000
b1 p`
0k`
1n`
b10 j`
b10 r`
b1000000 U`
b1000000 Y`
b100 i`
b0 m`
1q`
0o`
0l`
1e`
0c`
0``
b10 h`
b10 \`
b110 X`
00
b110 1
b110 T`
b0 *
b0 +
1"
#200000
0"
#205000
b1 *
b1 +
1"
#210000
0"
#215000
10
b10 *
b10 +
1"
#220000
0"
#225000
b10000000 U`
b10000000 Y`
b1000 i`
b10 p`
1o`
1l`
1c`
1``
b11 h`
b11 \`
b111 X`
00
b111 1
b111 T`
b0 *
b0 +
1"
#230000
0"
#235000
b1 *
b1 +
1"
#240000
0"
#245000
10
b10 *
b10 +
1"
#250000
0"
#255000
b1 ]`
b1 a`
1_`
b0 m`
b1 ^`
b1 f`
0k`
0n`
1[`
0g`
b0 j`
b0 r`
b1 U`
b1 Y`
b0 i`
b0 p`
b1 Z`
b1 t`
0q`
0o`
0l`
0e`
0c`
0``
0s`
b0 h`
b0 \`
b0 X`
00
b0 1
b0 T`
b0 *
b0 +
1"
#260000
0"
#265000
b1 *
b1 +
1"
#270000
0"
#275000
10
b10 *
b10 +
1"
#280000
0"
#285000
b10 U`
b10 Y`
b10 ]`
b10 a`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b1 X`
00
b1 1
b1 T`
b0 *
b0 +
1"
#290000
0"
#295000
b1 *
b1 +
1"
#300000
0"
#305000
10
b10 *
b10 +
1"
#310000
0"
#315000
b1 d`
0_`
1b`
b10 ^`
b10 f`
b100 U`
b100 Y`
b100 ]`
b0 a`
1q`
0o`
0l`
1e`
0c`
0``
b10 h`
b10 \`
b10 X`
00
b10 1
b10 T`
b0 *
b0 +
1"
#320000
0"
#325000
b1 *
b1 +
1"
#330000
0"
#335000
10
b10 *
b10 +
1"
#340000
0"
#345000
b1000 U`
b1000 Y`
b1000 ]`
b10 d`
1o`
1l`
1c`
1``
b11 h`
b11 \`
b11 X`
00
b11 1
b11 T`
b0 *
b0 +
1"
#350000
0"
#355000
b1 *
b1 +
1"
#360000
0"
#365000
10
b10 *
b10 +
1"
#370000
0"
#375000
b1 i`
b1 m`
1k`
b0 a`
b1 j`
b1 r`
0_`
0b`
0[`
1g`
b0 ^`
b0 f`
b10000 U`
b10000 Y`
b0 ]`
b0 d`
b10 Z`
b10 t`
0q`
0o`
0l`
0e`
0c`
0``
1s`
b0 h`
b0 \`
b100 X`
00
b100 1
b100 T`
b0 *
b0 +
1"
#380000
0"
#385000
b1 *
b1 +
1"
#390000
0"
#395000
10
b10 *
b10 +
1"
#400000
0"
#405000
b100000 U`
b100000 Y`
b10 i`
b10 m`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b101 X`
00
b101 1
b101 T`
b0 *
b0 +
1"
#410000
0"
#415000
b1 *
b1 +
1"
#420000
0"
#425000
10
b10 *
b10 +
1"
#430000
0"
#435000
b1 p`
0k`
1n`
b10 j`
b10 r`
b1000000 U`
b1000000 Y`
b100 i`
b0 m`
1q`
0o`
0l`
1e`
0c`
0``
b10 h`
b10 \`
b110 X`
00
b110 1
b110 T`
b0 *
b0 +
1"
#440000
0"
#445000
b1 *
b1 +
1"
#450000
0"
#455000
10
b10 *
b10 +
1"
#460000
0"
#465000
b10000000 U`
b10000000 Y`
b1000 i`
b10 p`
1o`
1l`
1c`
1``
b11 h`
b11 \`
b111 X`
00
b111 1
b111 T`
b0 *
b0 +
1"
#470000
0"
#475000
b1 *
b1 +
1"
#480000
0"
#485000
10
b10 *
b10 +
1"
#490000
0"
#495000
b1 ]`
b1 a`
1_`
b0 m`
b1 ^`
b1 f`
0k`
0n`
1[`
0g`
b0 j`
b0 r`
b1 U`
b1 Y`
b0 i`
b0 p`
b1 Z`
b1 t`
0q`
0o`
0l`
0e`
0c`
0``
0s`
b0 h`
b0 \`
b0 X`
00
b0 1
b0 T`
b0 *
b0 +
1"
#500000
0"
#505000
b1 *
b1 +
1"
#510000
0"
#515000
10
b10 *
b10 +
1"
#520000
0"
#525000
b10 U`
b10 Y`
b10 ]`
b10 a`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b1 X`
00
b1 1
b1 T`
b0 *
b0 +
1"
#530000
0"
#535000
b1 *
b1 +
1"
#540000
0"
#545000
10
b10 *
b10 +
1"
#550000
0"
#555000
b1 d`
0_`
1b`
b10 ^`
b10 f`
b100 U`
b100 Y`
b100 ]`
b0 a`
1q`
0o`
0l`
1e`
0c`
0``
b10 h`
b10 \`
b10 X`
00
b10 1
b10 T`
b0 *
b0 +
1"
#560000
0"
#565000
b1 *
b1 +
1"
#570000
0"
#575000
10
b10 *
b10 +
1"
#580000
0"
#585000
b1000 U`
b1000 Y`
b1000 ]`
b10 d`
1o`
1l`
1c`
1``
b11 h`
b11 \`
b11 X`
00
b11 1
b11 T`
b0 *
b0 +
1"
#590000
0"
#595000
b1 *
b1 +
1"
#600000
0"
#605000
10
b10 *
b10 +
1"
#610000
0"
#615000
b1 i`
b1 m`
1k`
b0 a`
b1 j`
b1 r`
0_`
0b`
0[`
1g`
b0 ^`
b0 f`
b10000 U`
b10000 Y`
b0 ]`
b0 d`
b10 Z`
b10 t`
0q`
0o`
0l`
0e`
0c`
0``
1s`
b0 h`
b0 \`
b100 X`
00
b100 1
b100 T`
b0 *
b0 +
1"
#620000
0"
#625000
b1 *
b1 +
1"
#630000
0"
#635000
10
b10 *
b10 +
1"
#640000
0"
#645000
b100000 U`
b100000 Y`
b10 i`
b10 m`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b101 X`
00
b101 1
b101 T`
b0 *
b0 +
1"
#650000
0"
#655000
b1 *
b1 +
1"
#660000
0"
#665000
10
b10 *
b10 +
1"
#670000
0"
#675000
b1 p`
0k`
1n`
b10 j`
b10 r`
b1000000 U`
b1000000 Y`
b100 i`
b0 m`
1q`
0o`
0l`
1e`
0c`
0``
b10 h`
b10 \`
b110 X`
00
b110 1
b110 T`
b0 *
b0 +
1"
#680000
0"
#685000
b1 *
b1 +
1"
#690000
0"
#695000
10
b10 *
b10 +
1"
#700000
0"
#705000
b10000000 U`
b10000000 Y`
b1000 i`
b10 p`
1o`
1l`
1c`
1``
b11 h`
b11 \`
b111 X`
00
b111 1
b111 T`
b0 *
b0 +
1"
#710000
0"
#715000
b1 *
b1 +
1"
#720000
0"
#725000
10
b10 *
b10 +
1"
#730000
0"
#735000
b1 ]`
b1 a`
1_`
b0 m`
b1 ^`
b1 f`
0k`
0n`
1[`
0g`
b0 j`
b0 r`
b1 U`
b1 Y`
b0 i`
b0 p`
b1 Z`
b1 t`
0q`
0o`
0l`
0e`
0c`
0``
0s`
b0 h`
b0 \`
b0 X`
00
b0 1
b0 T`
b0 *
b0 +
1"
#740000
0"
#745000
b1 *
b1 +
1"
#750000
0"
#755000
10
b10 *
b10 +
1"
#760000
0"
#765000
b10 U`
b10 Y`
b10 ]`
b10 a`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b1 X`
00
b1 1
b1 T`
b0 *
b0 +
1"
#770000
0"
#775000
b1 *
b1 +
1"
#780000
0"
#785000
10
b10 *
b10 +
1"
#790000
0"
#795000
b1 d`
0_`
1b`
b10 ^`
b10 f`
b100 U`
b100 Y`
b100 ]`
b0 a`
1q`
0o`
0l`
1e`
0c`
0``
b10 h`
b10 \`
b10 X`
00
b10 1
b10 T`
b0 *
b0 +
1"
#800000
0"
#805000
b1 *
b1 +
1"
#810000
0"
#815000
10
b10 *
b10 +
1"
#820000
0"
#825000
b1000 U`
b1000 Y`
b1000 ]`
b10 d`
1o`
1l`
1c`
1``
b11 h`
b11 \`
b11 X`
00
b11 1
b11 T`
b0 *
b0 +
1"
#830000
0"
#835000
b1 *
b1 +
1"
#840000
0"
#845000
10
b10 *
b10 +
1"
#850000
0"
#855000
b1 i`
b1 m`
1k`
b0 a`
b1 j`
b1 r`
0_`
0b`
0[`
1g`
b0 ^`
b0 f`
b10000 U`
b10000 Y`
b0 ]`
b0 d`
b10 Z`
b10 t`
0q`
0o`
0l`
0e`
0c`
0``
1s`
b0 h`
b0 \`
b100 X`
00
b100 1
b100 T`
b0 *
b0 +
1"
#860000
0"
#865000
b1 *
b1 +
1"
#870000
0"
#875000
10
b10 *
b10 +
1"
#880000
0"
#885000
b100000 U`
b100000 Y`
b10 i`
b10 m`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b101 X`
00
b101 1
b101 T`
b0 *
b0 +
1"
#890000
0"
#895000
b1 *
b1 +
1"
#900000
0"
#905000
10
b10 *
b10 +
1"
#910000
0"
#915000
b1 p`
0k`
1n`
b10 j`
b10 r`
b1000000 U`
b1000000 Y`
b100 i`
b0 m`
1q`
0o`
0l`
1e`
0c`
0``
b10 h`
b10 \`
b110 X`
00
b110 1
b110 T`
b0 *
b0 +
1"
#920000
0"
#925000
b1 *
b1 +
1"
#930000
0"
#935000
10
b10 *
b10 +
1"
#940000
0"
#945000
b10000000 U`
b10000000 Y`
b1000 i`
b10 p`
1o`
1l`
1c`
1``
b11 h`
b11 \`
b111 X`
00
b111 1
b111 T`
b0 *
b0 +
1"
#950000
0"
#955000
b1 *
b1 +
1"
#960000
0"
#965000
10
b10 *
b10 +
1"
#970000
0"
#975000
b1 ]`
b1 a`
1_`
b0 m`
b1 ^`
b1 f`
0k`
0n`
1[`
0g`
b0 j`
b0 r`
b1 U`
b1 Y`
b0 i`
b0 p`
b1 Z`
b1 t`
0q`
0o`
0l`
0e`
0c`
0``
0s`
b0 h`
b0 \`
b0 X`
00
b0 1
b0 T`
b0 *
b0 +
1"
#980000
0"
#985000
b1 *
b1 +
1"
#990000
0"
#995000
10
b10 *
b10 +
1"
#1000000
0"
#1005000
b10 U`
b10 Y`
b10 ]`
b10 a`
1o`
1l`
1c`
1``
b1 h`
b1 \`
b1 X`
00
b1 1
b1 T`
b0 *
b0 +
1"
#1010000
0"
#1015000
b1 *
b1 +
1"
