$date
	Mon Oct  4 18:24:05 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_main $end
$scope module UUT $end
$var wire 2 ! buttons [1:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 5 $ rows [4:0] $end
$var wire 5 % cols [4:0] $end
$var wire 49 & bordered_cells_q [48:0] $end
$var wire 49 ' bordered_cells_d [48:0] $end
$var reg 49 ( bordered_cells_0 [48:0] $end
$var reg 25 ) cells_q [24:0] $end
$var reg 2 * display_counter [1:0] $end
$var reg 2 + game_counter [1:0] $end
$var reg 2 , leds [1:0] $end
$var reg 3 - rgb [2:0] $end
$var reg 1 . step_game $end
$var reg 4 / x [3:0] $end
$scope function cell_index $end
$var integer 32 0 i [31:0] $end
$var integer 32 1 j [31:0] $end
$upscope $end
$scope begin cells_x[0] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[1] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 2 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 3 state_0 $end
$var wire 4 4 living_neighbors [3:0] $end
$var reg 1 5 state_d $end
$var reg 1 6 state_q $end
$var reg 1 7 stay_alive $end
$scope module living $end
$var wire 1 8 gnd $end
$var wire 8 9 in [7:0] $end
$var wire 3 : sum1 [2:0] $end
$var wire 3 ; sum0 [2:0] $end
$var wire 4 < num [3:0] $end
$var wire 2 = count3 [1:0] $end
$var wire 2 > count2 [1:0] $end
$var wire 2 ? count1 [1:0] $end
$var wire 2 @ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 A a [1:0] $end
$var wire 2 B b [1:0] $end
$var wire 2 C sum [1:0] $end
$var wire 1 D carry0 $end
$var wire 1 E Cout $end
$scope module adder0 $end
$var wire 1 F Cin $end
$var wire 1 G a $end
$var wire 1 H b $end
$var reg 1 D Cout $end
$var reg 1 I p $end
$var reg 1 J q $end
$var reg 1 K sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 D Cin $end
$var wire 1 L a $end
$var wire 1 M b $end
$var reg 1 E Cout $end
$var reg 1 N p $end
$var reg 1 O q $end
$var reg 1 P sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 Q a [1:0] $end
$var wire 2 R b [1:0] $end
$var wire 2 S sum [1:0] $end
$var wire 1 T carry0 $end
$var wire 1 U Cout $end
$scope module adder0 $end
$var wire 1 V Cin $end
$var wire 1 W a $end
$var wire 1 X b $end
$var reg 1 T Cout $end
$var reg 1 Y p $end
$var reg 1 Z q $end
$var reg 1 [ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 T Cin $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var reg 1 U Cout $end
$var reg 1 ^ p $end
$var reg 1 _ q $end
$var reg 1 ` sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 8 Cin $end
$var wire 1 a a $end
$var wire 1 b b $end
$var reg 1 c Cout $end
$var reg 1 d p $end
$var reg 1 e q $end
$var reg 1 f sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 8 Cin $end
$var wire 1 g a $end
$var wire 1 h b $end
$var reg 1 i Cout $end
$var reg 1 j p $end
$var reg 1 k q $end
$var reg 1 l sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 8 Cin $end
$var wire 1 m a $end
$var wire 1 n b $end
$var reg 1 o Cout $end
$var reg 1 p p $end
$var reg 1 q q $end
$var reg 1 r sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 8 Cin $end
$var wire 1 s a $end
$var wire 1 t b $end
$var reg 1 u Cout $end
$var reg 1 v p $end
$var reg 1 w q $end
$var reg 1 x sum $end
$upscope $end
$scope module total $end
$var wire 3 y a [2:0] $end
$var wire 3 z b [2:0] $end
$var wire 1 { gnd $end
$var wire 3 | sum [2:0] $end
$var wire 1 } carry1 $end
$var wire 1 ~ carry0 $end
$var wire 1 !" Cout $end
$scope module adder0 $end
$var wire 1 { Cin $end
$var wire 1 "" a $end
$var wire 1 #" b $end
$var reg 1 ~ Cout $end
$var reg 1 $" p $end
$var reg 1 %" q $end
$var reg 1 &" sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ~ Cin $end
$var wire 1 '" a $end
$var wire 1 (" b $end
$var reg 1 } Cout $end
$var reg 1 )" p $end
$var reg 1 *" q $end
$var reg 1 +" sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 } Cin $end
$var wire 1 ," a $end
$var wire 1 -" b $end
$var reg 1 !" Cout $end
$var reg 1 ." p $end
$var reg 1 /" q $end
$var reg 1 0" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 1" neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 2" state_0 $end
$var wire 4 3" living_neighbors [3:0] $end
$var reg 1 4" state_d $end
$var reg 1 5" state_q $end
$var reg 1 6" stay_alive $end
$scope module living $end
$var wire 1 7" gnd $end
$var wire 8 8" in [7:0] $end
$var wire 3 9" sum1 [2:0] $end
$var wire 3 :" sum0 [2:0] $end
$var wire 4 ;" num [3:0] $end
$var wire 2 <" count3 [1:0] $end
$var wire 2 =" count2 [1:0] $end
$var wire 2 >" count1 [1:0] $end
$var wire 2 ?" count0 [1:0] $end
$scope module adder0 $end
$var wire 2 @" a [1:0] $end
$var wire 2 A" b [1:0] $end
$var wire 2 B" sum [1:0] $end
$var wire 1 C" carry0 $end
$var wire 1 D" Cout $end
$scope module adder0 $end
$var wire 1 E" Cin $end
$var wire 1 F" a $end
$var wire 1 G" b $end
$var reg 1 C" Cout $end
$var reg 1 H" p $end
$var reg 1 I" q $end
$var reg 1 J" sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 C" Cin $end
$var wire 1 K" a $end
$var wire 1 L" b $end
$var reg 1 D" Cout $end
$var reg 1 M" p $end
$var reg 1 N" q $end
$var reg 1 O" sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 P" a [1:0] $end
$var wire 2 Q" b [1:0] $end
$var wire 2 R" sum [1:0] $end
$var wire 1 S" carry0 $end
$var wire 1 T" Cout $end
$scope module adder0 $end
$var wire 1 U" Cin $end
$var wire 1 V" a $end
$var wire 1 W" b $end
$var reg 1 S" Cout $end
$var reg 1 X" p $end
$var reg 1 Y" q $end
$var reg 1 Z" sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 S" Cin $end
$var wire 1 [" a $end
$var wire 1 \" b $end
$var reg 1 T" Cout $end
$var reg 1 ]" p $end
$var reg 1 ^" q $end
$var reg 1 _" sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 7" Cin $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var reg 1 b" Cout $end
$var reg 1 c" p $end
$var reg 1 d" q $end
$var reg 1 e" sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 7" Cin $end
$var wire 1 f" a $end
$var wire 1 g" b $end
$var reg 1 h" Cout $end
$var reg 1 i" p $end
$var reg 1 j" q $end
$var reg 1 k" sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 7" Cin $end
$var wire 1 l" a $end
$var wire 1 m" b $end
$var reg 1 n" Cout $end
$var reg 1 o" p $end
$var reg 1 p" q $end
$var reg 1 q" sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 7" Cin $end
$var wire 1 r" a $end
$var wire 1 s" b $end
$var reg 1 t" Cout $end
$var reg 1 u" p $end
$var reg 1 v" q $end
$var reg 1 w" sum $end
$upscope $end
$scope module total $end
$var wire 3 x" a [2:0] $end
$var wire 3 y" b [2:0] $end
$var wire 1 z" gnd $end
$var wire 3 {" sum [2:0] $end
$var wire 1 |" carry1 $end
$var wire 1 }" carry0 $end
$var wire 1 ~" Cout $end
$scope module adder0 $end
$var wire 1 z" Cin $end
$var wire 1 !# a $end
$var wire 1 "# b $end
$var reg 1 }" Cout $end
$var reg 1 ## p $end
$var reg 1 $# q $end
$var reg 1 %# sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 }" Cin $end
$var wire 1 &# a $end
$var wire 1 '# b $end
$var reg 1 |" Cout $end
$var reg 1 (# p $end
$var reg 1 )# q $end
$var reg 1 *# sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 |" Cin $end
$var wire 1 +# a $end
$var wire 1 ,# b $end
$var reg 1 ~" Cout $end
$var reg 1 -# p $end
$var reg 1 .# q $end
$var reg 1 /# sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 0# neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 1# state_0 $end
$var wire 4 2# living_neighbors [3:0] $end
$var reg 1 3# state_d $end
$var reg 1 4# state_q $end
$var reg 1 5# stay_alive $end
$scope module living $end
$var wire 1 6# gnd $end
$var wire 8 7# in [7:0] $end
$var wire 3 8# sum1 [2:0] $end
$var wire 3 9# sum0 [2:0] $end
$var wire 4 :# num [3:0] $end
$var wire 2 ;# count3 [1:0] $end
$var wire 2 <# count2 [1:0] $end
$var wire 2 =# count1 [1:0] $end
$var wire 2 ># count0 [1:0] $end
$scope module adder0 $end
$var wire 2 ?# a [1:0] $end
$var wire 2 @# b [1:0] $end
$var wire 2 A# sum [1:0] $end
$var wire 1 B# carry0 $end
$var wire 1 C# Cout $end
$scope module adder0 $end
$var wire 1 D# Cin $end
$var wire 1 E# a $end
$var wire 1 F# b $end
$var reg 1 B# Cout $end
$var reg 1 G# p $end
$var reg 1 H# q $end
$var reg 1 I# sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 B# Cin $end
$var wire 1 J# a $end
$var wire 1 K# b $end
$var reg 1 C# Cout $end
$var reg 1 L# p $end
$var reg 1 M# q $end
$var reg 1 N# sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 O# a [1:0] $end
$var wire 2 P# b [1:0] $end
$var wire 2 Q# sum [1:0] $end
$var wire 1 R# carry0 $end
$var wire 1 S# Cout $end
$scope module adder0 $end
$var wire 1 T# Cin $end
$var wire 1 U# a $end
$var wire 1 V# b $end
$var reg 1 R# Cout $end
$var reg 1 W# p $end
$var reg 1 X# q $end
$var reg 1 Y# sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 R# Cin $end
$var wire 1 Z# a $end
$var wire 1 [# b $end
$var reg 1 S# Cout $end
$var reg 1 \# p $end
$var reg 1 ]# q $end
$var reg 1 ^# sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 6# Cin $end
$var wire 1 _# a $end
$var wire 1 `# b $end
$var reg 1 a# Cout $end
$var reg 1 b# p $end
$var reg 1 c# q $end
$var reg 1 d# sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 6# Cin $end
$var wire 1 e# a $end
$var wire 1 f# b $end
$var reg 1 g# Cout $end
$var reg 1 h# p $end
$var reg 1 i# q $end
$var reg 1 j# sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 6# Cin $end
$var wire 1 k# a $end
$var wire 1 l# b $end
$var reg 1 m# Cout $end
$var reg 1 n# p $end
$var reg 1 o# q $end
$var reg 1 p# sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 6# Cin $end
$var wire 1 q# a $end
$var wire 1 r# b $end
$var reg 1 s# Cout $end
$var reg 1 t# p $end
$var reg 1 u# q $end
$var reg 1 v# sum $end
$upscope $end
$scope module total $end
$var wire 3 w# a [2:0] $end
$var wire 3 x# b [2:0] $end
$var wire 1 y# gnd $end
$var wire 3 z# sum [2:0] $end
$var wire 1 {# carry1 $end
$var wire 1 |# carry0 $end
$var wire 1 }# Cout $end
$scope module adder0 $end
$var wire 1 y# Cin $end
$var wire 1 ~# a $end
$var wire 1 !$ b $end
$var reg 1 |# Cout $end
$var reg 1 "$ p $end
$var reg 1 #$ q $end
$var reg 1 $$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 |# Cin $end
$var wire 1 %$ a $end
$var wire 1 &$ b $end
$var reg 1 {# Cout $end
$var reg 1 '$ p $end
$var reg 1 ($ q $end
$var reg 1 )$ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 {# Cin $end
$var wire 1 *$ a $end
$var wire 1 +$ b $end
$var reg 1 }# Cout $end
$var reg 1 ,$ p $end
$var reg 1 -$ q $end
$var reg 1 .$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 /$ neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 0$ state_0 $end
$var wire 4 1$ living_neighbors [3:0] $end
$var reg 1 2$ state_d $end
$var reg 1 3$ state_q $end
$var reg 1 4$ stay_alive $end
$scope module living $end
$var wire 1 5$ gnd $end
$var wire 8 6$ in [7:0] $end
$var wire 3 7$ sum1 [2:0] $end
$var wire 3 8$ sum0 [2:0] $end
$var wire 4 9$ num [3:0] $end
$var wire 2 :$ count3 [1:0] $end
$var wire 2 ;$ count2 [1:0] $end
$var wire 2 <$ count1 [1:0] $end
$var wire 2 =$ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 >$ a [1:0] $end
$var wire 2 ?$ b [1:0] $end
$var wire 2 @$ sum [1:0] $end
$var wire 1 A$ carry0 $end
$var wire 1 B$ Cout $end
$scope module adder0 $end
$var wire 1 C$ Cin $end
$var wire 1 D$ a $end
$var wire 1 E$ b $end
$var reg 1 A$ Cout $end
$var reg 1 F$ p $end
$var reg 1 G$ q $end
$var reg 1 H$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 A$ Cin $end
$var wire 1 I$ a $end
$var wire 1 J$ b $end
$var reg 1 B$ Cout $end
$var reg 1 K$ p $end
$var reg 1 L$ q $end
$var reg 1 M$ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 N$ a [1:0] $end
$var wire 2 O$ b [1:0] $end
$var wire 2 P$ sum [1:0] $end
$var wire 1 Q$ carry0 $end
$var wire 1 R$ Cout $end
$scope module adder0 $end
$var wire 1 S$ Cin $end
$var wire 1 T$ a $end
$var wire 1 U$ b $end
$var reg 1 Q$ Cout $end
$var reg 1 V$ p $end
$var reg 1 W$ q $end
$var reg 1 X$ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 Q$ Cin $end
$var wire 1 Y$ a $end
$var wire 1 Z$ b $end
$var reg 1 R$ Cout $end
$var reg 1 [$ p $end
$var reg 1 \$ q $end
$var reg 1 ]$ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 5$ Cin $end
$var wire 1 ^$ a $end
$var wire 1 _$ b $end
$var reg 1 `$ Cout $end
$var reg 1 a$ p $end
$var reg 1 b$ q $end
$var reg 1 c$ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 5$ Cin $end
$var wire 1 d$ a $end
$var wire 1 e$ b $end
$var reg 1 f$ Cout $end
$var reg 1 g$ p $end
$var reg 1 h$ q $end
$var reg 1 i$ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 5$ Cin $end
$var wire 1 j$ a $end
$var wire 1 k$ b $end
$var reg 1 l$ Cout $end
$var reg 1 m$ p $end
$var reg 1 n$ q $end
$var reg 1 o$ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 5$ Cin $end
$var wire 1 p$ a $end
$var wire 1 q$ b $end
$var reg 1 r$ Cout $end
$var reg 1 s$ p $end
$var reg 1 t$ q $end
$var reg 1 u$ sum $end
$upscope $end
$scope module total $end
$var wire 3 v$ a [2:0] $end
$var wire 3 w$ b [2:0] $end
$var wire 1 x$ gnd $end
$var wire 3 y$ sum [2:0] $end
$var wire 1 z$ carry1 $end
$var wire 1 {$ carry0 $end
$var wire 1 |$ Cout $end
$scope module adder0 $end
$var wire 1 x$ Cin $end
$var wire 1 }$ a $end
$var wire 1 ~$ b $end
$var reg 1 {$ Cout $end
$var reg 1 !% p $end
$var reg 1 "% q $end
$var reg 1 #% sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 {$ Cin $end
$var wire 1 $% a $end
$var wire 1 %% b $end
$var reg 1 z$ Cout $end
$var reg 1 &% p $end
$var reg 1 '% q $end
$var reg 1 (% sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 z$ Cin $end
$var wire 1 )% a $end
$var wire 1 *% b $end
$var reg 1 |$ Cout $end
$var reg 1 +% p $end
$var reg 1 ,% q $end
$var reg 1 -% sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 .% neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 /% state_0 $end
$var wire 4 0% living_neighbors [3:0] $end
$var reg 1 1% state_d $end
$var reg 1 2% state_q $end
$var reg 1 3% stay_alive $end
$scope module living $end
$var wire 1 4% gnd $end
$var wire 8 5% in [7:0] $end
$var wire 3 6% sum1 [2:0] $end
$var wire 3 7% sum0 [2:0] $end
$var wire 4 8% num [3:0] $end
$var wire 2 9% count3 [1:0] $end
$var wire 2 :% count2 [1:0] $end
$var wire 2 ;% count1 [1:0] $end
$var wire 2 <% count0 [1:0] $end
$scope module adder0 $end
$var wire 2 =% a [1:0] $end
$var wire 2 >% b [1:0] $end
$var wire 2 ?% sum [1:0] $end
$var wire 1 @% carry0 $end
$var wire 1 A% Cout $end
$scope module adder0 $end
$var wire 1 B% Cin $end
$var wire 1 C% a $end
$var wire 1 D% b $end
$var reg 1 @% Cout $end
$var reg 1 E% p $end
$var reg 1 F% q $end
$var reg 1 G% sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 @% Cin $end
$var wire 1 H% a $end
$var wire 1 I% b $end
$var reg 1 A% Cout $end
$var reg 1 J% p $end
$var reg 1 K% q $end
$var reg 1 L% sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 M% a [1:0] $end
$var wire 2 N% b [1:0] $end
$var wire 2 O% sum [1:0] $end
$var wire 1 P% carry0 $end
$var wire 1 Q% Cout $end
$scope module adder0 $end
$var wire 1 R% Cin $end
$var wire 1 S% a $end
$var wire 1 T% b $end
$var reg 1 P% Cout $end
$var reg 1 U% p $end
$var reg 1 V% q $end
$var reg 1 W% sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 P% Cin $end
$var wire 1 X% a $end
$var wire 1 Y% b $end
$var reg 1 Q% Cout $end
$var reg 1 Z% p $end
$var reg 1 [% q $end
$var reg 1 \% sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 4% Cin $end
$var wire 1 ]% a $end
$var wire 1 ^% b $end
$var reg 1 _% Cout $end
$var reg 1 `% p $end
$var reg 1 a% q $end
$var reg 1 b% sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 4% Cin $end
$var wire 1 c% a $end
$var wire 1 d% b $end
$var reg 1 e% Cout $end
$var reg 1 f% p $end
$var reg 1 g% q $end
$var reg 1 h% sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 4% Cin $end
$var wire 1 i% a $end
$var wire 1 j% b $end
$var reg 1 k% Cout $end
$var reg 1 l% p $end
$var reg 1 m% q $end
$var reg 1 n% sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 4% Cin $end
$var wire 1 o% a $end
$var wire 1 p% b $end
$var reg 1 q% Cout $end
$var reg 1 r% p $end
$var reg 1 s% q $end
$var reg 1 t% sum $end
$upscope $end
$scope module total $end
$var wire 3 u% a [2:0] $end
$var wire 3 v% b [2:0] $end
$var wire 1 w% gnd $end
$var wire 3 x% sum [2:0] $end
$var wire 1 y% carry1 $end
$var wire 1 z% carry0 $end
$var wire 1 {% Cout $end
$scope module adder0 $end
$var wire 1 w% Cin $end
$var wire 1 |% a $end
$var wire 1 }% b $end
$var reg 1 z% Cout $end
$var reg 1 ~% p $end
$var reg 1 !& q $end
$var reg 1 "& sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 z% Cin $end
$var wire 1 #& a $end
$var wire 1 $& b $end
$var reg 1 y% Cout $end
$var reg 1 %& p $end
$var reg 1 && q $end
$var reg 1 '& sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 y% Cin $end
$var wire 1 (& a $end
$var wire 1 )& b $end
$var reg 1 {% Cout $end
$var reg 1 *& p $end
$var reg 1 +& q $end
$var reg 1 ,& sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[2] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 -& neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 .& state_0 $end
$var wire 4 /& living_neighbors [3:0] $end
$var reg 1 0& state_d $end
$var reg 1 1& state_q $end
$var reg 1 2& stay_alive $end
$scope module living $end
$var wire 1 3& gnd $end
$var wire 8 4& in [7:0] $end
$var wire 3 5& sum1 [2:0] $end
$var wire 3 6& sum0 [2:0] $end
$var wire 4 7& num [3:0] $end
$var wire 2 8& count3 [1:0] $end
$var wire 2 9& count2 [1:0] $end
$var wire 2 :& count1 [1:0] $end
$var wire 2 ;& count0 [1:0] $end
$scope module adder0 $end
$var wire 2 <& a [1:0] $end
$var wire 2 =& b [1:0] $end
$var wire 2 >& sum [1:0] $end
$var wire 1 ?& carry0 $end
$var wire 1 @& Cout $end
$scope module adder0 $end
$var wire 1 A& Cin $end
$var wire 1 B& a $end
$var wire 1 C& b $end
$var reg 1 ?& Cout $end
$var reg 1 D& p $end
$var reg 1 E& q $end
$var reg 1 F& sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ?& Cin $end
$var wire 1 G& a $end
$var wire 1 H& b $end
$var reg 1 @& Cout $end
$var reg 1 I& p $end
$var reg 1 J& q $end
$var reg 1 K& sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 L& a [1:0] $end
$var wire 2 M& b [1:0] $end
$var wire 2 N& sum [1:0] $end
$var wire 1 O& carry0 $end
$var wire 1 P& Cout $end
$scope module adder0 $end
$var wire 1 Q& Cin $end
$var wire 1 R& a $end
$var wire 1 S& b $end
$var reg 1 O& Cout $end
$var reg 1 T& p $end
$var reg 1 U& q $end
$var reg 1 V& sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 O& Cin $end
$var wire 1 W& a $end
$var wire 1 X& b $end
$var reg 1 P& Cout $end
$var reg 1 Y& p $end
$var reg 1 Z& q $end
$var reg 1 [& sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 3& Cin $end
$var wire 1 \& a $end
$var wire 1 ]& b $end
$var reg 1 ^& Cout $end
$var reg 1 _& p $end
$var reg 1 `& q $end
$var reg 1 a& sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 3& Cin $end
$var wire 1 b& a $end
$var wire 1 c& b $end
$var reg 1 d& Cout $end
$var reg 1 e& p $end
$var reg 1 f& q $end
$var reg 1 g& sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 3& Cin $end
$var wire 1 h& a $end
$var wire 1 i& b $end
$var reg 1 j& Cout $end
$var reg 1 k& p $end
$var reg 1 l& q $end
$var reg 1 m& sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 3& Cin $end
$var wire 1 n& a $end
$var wire 1 o& b $end
$var reg 1 p& Cout $end
$var reg 1 q& p $end
$var reg 1 r& q $end
$var reg 1 s& sum $end
$upscope $end
$scope module total $end
$var wire 3 t& a [2:0] $end
$var wire 3 u& b [2:0] $end
$var wire 1 v& gnd $end
$var wire 3 w& sum [2:0] $end
$var wire 1 x& carry1 $end
$var wire 1 y& carry0 $end
$var wire 1 z& Cout $end
$scope module adder0 $end
$var wire 1 v& Cin $end
$var wire 1 {& a $end
$var wire 1 |& b $end
$var reg 1 y& Cout $end
$var reg 1 }& p $end
$var reg 1 ~& q $end
$var reg 1 !' sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 y& Cin $end
$var wire 1 "' a $end
$var wire 1 #' b $end
$var reg 1 x& Cout $end
$var reg 1 $' p $end
$var reg 1 %' q $end
$var reg 1 &' sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 x& Cin $end
$var wire 1 '' a $end
$var wire 1 (' b $end
$var reg 1 z& Cout $end
$var reg 1 )' p $end
$var reg 1 *' q $end
$var reg 1 +' sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 ,' neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 -' state_0 $end
$var wire 4 .' living_neighbors [3:0] $end
$var reg 1 /' state_d $end
$var reg 1 0' state_q $end
$var reg 1 1' stay_alive $end
$scope module living $end
$var wire 1 2' gnd $end
$var wire 8 3' in [7:0] $end
$var wire 3 4' sum1 [2:0] $end
$var wire 3 5' sum0 [2:0] $end
$var wire 4 6' num [3:0] $end
$var wire 2 7' count3 [1:0] $end
$var wire 2 8' count2 [1:0] $end
$var wire 2 9' count1 [1:0] $end
$var wire 2 :' count0 [1:0] $end
$scope module adder0 $end
$var wire 2 ;' a [1:0] $end
$var wire 2 <' b [1:0] $end
$var wire 2 =' sum [1:0] $end
$var wire 1 >' carry0 $end
$var wire 1 ?' Cout $end
$scope module adder0 $end
$var wire 1 @' Cin $end
$var wire 1 A' a $end
$var wire 1 B' b $end
$var reg 1 >' Cout $end
$var reg 1 C' p $end
$var reg 1 D' q $end
$var reg 1 E' sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 >' Cin $end
$var wire 1 F' a $end
$var wire 1 G' b $end
$var reg 1 ?' Cout $end
$var reg 1 H' p $end
$var reg 1 I' q $end
$var reg 1 J' sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 K' a [1:0] $end
$var wire 2 L' b [1:0] $end
$var wire 2 M' sum [1:0] $end
$var wire 1 N' carry0 $end
$var wire 1 O' Cout $end
$scope module adder0 $end
$var wire 1 P' Cin $end
$var wire 1 Q' a $end
$var wire 1 R' b $end
$var reg 1 N' Cout $end
$var reg 1 S' p $end
$var reg 1 T' q $end
$var reg 1 U' sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 N' Cin $end
$var wire 1 V' a $end
$var wire 1 W' b $end
$var reg 1 O' Cout $end
$var reg 1 X' p $end
$var reg 1 Y' q $end
$var reg 1 Z' sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 2' Cin $end
$var wire 1 [' a $end
$var wire 1 \' b $end
$var reg 1 ]' Cout $end
$var reg 1 ^' p $end
$var reg 1 _' q $end
$var reg 1 `' sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 2' Cin $end
$var wire 1 a' a $end
$var wire 1 b' b $end
$var reg 1 c' Cout $end
$var reg 1 d' p $end
$var reg 1 e' q $end
$var reg 1 f' sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 2' Cin $end
$var wire 1 g' a $end
$var wire 1 h' b $end
$var reg 1 i' Cout $end
$var reg 1 j' p $end
$var reg 1 k' q $end
$var reg 1 l' sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 2' Cin $end
$var wire 1 m' a $end
$var wire 1 n' b $end
$var reg 1 o' Cout $end
$var reg 1 p' p $end
$var reg 1 q' q $end
$var reg 1 r' sum $end
$upscope $end
$scope module total $end
$var wire 3 s' a [2:0] $end
$var wire 3 t' b [2:0] $end
$var wire 1 u' gnd $end
$var wire 3 v' sum [2:0] $end
$var wire 1 w' carry1 $end
$var wire 1 x' carry0 $end
$var wire 1 y' Cout $end
$scope module adder0 $end
$var wire 1 u' Cin $end
$var wire 1 z' a $end
$var wire 1 {' b $end
$var reg 1 x' Cout $end
$var reg 1 |' p $end
$var reg 1 }' q $end
$var reg 1 ~' sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 x' Cin $end
$var wire 1 !( a $end
$var wire 1 "( b $end
$var reg 1 w' Cout $end
$var reg 1 #( p $end
$var reg 1 $( q $end
$var reg 1 %( sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 w' Cin $end
$var wire 1 &( a $end
$var wire 1 '( b $end
$var reg 1 y' Cout $end
$var reg 1 (( p $end
$var reg 1 )( q $end
$var reg 1 *( sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 +( neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 ,( state_0 $end
$var wire 4 -( living_neighbors [3:0] $end
$var reg 1 .( state_d $end
$var reg 1 /( state_q $end
$var reg 1 0( stay_alive $end
$scope module living $end
$var wire 1 1( gnd $end
$var wire 8 2( in [7:0] $end
$var wire 3 3( sum1 [2:0] $end
$var wire 3 4( sum0 [2:0] $end
$var wire 4 5( num [3:0] $end
$var wire 2 6( count3 [1:0] $end
$var wire 2 7( count2 [1:0] $end
$var wire 2 8( count1 [1:0] $end
$var wire 2 9( count0 [1:0] $end
$scope module adder0 $end
$var wire 2 :( a [1:0] $end
$var wire 2 ;( b [1:0] $end
$var wire 2 <( sum [1:0] $end
$var wire 1 =( carry0 $end
$var wire 1 >( Cout $end
$scope module adder0 $end
$var wire 1 ?( Cin $end
$var wire 1 @( a $end
$var wire 1 A( b $end
$var reg 1 =( Cout $end
$var reg 1 B( p $end
$var reg 1 C( q $end
$var reg 1 D( sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 =( Cin $end
$var wire 1 E( a $end
$var wire 1 F( b $end
$var reg 1 >( Cout $end
$var reg 1 G( p $end
$var reg 1 H( q $end
$var reg 1 I( sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 J( a [1:0] $end
$var wire 2 K( b [1:0] $end
$var wire 2 L( sum [1:0] $end
$var wire 1 M( carry0 $end
$var wire 1 N( Cout $end
$scope module adder0 $end
$var wire 1 O( Cin $end
$var wire 1 P( a $end
$var wire 1 Q( b $end
$var reg 1 M( Cout $end
$var reg 1 R( p $end
$var reg 1 S( q $end
$var reg 1 T( sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 M( Cin $end
$var wire 1 U( a $end
$var wire 1 V( b $end
$var reg 1 N( Cout $end
$var reg 1 W( p $end
$var reg 1 X( q $end
$var reg 1 Y( sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 1( Cin $end
$var wire 1 Z( a $end
$var wire 1 [( b $end
$var reg 1 \( Cout $end
$var reg 1 ]( p $end
$var reg 1 ^( q $end
$var reg 1 _( sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 1( Cin $end
$var wire 1 `( a $end
$var wire 1 a( b $end
$var reg 1 b( Cout $end
$var reg 1 c( p $end
$var reg 1 d( q $end
$var reg 1 e( sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 1( Cin $end
$var wire 1 f( a $end
$var wire 1 g( b $end
$var reg 1 h( Cout $end
$var reg 1 i( p $end
$var reg 1 j( q $end
$var reg 1 k( sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 1( Cin $end
$var wire 1 l( a $end
$var wire 1 m( b $end
$var reg 1 n( Cout $end
$var reg 1 o( p $end
$var reg 1 p( q $end
$var reg 1 q( sum $end
$upscope $end
$scope module total $end
$var wire 3 r( a [2:0] $end
$var wire 3 s( b [2:0] $end
$var wire 1 t( gnd $end
$var wire 3 u( sum [2:0] $end
$var wire 1 v( carry1 $end
$var wire 1 w( carry0 $end
$var wire 1 x( Cout $end
$scope module adder0 $end
$var wire 1 t( Cin $end
$var wire 1 y( a $end
$var wire 1 z( b $end
$var reg 1 w( Cout $end
$var reg 1 {( p $end
$var reg 1 |( q $end
$var reg 1 }( sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 w( Cin $end
$var wire 1 ~( a $end
$var wire 1 !) b $end
$var reg 1 v( Cout $end
$var reg 1 ") p $end
$var reg 1 #) q $end
$var reg 1 $) sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 v( Cin $end
$var wire 1 %) a $end
$var wire 1 &) b $end
$var reg 1 x( Cout $end
$var reg 1 ') p $end
$var reg 1 () q $end
$var reg 1 )) sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 *) neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 +) state_0 $end
$var wire 4 ,) living_neighbors [3:0] $end
$var reg 1 -) state_d $end
$var reg 1 .) state_q $end
$var reg 1 /) stay_alive $end
$scope module living $end
$var wire 1 0) gnd $end
$var wire 8 1) in [7:0] $end
$var wire 3 2) sum1 [2:0] $end
$var wire 3 3) sum0 [2:0] $end
$var wire 4 4) num [3:0] $end
$var wire 2 5) count3 [1:0] $end
$var wire 2 6) count2 [1:0] $end
$var wire 2 7) count1 [1:0] $end
$var wire 2 8) count0 [1:0] $end
$scope module adder0 $end
$var wire 2 9) a [1:0] $end
$var wire 2 :) b [1:0] $end
$var wire 2 ;) sum [1:0] $end
$var wire 1 <) carry0 $end
$var wire 1 =) Cout $end
$scope module adder0 $end
$var wire 1 >) Cin $end
$var wire 1 ?) a $end
$var wire 1 @) b $end
$var reg 1 <) Cout $end
$var reg 1 A) p $end
$var reg 1 B) q $end
$var reg 1 C) sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 <) Cin $end
$var wire 1 D) a $end
$var wire 1 E) b $end
$var reg 1 =) Cout $end
$var reg 1 F) p $end
$var reg 1 G) q $end
$var reg 1 H) sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 I) a [1:0] $end
$var wire 2 J) b [1:0] $end
$var wire 2 K) sum [1:0] $end
$var wire 1 L) carry0 $end
$var wire 1 M) Cout $end
$scope module adder0 $end
$var wire 1 N) Cin $end
$var wire 1 O) a $end
$var wire 1 P) b $end
$var reg 1 L) Cout $end
$var reg 1 Q) p $end
$var reg 1 R) q $end
$var reg 1 S) sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 L) Cin $end
$var wire 1 T) a $end
$var wire 1 U) b $end
$var reg 1 M) Cout $end
$var reg 1 V) p $end
$var reg 1 W) q $end
$var reg 1 X) sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 0) Cin $end
$var wire 1 Y) a $end
$var wire 1 Z) b $end
$var reg 1 [) Cout $end
$var reg 1 \) p $end
$var reg 1 ]) q $end
$var reg 1 ^) sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 0) Cin $end
$var wire 1 _) a $end
$var wire 1 `) b $end
$var reg 1 a) Cout $end
$var reg 1 b) p $end
$var reg 1 c) q $end
$var reg 1 d) sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 0) Cin $end
$var wire 1 e) a $end
$var wire 1 f) b $end
$var reg 1 g) Cout $end
$var reg 1 h) p $end
$var reg 1 i) q $end
$var reg 1 j) sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 0) Cin $end
$var wire 1 k) a $end
$var wire 1 l) b $end
$var reg 1 m) Cout $end
$var reg 1 n) p $end
$var reg 1 o) q $end
$var reg 1 p) sum $end
$upscope $end
$scope module total $end
$var wire 3 q) a [2:0] $end
$var wire 3 r) b [2:0] $end
$var wire 1 s) gnd $end
$var wire 3 t) sum [2:0] $end
$var wire 1 u) carry1 $end
$var wire 1 v) carry0 $end
$var wire 1 w) Cout $end
$scope module adder0 $end
$var wire 1 s) Cin $end
$var wire 1 x) a $end
$var wire 1 y) b $end
$var reg 1 v) Cout $end
$var reg 1 z) p $end
$var reg 1 {) q $end
$var reg 1 |) sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 v) Cin $end
$var wire 1 }) a $end
$var wire 1 ~) b $end
$var reg 1 u) Cout $end
$var reg 1 !* p $end
$var reg 1 "* q $end
$var reg 1 #* sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 u) Cin $end
$var wire 1 $* a $end
$var wire 1 %* b $end
$var reg 1 w) Cout $end
$var reg 1 &* p $end
$var reg 1 '* q $end
$var reg 1 (* sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 )* neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 ** state_0 $end
$var wire 4 +* living_neighbors [3:0] $end
$var reg 1 ,* state_d $end
$var reg 1 -* state_q $end
$var reg 1 .* stay_alive $end
$scope module living $end
$var wire 1 /* gnd $end
$var wire 8 0* in [7:0] $end
$var wire 3 1* sum1 [2:0] $end
$var wire 3 2* sum0 [2:0] $end
$var wire 4 3* num [3:0] $end
$var wire 2 4* count3 [1:0] $end
$var wire 2 5* count2 [1:0] $end
$var wire 2 6* count1 [1:0] $end
$var wire 2 7* count0 [1:0] $end
$scope module adder0 $end
$var wire 2 8* a [1:0] $end
$var wire 2 9* b [1:0] $end
$var wire 2 :* sum [1:0] $end
$var wire 1 ;* carry0 $end
$var wire 1 <* Cout $end
$scope module adder0 $end
$var wire 1 =* Cin $end
$var wire 1 >* a $end
$var wire 1 ?* b $end
$var reg 1 ;* Cout $end
$var reg 1 @* p $end
$var reg 1 A* q $end
$var reg 1 B* sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ;* Cin $end
$var wire 1 C* a $end
$var wire 1 D* b $end
$var reg 1 <* Cout $end
$var reg 1 E* p $end
$var reg 1 F* q $end
$var reg 1 G* sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 H* a [1:0] $end
$var wire 2 I* b [1:0] $end
$var wire 2 J* sum [1:0] $end
$var wire 1 K* carry0 $end
$var wire 1 L* Cout $end
$scope module adder0 $end
$var wire 1 M* Cin $end
$var wire 1 N* a $end
$var wire 1 O* b $end
$var reg 1 K* Cout $end
$var reg 1 P* p $end
$var reg 1 Q* q $end
$var reg 1 R* sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 K* Cin $end
$var wire 1 S* a $end
$var wire 1 T* b $end
$var reg 1 L* Cout $end
$var reg 1 U* p $end
$var reg 1 V* q $end
$var reg 1 W* sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 /* Cin $end
$var wire 1 X* a $end
$var wire 1 Y* b $end
$var reg 1 Z* Cout $end
$var reg 1 [* p $end
$var reg 1 \* q $end
$var reg 1 ]* sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 /* Cin $end
$var wire 1 ^* a $end
$var wire 1 _* b $end
$var reg 1 `* Cout $end
$var reg 1 a* p $end
$var reg 1 b* q $end
$var reg 1 c* sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 /* Cin $end
$var wire 1 d* a $end
$var wire 1 e* b $end
$var reg 1 f* Cout $end
$var reg 1 g* p $end
$var reg 1 h* q $end
$var reg 1 i* sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 /* Cin $end
$var wire 1 j* a $end
$var wire 1 k* b $end
$var reg 1 l* Cout $end
$var reg 1 m* p $end
$var reg 1 n* q $end
$var reg 1 o* sum $end
$upscope $end
$scope module total $end
$var wire 3 p* a [2:0] $end
$var wire 3 q* b [2:0] $end
$var wire 1 r* gnd $end
$var wire 3 s* sum [2:0] $end
$var wire 1 t* carry1 $end
$var wire 1 u* carry0 $end
$var wire 1 v* Cout $end
$scope module adder0 $end
$var wire 1 r* Cin $end
$var wire 1 w* a $end
$var wire 1 x* b $end
$var reg 1 u* Cout $end
$var reg 1 y* p $end
$var reg 1 z* q $end
$var reg 1 {* sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 u* Cin $end
$var wire 1 |* a $end
$var wire 1 }* b $end
$var reg 1 t* Cout $end
$var reg 1 ~* p $end
$var reg 1 !+ q $end
$var reg 1 "+ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 t* Cin $end
$var wire 1 #+ a $end
$var wire 1 $+ b $end
$var reg 1 v* Cout $end
$var reg 1 %+ p $end
$var reg 1 &+ q $end
$var reg 1 '+ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[3] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 (+ neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 )+ state_0 $end
$var wire 4 *+ living_neighbors [3:0] $end
$var reg 1 ++ state_d $end
$var reg 1 ,+ state_q $end
$var reg 1 -+ stay_alive $end
$scope module living $end
$var wire 1 .+ gnd $end
$var wire 8 /+ in [7:0] $end
$var wire 3 0+ sum1 [2:0] $end
$var wire 3 1+ sum0 [2:0] $end
$var wire 4 2+ num [3:0] $end
$var wire 2 3+ count3 [1:0] $end
$var wire 2 4+ count2 [1:0] $end
$var wire 2 5+ count1 [1:0] $end
$var wire 2 6+ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 7+ a [1:0] $end
$var wire 2 8+ b [1:0] $end
$var wire 2 9+ sum [1:0] $end
$var wire 1 :+ carry0 $end
$var wire 1 ;+ Cout $end
$scope module adder0 $end
$var wire 1 <+ Cin $end
$var wire 1 =+ a $end
$var wire 1 >+ b $end
$var reg 1 :+ Cout $end
$var reg 1 ?+ p $end
$var reg 1 @+ q $end
$var reg 1 A+ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 :+ Cin $end
$var wire 1 B+ a $end
$var wire 1 C+ b $end
$var reg 1 ;+ Cout $end
$var reg 1 D+ p $end
$var reg 1 E+ q $end
$var reg 1 F+ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 G+ a [1:0] $end
$var wire 2 H+ b [1:0] $end
$var wire 2 I+ sum [1:0] $end
$var wire 1 J+ carry0 $end
$var wire 1 K+ Cout $end
$scope module adder0 $end
$var wire 1 L+ Cin $end
$var wire 1 M+ a $end
$var wire 1 N+ b $end
$var reg 1 J+ Cout $end
$var reg 1 O+ p $end
$var reg 1 P+ q $end
$var reg 1 Q+ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 J+ Cin $end
$var wire 1 R+ a $end
$var wire 1 S+ b $end
$var reg 1 K+ Cout $end
$var reg 1 T+ p $end
$var reg 1 U+ q $end
$var reg 1 V+ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 .+ Cin $end
$var wire 1 W+ a $end
$var wire 1 X+ b $end
$var reg 1 Y+ Cout $end
$var reg 1 Z+ p $end
$var reg 1 [+ q $end
$var reg 1 \+ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 .+ Cin $end
$var wire 1 ]+ a $end
$var wire 1 ^+ b $end
$var reg 1 _+ Cout $end
$var reg 1 `+ p $end
$var reg 1 a+ q $end
$var reg 1 b+ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 .+ Cin $end
$var wire 1 c+ a $end
$var wire 1 d+ b $end
$var reg 1 e+ Cout $end
$var reg 1 f+ p $end
$var reg 1 g+ q $end
$var reg 1 h+ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 .+ Cin $end
$var wire 1 i+ a $end
$var wire 1 j+ b $end
$var reg 1 k+ Cout $end
$var reg 1 l+ p $end
$var reg 1 m+ q $end
$var reg 1 n+ sum $end
$upscope $end
$scope module total $end
$var wire 3 o+ a [2:0] $end
$var wire 3 p+ b [2:0] $end
$var wire 1 q+ gnd $end
$var wire 3 r+ sum [2:0] $end
$var wire 1 s+ carry1 $end
$var wire 1 t+ carry0 $end
$var wire 1 u+ Cout $end
$scope module adder0 $end
$var wire 1 q+ Cin $end
$var wire 1 v+ a $end
$var wire 1 w+ b $end
$var reg 1 t+ Cout $end
$var reg 1 x+ p $end
$var reg 1 y+ q $end
$var reg 1 z+ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 t+ Cin $end
$var wire 1 {+ a $end
$var wire 1 |+ b $end
$var reg 1 s+ Cout $end
$var reg 1 }+ p $end
$var reg 1 ~+ q $end
$var reg 1 !, sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 s+ Cin $end
$var wire 1 ", a $end
$var wire 1 #, b $end
$var reg 1 u+ Cout $end
$var reg 1 $, p $end
$var reg 1 %, q $end
$var reg 1 &, sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 ', neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 (, state_0 $end
$var wire 4 ), living_neighbors [3:0] $end
$var reg 1 *, state_d $end
$var reg 1 +, state_q $end
$var reg 1 ,, stay_alive $end
$scope module living $end
$var wire 1 -, gnd $end
$var wire 8 ., in [7:0] $end
$var wire 3 /, sum1 [2:0] $end
$var wire 3 0, sum0 [2:0] $end
$var wire 4 1, num [3:0] $end
$var wire 2 2, count3 [1:0] $end
$var wire 2 3, count2 [1:0] $end
$var wire 2 4, count1 [1:0] $end
$var wire 2 5, count0 [1:0] $end
$scope module adder0 $end
$var wire 2 6, a [1:0] $end
$var wire 2 7, b [1:0] $end
$var wire 2 8, sum [1:0] $end
$var wire 1 9, carry0 $end
$var wire 1 :, Cout $end
$scope module adder0 $end
$var wire 1 ;, Cin $end
$var wire 1 <, a $end
$var wire 1 =, b $end
$var reg 1 9, Cout $end
$var reg 1 >, p $end
$var reg 1 ?, q $end
$var reg 1 @, sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 9, Cin $end
$var wire 1 A, a $end
$var wire 1 B, b $end
$var reg 1 :, Cout $end
$var reg 1 C, p $end
$var reg 1 D, q $end
$var reg 1 E, sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 F, a [1:0] $end
$var wire 2 G, b [1:0] $end
$var wire 2 H, sum [1:0] $end
$var wire 1 I, carry0 $end
$var wire 1 J, Cout $end
$scope module adder0 $end
$var wire 1 K, Cin $end
$var wire 1 L, a $end
$var wire 1 M, b $end
$var reg 1 I, Cout $end
$var reg 1 N, p $end
$var reg 1 O, q $end
$var reg 1 P, sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 I, Cin $end
$var wire 1 Q, a $end
$var wire 1 R, b $end
$var reg 1 J, Cout $end
$var reg 1 S, p $end
$var reg 1 T, q $end
$var reg 1 U, sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 -, Cin $end
$var wire 1 V, a $end
$var wire 1 W, b $end
$var reg 1 X, Cout $end
$var reg 1 Y, p $end
$var reg 1 Z, q $end
$var reg 1 [, sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 -, Cin $end
$var wire 1 \, a $end
$var wire 1 ], b $end
$var reg 1 ^, Cout $end
$var reg 1 _, p $end
$var reg 1 `, q $end
$var reg 1 a, sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 -, Cin $end
$var wire 1 b, a $end
$var wire 1 c, b $end
$var reg 1 d, Cout $end
$var reg 1 e, p $end
$var reg 1 f, q $end
$var reg 1 g, sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 -, Cin $end
$var wire 1 h, a $end
$var wire 1 i, b $end
$var reg 1 j, Cout $end
$var reg 1 k, p $end
$var reg 1 l, q $end
$var reg 1 m, sum $end
$upscope $end
$scope module total $end
$var wire 3 n, a [2:0] $end
$var wire 3 o, b [2:0] $end
$var wire 1 p, gnd $end
$var wire 3 q, sum [2:0] $end
$var wire 1 r, carry1 $end
$var wire 1 s, carry0 $end
$var wire 1 t, Cout $end
$scope module adder0 $end
$var wire 1 p, Cin $end
$var wire 1 u, a $end
$var wire 1 v, b $end
$var reg 1 s, Cout $end
$var reg 1 w, p $end
$var reg 1 x, q $end
$var reg 1 y, sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 s, Cin $end
$var wire 1 z, a $end
$var wire 1 {, b $end
$var reg 1 r, Cout $end
$var reg 1 |, p $end
$var reg 1 }, q $end
$var reg 1 ~, sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 r, Cin $end
$var wire 1 !- a $end
$var wire 1 "- b $end
$var reg 1 t, Cout $end
$var reg 1 #- p $end
$var reg 1 $- q $end
$var reg 1 %- sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 &- neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 '- state_0 $end
$var wire 4 (- living_neighbors [3:0] $end
$var reg 1 )- state_d $end
$var reg 1 *- state_q $end
$var reg 1 +- stay_alive $end
$scope module living $end
$var wire 1 ,- gnd $end
$var wire 8 -- in [7:0] $end
$var wire 3 .- sum1 [2:0] $end
$var wire 3 /- sum0 [2:0] $end
$var wire 4 0- num [3:0] $end
$var wire 2 1- count3 [1:0] $end
$var wire 2 2- count2 [1:0] $end
$var wire 2 3- count1 [1:0] $end
$var wire 2 4- count0 [1:0] $end
$scope module adder0 $end
$var wire 2 5- a [1:0] $end
$var wire 2 6- b [1:0] $end
$var wire 2 7- sum [1:0] $end
$var wire 1 8- carry0 $end
$var wire 1 9- Cout $end
$scope module adder0 $end
$var wire 1 :- Cin $end
$var wire 1 ;- a $end
$var wire 1 <- b $end
$var reg 1 8- Cout $end
$var reg 1 =- p $end
$var reg 1 >- q $end
$var reg 1 ?- sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 8- Cin $end
$var wire 1 @- a $end
$var wire 1 A- b $end
$var reg 1 9- Cout $end
$var reg 1 B- p $end
$var reg 1 C- q $end
$var reg 1 D- sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 E- a [1:0] $end
$var wire 2 F- b [1:0] $end
$var wire 2 G- sum [1:0] $end
$var wire 1 H- carry0 $end
$var wire 1 I- Cout $end
$scope module adder0 $end
$var wire 1 J- Cin $end
$var wire 1 K- a $end
$var wire 1 L- b $end
$var reg 1 H- Cout $end
$var reg 1 M- p $end
$var reg 1 N- q $end
$var reg 1 O- sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 H- Cin $end
$var wire 1 P- a $end
$var wire 1 Q- b $end
$var reg 1 I- Cout $end
$var reg 1 R- p $end
$var reg 1 S- q $end
$var reg 1 T- sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 ,- Cin $end
$var wire 1 U- a $end
$var wire 1 V- b $end
$var reg 1 W- Cout $end
$var reg 1 X- p $end
$var reg 1 Y- q $end
$var reg 1 Z- sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 ,- Cin $end
$var wire 1 [- a $end
$var wire 1 \- b $end
$var reg 1 ]- Cout $end
$var reg 1 ^- p $end
$var reg 1 _- q $end
$var reg 1 `- sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 ,- Cin $end
$var wire 1 a- a $end
$var wire 1 b- b $end
$var reg 1 c- Cout $end
$var reg 1 d- p $end
$var reg 1 e- q $end
$var reg 1 f- sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 ,- Cin $end
$var wire 1 g- a $end
$var wire 1 h- b $end
$var reg 1 i- Cout $end
$var reg 1 j- p $end
$var reg 1 k- q $end
$var reg 1 l- sum $end
$upscope $end
$scope module total $end
$var wire 3 m- a [2:0] $end
$var wire 3 n- b [2:0] $end
$var wire 1 o- gnd $end
$var wire 3 p- sum [2:0] $end
$var wire 1 q- carry1 $end
$var wire 1 r- carry0 $end
$var wire 1 s- Cout $end
$scope module adder0 $end
$var wire 1 o- Cin $end
$var wire 1 t- a $end
$var wire 1 u- b $end
$var reg 1 r- Cout $end
$var reg 1 v- p $end
$var reg 1 w- q $end
$var reg 1 x- sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 r- Cin $end
$var wire 1 y- a $end
$var wire 1 z- b $end
$var reg 1 q- Cout $end
$var reg 1 {- p $end
$var reg 1 |- q $end
$var reg 1 }- sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 q- Cin $end
$var wire 1 ~- a $end
$var wire 1 !. b $end
$var reg 1 s- Cout $end
$var reg 1 ". p $end
$var reg 1 #. q $end
$var reg 1 $. sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 %. neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 &. state_0 $end
$var wire 4 '. living_neighbors [3:0] $end
$var reg 1 (. state_d $end
$var reg 1 ). state_q $end
$var reg 1 *. stay_alive $end
$scope module living $end
$var wire 1 +. gnd $end
$var wire 8 ,. in [7:0] $end
$var wire 3 -. sum1 [2:0] $end
$var wire 3 .. sum0 [2:0] $end
$var wire 4 /. num [3:0] $end
$var wire 2 0. count3 [1:0] $end
$var wire 2 1. count2 [1:0] $end
$var wire 2 2. count1 [1:0] $end
$var wire 2 3. count0 [1:0] $end
$scope module adder0 $end
$var wire 2 4. a [1:0] $end
$var wire 2 5. b [1:0] $end
$var wire 2 6. sum [1:0] $end
$var wire 1 7. carry0 $end
$var wire 1 8. Cout $end
$scope module adder0 $end
$var wire 1 9. Cin $end
$var wire 1 :. a $end
$var wire 1 ;. b $end
$var reg 1 7. Cout $end
$var reg 1 <. p $end
$var reg 1 =. q $end
$var reg 1 >. sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 7. Cin $end
$var wire 1 ?. a $end
$var wire 1 @. b $end
$var reg 1 8. Cout $end
$var reg 1 A. p $end
$var reg 1 B. q $end
$var reg 1 C. sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 D. a [1:0] $end
$var wire 2 E. b [1:0] $end
$var wire 2 F. sum [1:0] $end
$var wire 1 G. carry0 $end
$var wire 1 H. Cout $end
$scope module adder0 $end
$var wire 1 I. Cin $end
$var wire 1 J. a $end
$var wire 1 K. b $end
$var reg 1 G. Cout $end
$var reg 1 L. p $end
$var reg 1 M. q $end
$var reg 1 N. sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 G. Cin $end
$var wire 1 O. a $end
$var wire 1 P. b $end
$var reg 1 H. Cout $end
$var reg 1 Q. p $end
$var reg 1 R. q $end
$var reg 1 S. sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 +. Cin $end
$var wire 1 T. a $end
$var wire 1 U. b $end
$var reg 1 V. Cout $end
$var reg 1 W. p $end
$var reg 1 X. q $end
$var reg 1 Y. sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 +. Cin $end
$var wire 1 Z. a $end
$var wire 1 [. b $end
$var reg 1 \. Cout $end
$var reg 1 ]. p $end
$var reg 1 ^. q $end
$var reg 1 _. sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 +. Cin $end
$var wire 1 `. a $end
$var wire 1 a. b $end
$var reg 1 b. Cout $end
$var reg 1 c. p $end
$var reg 1 d. q $end
$var reg 1 e. sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 +. Cin $end
$var wire 1 f. a $end
$var wire 1 g. b $end
$var reg 1 h. Cout $end
$var reg 1 i. p $end
$var reg 1 j. q $end
$var reg 1 k. sum $end
$upscope $end
$scope module total $end
$var wire 3 l. a [2:0] $end
$var wire 3 m. b [2:0] $end
$var wire 1 n. gnd $end
$var wire 3 o. sum [2:0] $end
$var wire 1 p. carry1 $end
$var wire 1 q. carry0 $end
$var wire 1 r. Cout $end
$scope module adder0 $end
$var wire 1 n. Cin $end
$var wire 1 s. a $end
$var wire 1 t. b $end
$var reg 1 q. Cout $end
$var reg 1 u. p $end
$var reg 1 v. q $end
$var reg 1 w. sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 q. Cin $end
$var wire 1 x. a $end
$var wire 1 y. b $end
$var reg 1 p. Cout $end
$var reg 1 z. p $end
$var reg 1 {. q $end
$var reg 1 |. sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 p. Cin $end
$var wire 1 }. a $end
$var wire 1 ~. b $end
$var reg 1 r. Cout $end
$var reg 1 !/ p $end
$var reg 1 "/ q $end
$var reg 1 #/ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 $/ neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 %/ state_0 $end
$var wire 4 &/ living_neighbors [3:0] $end
$var reg 1 '/ state_d $end
$var reg 1 (/ state_q $end
$var reg 1 )/ stay_alive $end
$scope module living $end
$var wire 1 */ gnd $end
$var wire 8 +/ in [7:0] $end
$var wire 3 ,/ sum1 [2:0] $end
$var wire 3 -/ sum0 [2:0] $end
$var wire 4 ./ num [3:0] $end
$var wire 2 // count3 [1:0] $end
$var wire 2 0/ count2 [1:0] $end
$var wire 2 1/ count1 [1:0] $end
$var wire 2 2/ count0 [1:0] $end
$scope module adder0 $end
$var wire 2 3/ a [1:0] $end
$var wire 2 4/ b [1:0] $end
$var wire 2 5/ sum [1:0] $end
$var wire 1 6/ carry0 $end
$var wire 1 7/ Cout $end
$scope module adder0 $end
$var wire 1 8/ Cin $end
$var wire 1 9/ a $end
$var wire 1 :/ b $end
$var reg 1 6/ Cout $end
$var reg 1 ;/ p $end
$var reg 1 </ q $end
$var reg 1 =/ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 6/ Cin $end
$var wire 1 >/ a $end
$var wire 1 ?/ b $end
$var reg 1 7/ Cout $end
$var reg 1 @/ p $end
$var reg 1 A/ q $end
$var reg 1 B/ sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 C/ a [1:0] $end
$var wire 2 D/ b [1:0] $end
$var wire 2 E/ sum [1:0] $end
$var wire 1 F/ carry0 $end
$var wire 1 G/ Cout $end
$scope module adder0 $end
$var wire 1 H/ Cin $end
$var wire 1 I/ a $end
$var wire 1 J/ b $end
$var reg 1 F/ Cout $end
$var reg 1 K/ p $end
$var reg 1 L/ q $end
$var reg 1 M/ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 F/ Cin $end
$var wire 1 N/ a $end
$var wire 1 O/ b $end
$var reg 1 G/ Cout $end
$var reg 1 P/ p $end
$var reg 1 Q/ q $end
$var reg 1 R/ sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 */ Cin $end
$var wire 1 S/ a $end
$var wire 1 T/ b $end
$var reg 1 U/ Cout $end
$var reg 1 V/ p $end
$var reg 1 W/ q $end
$var reg 1 X/ sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 */ Cin $end
$var wire 1 Y/ a $end
$var wire 1 Z/ b $end
$var reg 1 [/ Cout $end
$var reg 1 \/ p $end
$var reg 1 ]/ q $end
$var reg 1 ^/ sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 */ Cin $end
$var wire 1 _/ a $end
$var wire 1 `/ b $end
$var reg 1 a/ Cout $end
$var reg 1 b/ p $end
$var reg 1 c/ q $end
$var reg 1 d/ sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 */ Cin $end
$var wire 1 e/ a $end
$var wire 1 f/ b $end
$var reg 1 g/ Cout $end
$var reg 1 h/ p $end
$var reg 1 i/ q $end
$var reg 1 j/ sum $end
$upscope $end
$scope module total $end
$var wire 3 k/ a [2:0] $end
$var wire 3 l/ b [2:0] $end
$var wire 1 m/ gnd $end
$var wire 3 n/ sum [2:0] $end
$var wire 1 o/ carry1 $end
$var wire 1 p/ carry0 $end
$var wire 1 q/ Cout $end
$scope module adder0 $end
$var wire 1 m/ Cin $end
$var wire 1 r/ a $end
$var wire 1 s/ b $end
$var reg 1 p/ Cout $end
$var reg 1 t/ p $end
$var reg 1 u/ q $end
$var reg 1 v/ sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 p/ Cin $end
$var wire 1 w/ a $end
$var wire 1 x/ b $end
$var reg 1 o/ Cout $end
$var reg 1 y/ p $end
$var reg 1 z/ q $end
$var reg 1 {/ sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 o/ Cin $end
$var wire 1 |/ a $end
$var wire 1 }/ b $end
$var reg 1 q/ Cout $end
$var reg 1 ~/ p $end
$var reg 1 !0 q $end
$var reg 1 "0 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[4] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 #0 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 $0 state_0 $end
$var wire 4 %0 living_neighbors [3:0] $end
$var reg 1 &0 state_d $end
$var reg 1 '0 state_q $end
$var reg 1 (0 stay_alive $end
$scope module living $end
$var wire 1 )0 gnd $end
$var wire 8 *0 in [7:0] $end
$var wire 3 +0 sum1 [2:0] $end
$var wire 3 ,0 sum0 [2:0] $end
$var wire 4 -0 num [3:0] $end
$var wire 2 .0 count3 [1:0] $end
$var wire 2 /0 count2 [1:0] $end
$var wire 2 00 count1 [1:0] $end
$var wire 2 10 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 20 a [1:0] $end
$var wire 2 30 b [1:0] $end
$var wire 2 40 sum [1:0] $end
$var wire 1 50 carry0 $end
$var wire 1 60 Cout $end
$scope module adder0 $end
$var wire 1 70 Cin $end
$var wire 1 80 a $end
$var wire 1 90 b $end
$var reg 1 50 Cout $end
$var reg 1 :0 p $end
$var reg 1 ;0 q $end
$var reg 1 <0 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 50 Cin $end
$var wire 1 =0 a $end
$var wire 1 >0 b $end
$var reg 1 60 Cout $end
$var reg 1 ?0 p $end
$var reg 1 @0 q $end
$var reg 1 A0 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 B0 a [1:0] $end
$var wire 2 C0 b [1:0] $end
$var wire 2 D0 sum [1:0] $end
$var wire 1 E0 carry0 $end
$var wire 1 F0 Cout $end
$scope module adder0 $end
$var wire 1 G0 Cin $end
$var wire 1 H0 a $end
$var wire 1 I0 b $end
$var reg 1 E0 Cout $end
$var reg 1 J0 p $end
$var reg 1 K0 q $end
$var reg 1 L0 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 E0 Cin $end
$var wire 1 M0 a $end
$var wire 1 N0 b $end
$var reg 1 F0 Cout $end
$var reg 1 O0 p $end
$var reg 1 P0 q $end
$var reg 1 Q0 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 )0 Cin $end
$var wire 1 R0 a $end
$var wire 1 S0 b $end
$var reg 1 T0 Cout $end
$var reg 1 U0 p $end
$var reg 1 V0 q $end
$var reg 1 W0 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 )0 Cin $end
$var wire 1 X0 a $end
$var wire 1 Y0 b $end
$var reg 1 Z0 Cout $end
$var reg 1 [0 p $end
$var reg 1 \0 q $end
$var reg 1 ]0 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 )0 Cin $end
$var wire 1 ^0 a $end
$var wire 1 _0 b $end
$var reg 1 `0 Cout $end
$var reg 1 a0 p $end
$var reg 1 b0 q $end
$var reg 1 c0 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 )0 Cin $end
$var wire 1 d0 a $end
$var wire 1 e0 b $end
$var reg 1 f0 Cout $end
$var reg 1 g0 p $end
$var reg 1 h0 q $end
$var reg 1 i0 sum $end
$upscope $end
$scope module total $end
$var wire 3 j0 a [2:0] $end
$var wire 3 k0 b [2:0] $end
$var wire 1 l0 gnd $end
$var wire 3 m0 sum [2:0] $end
$var wire 1 n0 carry1 $end
$var wire 1 o0 carry0 $end
$var wire 1 p0 Cout $end
$scope module adder0 $end
$var wire 1 l0 Cin $end
$var wire 1 q0 a $end
$var wire 1 r0 b $end
$var reg 1 o0 Cout $end
$var reg 1 s0 p $end
$var reg 1 t0 q $end
$var reg 1 u0 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 o0 Cin $end
$var wire 1 v0 a $end
$var wire 1 w0 b $end
$var reg 1 n0 Cout $end
$var reg 1 x0 p $end
$var reg 1 y0 q $end
$var reg 1 z0 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 n0 Cin $end
$var wire 1 {0 a $end
$var wire 1 |0 b $end
$var reg 1 p0 Cout $end
$var reg 1 }0 p $end
$var reg 1 ~0 q $end
$var reg 1 !1 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 "1 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 #1 state_0 $end
$var wire 4 $1 living_neighbors [3:0] $end
$var reg 1 %1 state_d $end
$var reg 1 &1 state_q $end
$var reg 1 '1 stay_alive $end
$scope module living $end
$var wire 1 (1 gnd $end
$var wire 8 )1 in [7:0] $end
$var wire 3 *1 sum1 [2:0] $end
$var wire 3 +1 sum0 [2:0] $end
$var wire 4 ,1 num [3:0] $end
$var wire 2 -1 count3 [1:0] $end
$var wire 2 .1 count2 [1:0] $end
$var wire 2 /1 count1 [1:0] $end
$var wire 2 01 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 11 a [1:0] $end
$var wire 2 21 b [1:0] $end
$var wire 2 31 sum [1:0] $end
$var wire 1 41 carry0 $end
$var wire 1 51 Cout $end
$scope module adder0 $end
$var wire 1 61 Cin $end
$var wire 1 71 a $end
$var wire 1 81 b $end
$var reg 1 41 Cout $end
$var reg 1 91 p $end
$var reg 1 :1 q $end
$var reg 1 ;1 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 41 Cin $end
$var wire 1 <1 a $end
$var wire 1 =1 b $end
$var reg 1 51 Cout $end
$var reg 1 >1 p $end
$var reg 1 ?1 q $end
$var reg 1 @1 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 A1 a [1:0] $end
$var wire 2 B1 b [1:0] $end
$var wire 2 C1 sum [1:0] $end
$var wire 1 D1 carry0 $end
$var wire 1 E1 Cout $end
$scope module adder0 $end
$var wire 1 F1 Cin $end
$var wire 1 G1 a $end
$var wire 1 H1 b $end
$var reg 1 D1 Cout $end
$var reg 1 I1 p $end
$var reg 1 J1 q $end
$var reg 1 K1 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 D1 Cin $end
$var wire 1 L1 a $end
$var wire 1 M1 b $end
$var reg 1 E1 Cout $end
$var reg 1 N1 p $end
$var reg 1 O1 q $end
$var reg 1 P1 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 (1 Cin $end
$var wire 1 Q1 a $end
$var wire 1 R1 b $end
$var reg 1 S1 Cout $end
$var reg 1 T1 p $end
$var reg 1 U1 q $end
$var reg 1 V1 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 (1 Cin $end
$var wire 1 W1 a $end
$var wire 1 X1 b $end
$var reg 1 Y1 Cout $end
$var reg 1 Z1 p $end
$var reg 1 [1 q $end
$var reg 1 \1 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 (1 Cin $end
$var wire 1 ]1 a $end
$var wire 1 ^1 b $end
$var reg 1 _1 Cout $end
$var reg 1 `1 p $end
$var reg 1 a1 q $end
$var reg 1 b1 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 (1 Cin $end
$var wire 1 c1 a $end
$var wire 1 d1 b $end
$var reg 1 e1 Cout $end
$var reg 1 f1 p $end
$var reg 1 g1 q $end
$var reg 1 h1 sum $end
$upscope $end
$scope module total $end
$var wire 3 i1 a [2:0] $end
$var wire 3 j1 b [2:0] $end
$var wire 1 k1 gnd $end
$var wire 3 l1 sum [2:0] $end
$var wire 1 m1 carry1 $end
$var wire 1 n1 carry0 $end
$var wire 1 o1 Cout $end
$scope module adder0 $end
$var wire 1 k1 Cin $end
$var wire 1 p1 a $end
$var wire 1 q1 b $end
$var reg 1 n1 Cout $end
$var reg 1 r1 p $end
$var reg 1 s1 q $end
$var reg 1 t1 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 n1 Cin $end
$var wire 1 u1 a $end
$var wire 1 v1 b $end
$var reg 1 m1 Cout $end
$var reg 1 w1 p $end
$var reg 1 x1 q $end
$var reg 1 y1 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 m1 Cin $end
$var wire 1 z1 a $end
$var wire 1 {1 b $end
$var reg 1 o1 Cout $end
$var reg 1 |1 p $end
$var reg 1 }1 q $end
$var reg 1 ~1 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 !2 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 "2 state_0 $end
$var wire 4 #2 living_neighbors [3:0] $end
$var reg 1 $2 state_d $end
$var reg 1 %2 state_q $end
$var reg 1 &2 stay_alive $end
$scope module living $end
$var wire 1 '2 gnd $end
$var wire 8 (2 in [7:0] $end
$var wire 3 )2 sum1 [2:0] $end
$var wire 3 *2 sum0 [2:0] $end
$var wire 4 +2 num [3:0] $end
$var wire 2 ,2 count3 [1:0] $end
$var wire 2 -2 count2 [1:0] $end
$var wire 2 .2 count1 [1:0] $end
$var wire 2 /2 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 02 a [1:0] $end
$var wire 2 12 b [1:0] $end
$var wire 2 22 sum [1:0] $end
$var wire 1 32 carry0 $end
$var wire 1 42 Cout $end
$scope module adder0 $end
$var wire 1 52 Cin $end
$var wire 1 62 a $end
$var wire 1 72 b $end
$var reg 1 32 Cout $end
$var reg 1 82 p $end
$var reg 1 92 q $end
$var reg 1 :2 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 32 Cin $end
$var wire 1 ;2 a $end
$var wire 1 <2 b $end
$var reg 1 42 Cout $end
$var reg 1 =2 p $end
$var reg 1 >2 q $end
$var reg 1 ?2 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 @2 a [1:0] $end
$var wire 2 A2 b [1:0] $end
$var wire 2 B2 sum [1:0] $end
$var wire 1 C2 carry0 $end
$var wire 1 D2 Cout $end
$scope module adder0 $end
$var wire 1 E2 Cin $end
$var wire 1 F2 a $end
$var wire 1 G2 b $end
$var reg 1 C2 Cout $end
$var reg 1 H2 p $end
$var reg 1 I2 q $end
$var reg 1 J2 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 C2 Cin $end
$var wire 1 K2 a $end
$var wire 1 L2 b $end
$var reg 1 D2 Cout $end
$var reg 1 M2 p $end
$var reg 1 N2 q $end
$var reg 1 O2 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 '2 Cin $end
$var wire 1 P2 a $end
$var wire 1 Q2 b $end
$var reg 1 R2 Cout $end
$var reg 1 S2 p $end
$var reg 1 T2 q $end
$var reg 1 U2 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 '2 Cin $end
$var wire 1 V2 a $end
$var wire 1 W2 b $end
$var reg 1 X2 Cout $end
$var reg 1 Y2 p $end
$var reg 1 Z2 q $end
$var reg 1 [2 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 '2 Cin $end
$var wire 1 \2 a $end
$var wire 1 ]2 b $end
$var reg 1 ^2 Cout $end
$var reg 1 _2 p $end
$var reg 1 `2 q $end
$var reg 1 a2 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 '2 Cin $end
$var wire 1 b2 a $end
$var wire 1 c2 b $end
$var reg 1 d2 Cout $end
$var reg 1 e2 p $end
$var reg 1 f2 q $end
$var reg 1 g2 sum $end
$upscope $end
$scope module total $end
$var wire 3 h2 a [2:0] $end
$var wire 3 i2 b [2:0] $end
$var wire 1 j2 gnd $end
$var wire 3 k2 sum [2:0] $end
$var wire 1 l2 carry1 $end
$var wire 1 m2 carry0 $end
$var wire 1 n2 Cout $end
$scope module adder0 $end
$var wire 1 j2 Cin $end
$var wire 1 o2 a $end
$var wire 1 p2 b $end
$var reg 1 m2 Cout $end
$var reg 1 q2 p $end
$var reg 1 r2 q $end
$var reg 1 s2 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 m2 Cin $end
$var wire 1 t2 a $end
$var wire 1 u2 b $end
$var reg 1 l2 Cout $end
$var reg 1 v2 p $end
$var reg 1 w2 q $end
$var reg 1 x2 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 l2 Cin $end
$var wire 1 y2 a $end
$var wire 1 z2 b $end
$var reg 1 n2 Cout $end
$var reg 1 {2 p $end
$var reg 1 |2 q $end
$var reg 1 }2 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 ~2 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 !3 state_0 $end
$var wire 4 "3 living_neighbors [3:0] $end
$var reg 1 #3 state_d $end
$var reg 1 $3 state_q $end
$var reg 1 %3 stay_alive $end
$scope module living $end
$var wire 1 &3 gnd $end
$var wire 8 '3 in [7:0] $end
$var wire 3 (3 sum1 [2:0] $end
$var wire 3 )3 sum0 [2:0] $end
$var wire 4 *3 num [3:0] $end
$var wire 2 +3 count3 [1:0] $end
$var wire 2 ,3 count2 [1:0] $end
$var wire 2 -3 count1 [1:0] $end
$var wire 2 .3 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 /3 a [1:0] $end
$var wire 2 03 b [1:0] $end
$var wire 2 13 sum [1:0] $end
$var wire 1 23 carry0 $end
$var wire 1 33 Cout $end
$scope module adder0 $end
$var wire 1 43 Cin $end
$var wire 1 53 a $end
$var wire 1 63 b $end
$var reg 1 23 Cout $end
$var reg 1 73 p $end
$var reg 1 83 q $end
$var reg 1 93 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 23 Cin $end
$var wire 1 :3 a $end
$var wire 1 ;3 b $end
$var reg 1 33 Cout $end
$var reg 1 <3 p $end
$var reg 1 =3 q $end
$var reg 1 >3 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 ?3 a [1:0] $end
$var wire 2 @3 b [1:0] $end
$var wire 2 A3 sum [1:0] $end
$var wire 1 B3 carry0 $end
$var wire 1 C3 Cout $end
$scope module adder0 $end
$var wire 1 D3 Cin $end
$var wire 1 E3 a $end
$var wire 1 F3 b $end
$var reg 1 B3 Cout $end
$var reg 1 G3 p $end
$var reg 1 H3 q $end
$var reg 1 I3 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 B3 Cin $end
$var wire 1 J3 a $end
$var wire 1 K3 b $end
$var reg 1 C3 Cout $end
$var reg 1 L3 p $end
$var reg 1 M3 q $end
$var reg 1 N3 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 &3 Cin $end
$var wire 1 O3 a $end
$var wire 1 P3 b $end
$var reg 1 Q3 Cout $end
$var reg 1 R3 p $end
$var reg 1 S3 q $end
$var reg 1 T3 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 &3 Cin $end
$var wire 1 U3 a $end
$var wire 1 V3 b $end
$var reg 1 W3 Cout $end
$var reg 1 X3 p $end
$var reg 1 Y3 q $end
$var reg 1 Z3 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 &3 Cin $end
$var wire 1 [3 a $end
$var wire 1 \3 b $end
$var reg 1 ]3 Cout $end
$var reg 1 ^3 p $end
$var reg 1 _3 q $end
$var reg 1 `3 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 &3 Cin $end
$var wire 1 a3 a $end
$var wire 1 b3 b $end
$var reg 1 c3 Cout $end
$var reg 1 d3 p $end
$var reg 1 e3 q $end
$var reg 1 f3 sum $end
$upscope $end
$scope module total $end
$var wire 3 g3 a [2:0] $end
$var wire 3 h3 b [2:0] $end
$var wire 1 i3 gnd $end
$var wire 3 j3 sum [2:0] $end
$var wire 1 k3 carry1 $end
$var wire 1 l3 carry0 $end
$var wire 1 m3 Cout $end
$scope module adder0 $end
$var wire 1 i3 Cin $end
$var wire 1 n3 a $end
$var wire 1 o3 b $end
$var reg 1 l3 Cout $end
$var reg 1 p3 p $end
$var reg 1 q3 q $end
$var reg 1 r3 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 l3 Cin $end
$var wire 1 s3 a $end
$var wire 1 t3 b $end
$var reg 1 k3 Cout $end
$var reg 1 u3 p $end
$var reg 1 v3 q $end
$var reg 1 w3 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 k3 Cin $end
$var wire 1 x3 a $end
$var wire 1 y3 b $end
$var reg 1 m3 Cout $end
$var reg 1 z3 p $end
$var reg 1 {3 q $end
$var reg 1 |3 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 }3 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 ~3 state_0 $end
$var wire 4 !4 living_neighbors [3:0] $end
$var reg 1 "4 state_d $end
$var reg 1 #4 state_q $end
$var reg 1 $4 stay_alive $end
$scope module living $end
$var wire 1 %4 gnd $end
$var wire 8 &4 in [7:0] $end
$var wire 3 '4 sum1 [2:0] $end
$var wire 3 (4 sum0 [2:0] $end
$var wire 4 )4 num [3:0] $end
$var wire 2 *4 count3 [1:0] $end
$var wire 2 +4 count2 [1:0] $end
$var wire 2 ,4 count1 [1:0] $end
$var wire 2 -4 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 .4 a [1:0] $end
$var wire 2 /4 b [1:0] $end
$var wire 2 04 sum [1:0] $end
$var wire 1 14 carry0 $end
$var wire 1 24 Cout $end
$scope module adder0 $end
$var wire 1 34 Cin $end
$var wire 1 44 a $end
$var wire 1 54 b $end
$var reg 1 14 Cout $end
$var reg 1 64 p $end
$var reg 1 74 q $end
$var reg 1 84 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 14 Cin $end
$var wire 1 94 a $end
$var wire 1 :4 b $end
$var reg 1 24 Cout $end
$var reg 1 ;4 p $end
$var reg 1 <4 q $end
$var reg 1 =4 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 >4 a [1:0] $end
$var wire 2 ?4 b [1:0] $end
$var wire 2 @4 sum [1:0] $end
$var wire 1 A4 carry0 $end
$var wire 1 B4 Cout $end
$scope module adder0 $end
$var wire 1 C4 Cin $end
$var wire 1 D4 a $end
$var wire 1 E4 b $end
$var reg 1 A4 Cout $end
$var reg 1 F4 p $end
$var reg 1 G4 q $end
$var reg 1 H4 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 A4 Cin $end
$var wire 1 I4 a $end
$var wire 1 J4 b $end
$var reg 1 B4 Cout $end
$var reg 1 K4 p $end
$var reg 1 L4 q $end
$var reg 1 M4 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 %4 Cin $end
$var wire 1 N4 a $end
$var wire 1 O4 b $end
$var reg 1 P4 Cout $end
$var reg 1 Q4 p $end
$var reg 1 R4 q $end
$var reg 1 S4 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 %4 Cin $end
$var wire 1 T4 a $end
$var wire 1 U4 b $end
$var reg 1 V4 Cout $end
$var reg 1 W4 p $end
$var reg 1 X4 q $end
$var reg 1 Y4 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 %4 Cin $end
$var wire 1 Z4 a $end
$var wire 1 [4 b $end
$var reg 1 \4 Cout $end
$var reg 1 ]4 p $end
$var reg 1 ^4 q $end
$var reg 1 _4 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 %4 Cin $end
$var wire 1 `4 a $end
$var wire 1 a4 b $end
$var reg 1 b4 Cout $end
$var reg 1 c4 p $end
$var reg 1 d4 q $end
$var reg 1 e4 sum $end
$upscope $end
$scope module total $end
$var wire 3 f4 a [2:0] $end
$var wire 3 g4 b [2:0] $end
$var wire 1 h4 gnd $end
$var wire 3 i4 sum [2:0] $end
$var wire 1 j4 carry1 $end
$var wire 1 k4 carry0 $end
$var wire 1 l4 Cout $end
$scope module adder0 $end
$var wire 1 h4 Cin $end
$var wire 1 m4 a $end
$var wire 1 n4 b $end
$var reg 1 k4 Cout $end
$var reg 1 o4 p $end
$var reg 1 p4 q $end
$var reg 1 q4 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 k4 Cin $end
$var wire 1 r4 a $end
$var wire 1 s4 b $end
$var reg 1 j4 Cout $end
$var reg 1 t4 p $end
$var reg 1 u4 q $end
$var reg 1 v4 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 j4 Cin $end
$var wire 1 w4 a $end
$var wire 1 x4 b $end
$var reg 1 l4 Cout $end
$var reg 1 y4 p $end
$var reg 1 z4 q $end
$var reg 1 {4 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[5] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 |4 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 }4 state_0 $end
$var wire 4 ~4 living_neighbors [3:0] $end
$var reg 1 !5 state_d $end
$var reg 1 "5 state_q $end
$var reg 1 #5 stay_alive $end
$scope module living $end
$var wire 1 $5 gnd $end
$var wire 8 %5 in [7:0] $end
$var wire 3 &5 sum1 [2:0] $end
$var wire 3 '5 sum0 [2:0] $end
$var wire 4 (5 num [3:0] $end
$var wire 2 )5 count3 [1:0] $end
$var wire 2 *5 count2 [1:0] $end
$var wire 2 +5 count1 [1:0] $end
$var wire 2 ,5 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 -5 a [1:0] $end
$var wire 2 .5 b [1:0] $end
$var wire 2 /5 sum [1:0] $end
$var wire 1 05 carry0 $end
$var wire 1 15 Cout $end
$scope module adder0 $end
$var wire 1 25 Cin $end
$var wire 1 35 a $end
$var wire 1 45 b $end
$var reg 1 05 Cout $end
$var reg 1 55 p $end
$var reg 1 65 q $end
$var reg 1 75 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 05 Cin $end
$var wire 1 85 a $end
$var wire 1 95 b $end
$var reg 1 15 Cout $end
$var reg 1 :5 p $end
$var reg 1 ;5 q $end
$var reg 1 <5 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 =5 a [1:0] $end
$var wire 2 >5 b [1:0] $end
$var wire 2 ?5 sum [1:0] $end
$var wire 1 @5 carry0 $end
$var wire 1 A5 Cout $end
$scope module adder0 $end
$var wire 1 B5 Cin $end
$var wire 1 C5 a $end
$var wire 1 D5 b $end
$var reg 1 @5 Cout $end
$var reg 1 E5 p $end
$var reg 1 F5 q $end
$var reg 1 G5 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 @5 Cin $end
$var wire 1 H5 a $end
$var wire 1 I5 b $end
$var reg 1 A5 Cout $end
$var reg 1 J5 p $end
$var reg 1 K5 q $end
$var reg 1 L5 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 $5 Cin $end
$var wire 1 M5 a $end
$var wire 1 N5 b $end
$var reg 1 O5 Cout $end
$var reg 1 P5 p $end
$var reg 1 Q5 q $end
$var reg 1 R5 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 $5 Cin $end
$var wire 1 S5 a $end
$var wire 1 T5 b $end
$var reg 1 U5 Cout $end
$var reg 1 V5 p $end
$var reg 1 W5 q $end
$var reg 1 X5 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 $5 Cin $end
$var wire 1 Y5 a $end
$var wire 1 Z5 b $end
$var reg 1 [5 Cout $end
$var reg 1 \5 p $end
$var reg 1 ]5 q $end
$var reg 1 ^5 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 $5 Cin $end
$var wire 1 _5 a $end
$var wire 1 `5 b $end
$var reg 1 a5 Cout $end
$var reg 1 b5 p $end
$var reg 1 c5 q $end
$var reg 1 d5 sum $end
$upscope $end
$scope module total $end
$var wire 3 e5 a [2:0] $end
$var wire 3 f5 b [2:0] $end
$var wire 1 g5 gnd $end
$var wire 3 h5 sum [2:0] $end
$var wire 1 i5 carry1 $end
$var wire 1 j5 carry0 $end
$var wire 1 k5 Cout $end
$scope module adder0 $end
$var wire 1 g5 Cin $end
$var wire 1 l5 a $end
$var wire 1 m5 b $end
$var reg 1 j5 Cout $end
$var reg 1 n5 p $end
$var reg 1 o5 q $end
$var reg 1 p5 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 j5 Cin $end
$var wire 1 q5 a $end
$var wire 1 r5 b $end
$var reg 1 i5 Cout $end
$var reg 1 s5 p $end
$var reg 1 t5 q $end
$var reg 1 u5 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 i5 Cin $end
$var wire 1 v5 a $end
$var wire 1 w5 b $end
$var reg 1 k5 Cout $end
$var reg 1 x5 p $end
$var reg 1 y5 q $end
$var reg 1 z5 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 {5 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 |5 state_0 $end
$var wire 4 }5 living_neighbors [3:0] $end
$var reg 1 ~5 state_d $end
$var reg 1 !6 state_q $end
$var reg 1 "6 stay_alive $end
$scope module living $end
$var wire 1 #6 gnd $end
$var wire 8 $6 in [7:0] $end
$var wire 3 %6 sum1 [2:0] $end
$var wire 3 &6 sum0 [2:0] $end
$var wire 4 '6 num [3:0] $end
$var wire 2 (6 count3 [1:0] $end
$var wire 2 )6 count2 [1:0] $end
$var wire 2 *6 count1 [1:0] $end
$var wire 2 +6 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 ,6 a [1:0] $end
$var wire 2 -6 b [1:0] $end
$var wire 2 .6 sum [1:0] $end
$var wire 1 /6 carry0 $end
$var wire 1 06 Cout $end
$scope module adder0 $end
$var wire 1 16 Cin $end
$var wire 1 26 a $end
$var wire 1 36 b $end
$var reg 1 /6 Cout $end
$var reg 1 46 p $end
$var reg 1 56 q $end
$var reg 1 66 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 /6 Cin $end
$var wire 1 76 a $end
$var wire 1 86 b $end
$var reg 1 06 Cout $end
$var reg 1 96 p $end
$var reg 1 :6 q $end
$var reg 1 ;6 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 <6 a [1:0] $end
$var wire 2 =6 b [1:0] $end
$var wire 2 >6 sum [1:0] $end
$var wire 1 ?6 carry0 $end
$var wire 1 @6 Cout $end
$scope module adder0 $end
$var wire 1 A6 Cin $end
$var wire 1 B6 a $end
$var wire 1 C6 b $end
$var reg 1 ?6 Cout $end
$var reg 1 D6 p $end
$var reg 1 E6 q $end
$var reg 1 F6 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ?6 Cin $end
$var wire 1 G6 a $end
$var wire 1 H6 b $end
$var reg 1 @6 Cout $end
$var reg 1 I6 p $end
$var reg 1 J6 q $end
$var reg 1 K6 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 #6 Cin $end
$var wire 1 L6 a $end
$var wire 1 M6 b $end
$var reg 1 N6 Cout $end
$var reg 1 O6 p $end
$var reg 1 P6 q $end
$var reg 1 Q6 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 #6 Cin $end
$var wire 1 R6 a $end
$var wire 1 S6 b $end
$var reg 1 T6 Cout $end
$var reg 1 U6 p $end
$var reg 1 V6 q $end
$var reg 1 W6 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 #6 Cin $end
$var wire 1 X6 a $end
$var wire 1 Y6 b $end
$var reg 1 Z6 Cout $end
$var reg 1 [6 p $end
$var reg 1 \6 q $end
$var reg 1 ]6 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 #6 Cin $end
$var wire 1 ^6 a $end
$var wire 1 _6 b $end
$var reg 1 `6 Cout $end
$var reg 1 a6 p $end
$var reg 1 b6 q $end
$var reg 1 c6 sum $end
$upscope $end
$scope module total $end
$var wire 3 d6 a [2:0] $end
$var wire 3 e6 b [2:0] $end
$var wire 1 f6 gnd $end
$var wire 3 g6 sum [2:0] $end
$var wire 1 h6 carry1 $end
$var wire 1 i6 carry0 $end
$var wire 1 j6 Cout $end
$scope module adder0 $end
$var wire 1 f6 Cin $end
$var wire 1 k6 a $end
$var wire 1 l6 b $end
$var reg 1 i6 Cout $end
$var reg 1 m6 p $end
$var reg 1 n6 q $end
$var reg 1 o6 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 i6 Cin $end
$var wire 1 p6 a $end
$var wire 1 q6 b $end
$var reg 1 h6 Cout $end
$var reg 1 r6 p $end
$var reg 1 s6 q $end
$var reg 1 t6 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 h6 Cin $end
$var wire 1 u6 a $end
$var wire 1 v6 b $end
$var reg 1 j6 Cout $end
$var reg 1 w6 p $end
$var reg 1 x6 q $end
$var reg 1 y6 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 z6 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 {6 state_0 $end
$var wire 4 |6 living_neighbors [3:0] $end
$var reg 1 }6 state_d $end
$var reg 1 ~6 state_q $end
$var reg 1 !7 stay_alive $end
$scope module living $end
$var wire 1 "7 gnd $end
$var wire 8 #7 in [7:0] $end
$var wire 3 $7 sum1 [2:0] $end
$var wire 3 %7 sum0 [2:0] $end
$var wire 4 &7 num [3:0] $end
$var wire 2 '7 count3 [1:0] $end
$var wire 2 (7 count2 [1:0] $end
$var wire 2 )7 count1 [1:0] $end
$var wire 2 *7 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 +7 a [1:0] $end
$var wire 2 ,7 b [1:0] $end
$var wire 2 -7 sum [1:0] $end
$var wire 1 .7 carry0 $end
$var wire 1 /7 Cout $end
$scope module adder0 $end
$var wire 1 07 Cin $end
$var wire 1 17 a $end
$var wire 1 27 b $end
$var reg 1 .7 Cout $end
$var reg 1 37 p $end
$var reg 1 47 q $end
$var reg 1 57 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 .7 Cin $end
$var wire 1 67 a $end
$var wire 1 77 b $end
$var reg 1 /7 Cout $end
$var reg 1 87 p $end
$var reg 1 97 q $end
$var reg 1 :7 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 ;7 a [1:0] $end
$var wire 2 <7 b [1:0] $end
$var wire 2 =7 sum [1:0] $end
$var wire 1 >7 carry0 $end
$var wire 1 ?7 Cout $end
$scope module adder0 $end
$var wire 1 @7 Cin $end
$var wire 1 A7 a $end
$var wire 1 B7 b $end
$var reg 1 >7 Cout $end
$var reg 1 C7 p $end
$var reg 1 D7 q $end
$var reg 1 E7 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 >7 Cin $end
$var wire 1 F7 a $end
$var wire 1 G7 b $end
$var reg 1 ?7 Cout $end
$var reg 1 H7 p $end
$var reg 1 I7 q $end
$var reg 1 J7 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 "7 Cin $end
$var wire 1 K7 a $end
$var wire 1 L7 b $end
$var reg 1 M7 Cout $end
$var reg 1 N7 p $end
$var reg 1 O7 q $end
$var reg 1 P7 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 "7 Cin $end
$var wire 1 Q7 a $end
$var wire 1 R7 b $end
$var reg 1 S7 Cout $end
$var reg 1 T7 p $end
$var reg 1 U7 q $end
$var reg 1 V7 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 "7 Cin $end
$var wire 1 W7 a $end
$var wire 1 X7 b $end
$var reg 1 Y7 Cout $end
$var reg 1 Z7 p $end
$var reg 1 [7 q $end
$var reg 1 \7 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 "7 Cin $end
$var wire 1 ]7 a $end
$var wire 1 ^7 b $end
$var reg 1 _7 Cout $end
$var reg 1 `7 p $end
$var reg 1 a7 q $end
$var reg 1 b7 sum $end
$upscope $end
$scope module total $end
$var wire 3 c7 a [2:0] $end
$var wire 3 d7 b [2:0] $end
$var wire 1 e7 gnd $end
$var wire 3 f7 sum [2:0] $end
$var wire 1 g7 carry1 $end
$var wire 1 h7 carry0 $end
$var wire 1 i7 Cout $end
$scope module adder0 $end
$var wire 1 e7 Cin $end
$var wire 1 j7 a $end
$var wire 1 k7 b $end
$var reg 1 h7 Cout $end
$var reg 1 l7 p $end
$var reg 1 m7 q $end
$var reg 1 n7 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 h7 Cin $end
$var wire 1 o7 a $end
$var wire 1 p7 b $end
$var reg 1 g7 Cout $end
$var reg 1 q7 p $end
$var reg 1 r7 q $end
$var reg 1 s7 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 g7 Cin $end
$var wire 1 t7 a $end
$var wire 1 u7 b $end
$var reg 1 i7 Cout $end
$var reg 1 v7 p $end
$var reg 1 w7 q $end
$var reg 1 x7 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 y7 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 z7 state_0 $end
$var wire 4 {7 living_neighbors [3:0] $end
$var reg 1 |7 state_d $end
$var reg 1 }7 state_q $end
$var reg 1 ~7 stay_alive $end
$scope module living $end
$var wire 1 !8 gnd $end
$var wire 8 "8 in [7:0] $end
$var wire 3 #8 sum1 [2:0] $end
$var wire 3 $8 sum0 [2:0] $end
$var wire 4 %8 num [3:0] $end
$var wire 2 &8 count3 [1:0] $end
$var wire 2 '8 count2 [1:0] $end
$var wire 2 (8 count1 [1:0] $end
$var wire 2 )8 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 *8 a [1:0] $end
$var wire 2 +8 b [1:0] $end
$var wire 2 ,8 sum [1:0] $end
$var wire 1 -8 carry0 $end
$var wire 1 .8 Cout $end
$scope module adder0 $end
$var wire 1 /8 Cin $end
$var wire 1 08 a $end
$var wire 1 18 b $end
$var reg 1 -8 Cout $end
$var reg 1 28 p $end
$var reg 1 38 q $end
$var reg 1 48 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 -8 Cin $end
$var wire 1 58 a $end
$var wire 1 68 b $end
$var reg 1 .8 Cout $end
$var reg 1 78 p $end
$var reg 1 88 q $end
$var reg 1 98 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 :8 a [1:0] $end
$var wire 2 ;8 b [1:0] $end
$var wire 2 <8 sum [1:0] $end
$var wire 1 =8 carry0 $end
$var wire 1 >8 Cout $end
$scope module adder0 $end
$var wire 1 ?8 Cin $end
$var wire 1 @8 a $end
$var wire 1 A8 b $end
$var reg 1 =8 Cout $end
$var reg 1 B8 p $end
$var reg 1 C8 q $end
$var reg 1 D8 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 =8 Cin $end
$var wire 1 E8 a $end
$var wire 1 F8 b $end
$var reg 1 >8 Cout $end
$var reg 1 G8 p $end
$var reg 1 H8 q $end
$var reg 1 I8 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 !8 Cin $end
$var wire 1 J8 a $end
$var wire 1 K8 b $end
$var reg 1 L8 Cout $end
$var reg 1 M8 p $end
$var reg 1 N8 q $end
$var reg 1 O8 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 !8 Cin $end
$var wire 1 P8 a $end
$var wire 1 Q8 b $end
$var reg 1 R8 Cout $end
$var reg 1 S8 p $end
$var reg 1 T8 q $end
$var reg 1 U8 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 !8 Cin $end
$var wire 1 V8 a $end
$var wire 1 W8 b $end
$var reg 1 X8 Cout $end
$var reg 1 Y8 p $end
$var reg 1 Z8 q $end
$var reg 1 [8 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 !8 Cin $end
$var wire 1 \8 a $end
$var wire 1 ]8 b $end
$var reg 1 ^8 Cout $end
$var reg 1 _8 p $end
$var reg 1 `8 q $end
$var reg 1 a8 sum $end
$upscope $end
$scope module total $end
$var wire 3 b8 a [2:0] $end
$var wire 3 c8 b [2:0] $end
$var wire 1 d8 gnd $end
$var wire 3 e8 sum [2:0] $end
$var wire 1 f8 carry1 $end
$var wire 1 g8 carry0 $end
$var wire 1 h8 Cout $end
$scope module adder0 $end
$var wire 1 d8 Cin $end
$var wire 1 i8 a $end
$var wire 1 j8 b $end
$var reg 1 g8 Cout $end
$var reg 1 k8 p $end
$var reg 1 l8 q $end
$var reg 1 m8 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 g8 Cin $end
$var wire 1 n8 a $end
$var wire 1 o8 b $end
$var reg 1 f8 Cout $end
$var reg 1 p8 p $end
$var reg 1 q8 q $end
$var reg 1 r8 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 f8 Cin $end
$var wire 1 s8 a $end
$var wire 1 t8 b $end
$var reg 1 h8 Cout $end
$var reg 1 u8 p $end
$var reg 1 v8 q $end
$var reg 1 w8 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 . ena $end
$var wire 8 x8 neighbors [7:0] $end
$var wire 1 # rst $end
$var wire 1 y8 state_0 $end
$var wire 4 z8 living_neighbors [3:0] $end
$var reg 1 {8 state_d $end
$var reg 1 |8 state_q $end
$var reg 1 }8 stay_alive $end
$scope module living $end
$var wire 1 ~8 gnd $end
$var wire 8 !9 in [7:0] $end
$var wire 3 "9 sum1 [2:0] $end
$var wire 3 #9 sum0 [2:0] $end
$var wire 4 $9 num [3:0] $end
$var wire 2 %9 count3 [1:0] $end
$var wire 2 &9 count2 [1:0] $end
$var wire 2 '9 count1 [1:0] $end
$var wire 2 (9 count0 [1:0] $end
$scope module adder0 $end
$var wire 2 )9 a [1:0] $end
$var wire 2 *9 b [1:0] $end
$var wire 2 +9 sum [1:0] $end
$var wire 1 ,9 carry0 $end
$var wire 1 -9 Cout $end
$scope module adder0 $end
$var wire 1 .9 Cin $end
$var wire 1 /9 a $end
$var wire 1 09 b $end
$var reg 1 ,9 Cout $end
$var reg 1 19 p $end
$var reg 1 29 q $end
$var reg 1 39 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ,9 Cin $end
$var wire 1 49 a $end
$var wire 1 59 b $end
$var reg 1 -9 Cout $end
$var reg 1 69 p $end
$var reg 1 79 q $end
$var reg 1 89 sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 2 99 a [1:0] $end
$var wire 2 :9 b [1:0] $end
$var wire 2 ;9 sum [1:0] $end
$var wire 1 <9 carry0 $end
$var wire 1 =9 Cout $end
$scope module adder0 $end
$var wire 1 >9 Cin $end
$var wire 1 ?9 a $end
$var wire 1 @9 b $end
$var reg 1 <9 Cout $end
$var reg 1 A9 p $end
$var reg 1 B9 q $end
$var reg 1 C9 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 <9 Cin $end
$var wire 1 D9 a $end
$var wire 1 E9 b $end
$var reg 1 =9 Cout $end
$var reg 1 F9 p $end
$var reg 1 G9 q $end
$var reg 1 H9 sum $end
$upscope $end
$upscope $end
$scope module counter0 $end
$var wire 1 ~8 Cin $end
$var wire 1 I9 a $end
$var wire 1 J9 b $end
$var reg 1 K9 Cout $end
$var reg 1 L9 p $end
$var reg 1 M9 q $end
$var reg 1 N9 sum $end
$upscope $end
$scope module counter1 $end
$var wire 1 ~8 Cin $end
$var wire 1 O9 a $end
$var wire 1 P9 b $end
$var reg 1 Q9 Cout $end
$var reg 1 R9 p $end
$var reg 1 S9 q $end
$var reg 1 T9 sum $end
$upscope $end
$scope module counter2 $end
$var wire 1 ~8 Cin $end
$var wire 1 U9 a $end
$var wire 1 V9 b $end
$var reg 1 W9 Cout $end
$var reg 1 X9 p $end
$var reg 1 Y9 q $end
$var reg 1 Z9 sum $end
$upscope $end
$scope module counter3 $end
$var wire 1 ~8 Cin $end
$var wire 1 [9 a $end
$var wire 1 \9 b $end
$var reg 1 ]9 Cout $end
$var reg 1 ^9 p $end
$var reg 1 _9 q $end
$var reg 1 `9 sum $end
$upscope $end
$scope module total $end
$var wire 3 a9 a [2:0] $end
$var wire 3 b9 b [2:0] $end
$var wire 1 c9 gnd $end
$var wire 3 d9 sum [2:0] $end
$var wire 1 e9 carry1 $end
$var wire 1 f9 carry0 $end
$var wire 1 g9 Cout $end
$scope module adder0 $end
$var wire 1 c9 Cin $end
$var wire 1 h9 a $end
$var wire 1 i9 b $end
$var reg 1 f9 Cout $end
$var reg 1 j9 p $end
$var reg 1 k9 q $end
$var reg 1 l9 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 f9 Cin $end
$var wire 1 m9 a $end
$var wire 1 n9 b $end
$var reg 1 e9 Cout $end
$var reg 1 o9 p $end
$var reg 1 p9 q $end
$var reg 1 q9 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 e9 Cin $end
$var wire 1 r9 a $end
$var wire 1 s9 b $end
$var reg 1 g9 Cout $end
$var reg 1 t9 p $end
$var reg 1 u9 q $end
$var reg 1 v9 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[6] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope module LED_DRIVER $end
$var wire 25 w9 cells [24:0] $end
$var wire 1 x9 ena $end
$var wire 4 y9 x [3:0] $end
$var wire 5 z9 x_decoded [4:0] $end
$var reg 5 {9 cols [4:0] $end
$var reg 5 |9 rows [4:0] $end
$scope module COL_DECODER $end
$var wire 1 x9 ena $end
$var wire 3 }9 in [2:0] $end
$var wire 8 ~9 out [7:0] $end
$var wire 4 !: ena1 [3:0] $end
$scope module dec0 $end
$var wire 1 ": ena $end
$var wire 2 #: in [1:0] $end
$var wire 4 $: out [3:0] $end
$var wire 2 %: ena1 [1:0] $end
$scope module dec0 $end
$var wire 1 &: ena $end
$var wire 1 ': in $end
$var reg 2 (: out [1:0] $end
$upscope $end
$scope module dec1 $end
$var wire 1 ): ena $end
$var wire 1 *: in $end
$var reg 2 +: out [1:0] $end
$upscope $end
$scope module switcher $end
$var wire 1 ": ena $end
$var wire 1 ,: in $end
$var reg 2 -: out [1:0] $end
$upscope $end
$upscope $end
$scope module dec1 $end
$var wire 1 .: ena $end
$var wire 2 /: in [1:0] $end
$var wire 4 0: out [3:0] $end
$var wire 2 1: ena1 [1:0] $end
$scope module dec0 $end
$var wire 1 2: ena $end
$var wire 1 3: in $end
$var reg 2 4: out [1:0] $end
$upscope $end
$scope module dec1 $end
$var wire 1 5: ena $end
$var wire 1 6: in $end
$var reg 2 7: out [1:0] $end
$upscope $end
$scope module switcher $end
$var wire 1 .: ena $end
$var wire 1 8: in $end
$var reg 2 9: out [1:0] $end
$upscope $end
$upscope $end
$scope module switcher $end
$var wire 1 x9 ena $end
$var wire 1 :: in $end
$var reg 2 ;: out [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin clocks_and_dividers $end
$upscope $end
$scope begin io_logic $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ;:
x::
bx 9:
x8:
bx 7:
x6:
x5:
bx 4:
x3:
x2:
bx 1:
bx 0:
bx /:
x.:
bx -:
x,:
bx +:
x*:
x):
bx (:
x':
x&:
bx %:
bx $:
bx #:
x":
b0xx !:
bx ~9
bx }9
bx |9
bx {9
bx z9
bx y9
1x9
bx w9
xv9
0u9
0t9
0s9
0r9
xq9
0p9
xo9
xn9
0m9
xl9
xk9
xj9
xi9
xh9
0g9
xf9
xe9
bx d9
0c9
b0xx b9
b0x a9
x`9
x_9
x^9
x]9
x\9
x[9
0Z9
0Y9
0X9
0W9
0V9
0U9
0T9
0S9
0R9
0Q9
0P9
0O9
xN9
0M9
xL9
0K9
0J9
xI9
xH9
0G9
xF9
xE9
0D9
xC9
0B9
xA9
x@9
0?9
0>9
0=9
0<9
bx ;9
bx :9
b0 99
089
079
069
059
049
x39
029
x19
009
x/9
0.9
0-9
0,9
b0x +9
b0 *9
b0x )9
b0x (9
b0 '9
b0 &9
bx %9
b0xxx $9
b0x #9
b0xx "9
bx00000x !9
0~8
x}8
x|8
x{8
b0xxx z8
0y8
bx00000x x8
xw8
0v8
xu8
xt8
0s8
xr8
0q8
xp8
xo8
0n8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
bx e8
0d8
bx c8
b0x b8
xa8
x`8
x_8
x^8
x]8
x\8
x[8
xZ8
xY8
xX8
xW8
xV8
0U8
0T8
0S8
0R8
0Q8
0P8
xO8
0N8
xM8
0L8
0K8
xJ8
xI8
xH8
xG8
xF8
xE8
xD8
xC8
xB8
xA8
x@8
0?8
x>8
x=8
bx <8
bx ;8
bx :8
098
088
078
068
058
x48
038
x28
018
x08
0/8
0.8
0-8
b0x ,8
b0 +8
b0x *8
b0x )8
b0 (8
bx '8
bx &8
bx %8
b0x $8
bx #8
bx000x "8
0!8
x~7
x}7
x|7
bx {7
1z7
bx000x y7
xx7
0w7
xv7
xu7
0t7
xs7
0r7
xq7
xp7
0o7
xn7
xm7
xl7
xk7
xj7
xi7
xh7
xg7
bx f7
0e7
bx d7
b0x c7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xY7
xX7
xW7
0V7
0U7
0T7
0S7
0R7
0Q7
xP7
0O7
xN7
0M7
0L7
xK7
xJ7
xI7
xH7
xG7
xF7
xE7
xD7
xC7
xB7
xA7
0@7
x?7
x>7
bx =7
bx <7
bx ;7
0:7
097
087
077
067
x57
047
x37
027
x17
007
0/7
0.7
b0x -7
b0 ,7
b0x +7
b0x *7
b0 )7
bx (7
bx '7
bx &7
b0x %7
bx $7
bx000x #7
0"7
x!7
x~6
x}6
bx |6
0{6
bx000x z6
xy6
0x6
xw6
xv6
0u6
xt6
0s6
xr6
xq6
0p6
xo6
xn6
xm6
xl6
xk6
xj6
xi6
xh6
bx g6
0f6
bx e6
b0x d6
xc6
xb6
xa6
x`6
x_6
x^6
x]6
x\6
x[6
xZ6
xY6
xX6
0W6
0V6
0U6
0T6
0S6
0R6
xQ6
0P6
xO6
0N6
0M6
xL6
xK6
xJ6
xI6
xH6
xG6
xF6
xE6
xD6
xC6
xB6
0A6
x@6
x?6
bx >6
bx =6
bx <6
0;6
0:6
096
086
076
x66
056
x46
036
x26
016
006
0/6
b0x .6
b0 -6
b0x ,6
b0x +6
b0 *6
bx )6
bx (6
bx '6
b0x &6
bx %6
bx000x $6
0#6
x"6
x!6
x~5
bx }5
0|5
bx000x {5
xz5
0y5
xx5
xw5
0v5
xu5
0t5
xs5
xr5
0q5
xp5
0o5
xn5
xm5
0l5
0k5
0j5
0i5
bx h5
0g5
bx f5
b0 e5
xd5
0c5
xb5
0a5
0`5
x_5
x^5
x]5
x\5
x[5
xZ5
xY5
0X5
0W5
0V5
0U5
0T5
0S5
0R5
0Q5
0P5
0O5
0N5
0M5
xL5
0K5
xJ5
0I5
xH5
xG5
xF5
xE5
xD5
xC5
0B5
xA5
x@5
bx ?5
b0x >5
bx =5
0<5
0;5
0:5
095
085
075
065
055
045
035
025
015
005
b0 /5
b0 .5
b0 -5
b0 ,5
b0 +5
bx *5
b0x )5
b0xxx (5
b0 '5
bx &5
b0xxx0000 %5
0$5
x#5
x"5
x!5
b0xxx ~4
0}4
b0xxx0000 |4
x{4
0z4
xy4
0x4
xw4
xv4
xu4
xt4
xs4
xr4
xq4
xp4
xo4
xn4
xm4
xl4
xk4
xj4
bx i4
0h4
b0xx g4
bx f4
xe4
xd4
xc4
xb4
xa4
x`4
0_4
0^4
0]4
0\4
0[4
0Z4
xY4
0X4
xW4
0V4
0U4
xT4
xS4
xR4
xQ4
xP4
xO4
xN4
xM4
0L4
xK4
xJ4
0I4
xH4
0G4
xF4
xE4
0D4
0C4
0B4
0A4
bx @4
bx ?4
b0 >4
x=4
0<4
x;4
0:4
x94
x84
x74
x64
x54
x44
034
x24
x14
bx 04
b0x /4
bx .4
bx -4
b0x ,4
b0 +4
bx *4
bx )4
bx (4
b0xx '4
bx000xxx &4
0%4
x$4
x#4
x"4
bx !4
1~3
bx000xxx }3
x|3
x{3
xz3
xy3
xx3
xw3
xv3
xu3
xt3
xs3
xr3
xq3
xp3
xo3
xn3
xm3
xl3
xk3
bx j3
0i3
bx h3
bx g3
xf3
xe3
xd3
xc3
xb3
xa3
x`3
x_3
x^3
x]3
x\3
x[3
xZ3
xY3
xX3
xW3
xV3
xU3
xT3
xS3
xR3
xQ3
xP3
xO3
xN3
xM3
xL3
xK3
xJ3
xI3
xH3
xG3
xF3
xE3
0D3
xC3
xB3
bx A3
bx @3
bx ?3
x>3
x=3
x<3
x;3
x:3
x93
x83
x73
x63
x53
043
x33
x23
bx 13
bx 03
bx /3
bx .3
bx -3
bx ,3
bx +3
bx *3
bx )3
bx (3
bx '3
0&3
x%3
x$3
x#3
bx "3
0!3
bx ~2
x}2
x|2
x{2
xz2
xy2
xx2
xw2
xv2
xu2
xt2
xs2
xr2
xq2
xp2
xo2
xn2
xm2
xl2
bx k2
0j2
bx i2
bx h2
xg2
xf2
xe2
xd2
xc2
xb2
xa2
x`2
x_2
x^2
x]2
x\2
x[2
xZ2
xY2
xX2
xW2
xV2
xU2
xT2
xS2
xR2
xQ2
xP2
xO2
xN2
xM2
xL2
xK2
xJ2
xI2
xH2
xG2
xF2
0E2
xD2
xC2
bx B2
bx A2
bx @2
x?2
x>2
x=2
x<2
x;2
x:2
x92
x82
x72
x62
052
x42
x32
bx 22
bx 12
bx 02
bx /2
bx .2
bx -2
bx ,2
bx +2
bx *2
bx )2
bx (2
0'2
x&2
x%2
x$2
bx #2
1"2
bx !2
x~1
x}1
x|1
x{1
xz1
xy1
xx1
xw1
xv1
xu1
xt1
xs1
xr1
xq1
xp1
xo1
xn1
xm1
bx l1
0k1
bx j1
bx i1
xh1
xg1
xf1
xe1
xd1
xc1
xb1
xa1
x`1
x_1
x^1
x]1
x\1
x[1
xZ1
xY1
xX1
xW1
xV1
xU1
xT1
xS1
xR1
xQ1
xP1
xO1
xN1
xM1
xL1
xK1
xJ1
xI1
xH1
xG1
0F1
xE1
xD1
bx C1
bx B1
bx A1
x@1
x?1
x>1
x=1
x<1
x;1
x:1
x91
x81
x71
061
x51
x41
bx 31
bx 21
bx 11
bx 01
bx /1
bx .1
bx -1
bx ,1
bx +1
bx *1
bx )1
0(1
x'1
x&1
x%1
bx $1
0#1
bx "1
x!1
0~0
x}0
x|0
0{0
xz0
xy0
xx0
xw0
xv0
xu0
xt0
xs0
xr0
xq0
xp0
xo0
xn0
bx m0
0l0
bx k0
b0xx j0
xi0
0h0
xg0
0f0
0e0
xd0
xc0
xb0
xa0
x`0
x_0
x^0
x]0
x\0
x[0
xZ0
xY0
xX0
0W0
0V0
0U0
0T0
0S0
0R0
xQ0
0P0
xO0
0N0
xM0
xL0
xK0
xJ0
xI0
xH0
0G0
xF0
xE0
bx D0
b0x C0
bx B0
xA0
0@0
x?0
x>0
0=0
x<0
0;0
x:0
x90
080
070
060
050
bx 40
bx 30
b0 20
b0 10
bx 00
bx /0
b0x .0
bx -0
b0xx ,0
bx +0
b0xxxxx00 *0
0)0
x(0
x'0
x&0
bx %0
0$0
b0xxxxx00 #0
x"0
0!0
x~/
0}/
x|/
x{/
xz/
xy/
xx/
xw/
xv/
xu/
xt/
xs/
xr/
xq/
xp/
xo/
bx n/
0m/
b0xx l/
bx k/
xj/
xi/
xh/
xg/
xf/
xe/
0d/
0c/
0b/
0a/
0`/
0_/
x^/
0]/
x\/
0[/
0Z/
xY/
xX/
xW/
xV/
xU/
xT/
xS/
xR/
0Q/
xP/
xO/
0N/
xM/
0L/
xK/
xJ/
0I/
0H/
0G/
0F/
bx E/
bx D/
b0 C/
xB/
0A/
x@/
0?/
x>/
x=/
x</
x;/
x:/
x9/
08/
x7/
x6/
bx 5/
b0x 4/
bx 3/
bx 2/
b0x 1/
b0 0/
bx //
bx ./
bx -/
b0xx ,/
bx000xxx +/
0*/
x)/
x(/
x'/
bx &/
1%/
bx000xxx $/
x#/
x"/
x!/
x~.
x}.
x|.
x{.
xz.
xy.
xx.
xw.
xv.
xu.
xt.
xs.
xr.
xq.
xp.
bx o.
0n.
bx m.
bx l.
xk.
xj.
xi.
xh.
xg.
xf.
xe.
xd.
xc.
xb.
xa.
x`.
x_.
x^.
x].
x\.
x[.
xZ.
xY.
xX.
xW.
xV.
xU.
xT.
xS.
xR.
xQ.
xP.
xO.
xN.
xM.
xL.
xK.
xJ.
0I.
xH.
xG.
bx F.
bx E.
bx D.
xC.
xB.
xA.
x@.
x?.
x>.
x=.
x<.
x;.
x:.
09.
x8.
x7.
bx 6.
bx 5.
bx 4.
bx 3.
bx 2.
bx 1.
bx 0.
bx /.
bx ..
bx -.
bx ,.
0+.
x*.
x).
x(.
bx '.
0&.
bx %.
x$.
x#.
x".
x!.
x~-
x}-
x|-
x{-
xz-
xy-
xx-
xw-
xv-
xu-
xt-
xs-
xr-
xq-
bx p-
0o-
bx n-
bx m-
xl-
xk-
xj-
xi-
xh-
xg-
xf-
xe-
xd-
xc-
xb-
xa-
x`-
x_-
x^-
x]-
x\-
x[-
xZ-
xY-
xX-
xW-
xV-
xU-
xT-
xS-
xR-
xQ-
xP-
xO-
xN-
xM-
xL-
xK-
0J-
xI-
xH-
bx G-
bx F-
bx E-
xD-
xC-
xB-
xA-
x@-
x?-
x>-
x=-
x<-
x;-
0:-
x9-
x8-
bx 7-
bx 6-
bx 5-
bx 4-
bx 3-
bx 2-
bx 1-
bx 0-
bx /-
bx .-
bx --
0,-
x+-
x*-
x)-
bx (-
0'-
bx &-
x%-
x$-
x#-
x"-
x!-
x~,
x},
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
xs,
xr,
bx q,
0p,
bx o,
bx n,
xm,
xl,
xk,
xj,
xi,
xh,
xg,
xf,
xe,
xd,
xc,
xb,
xa,
x`,
x_,
x^,
x],
x\,
x[,
xZ,
xY,
xX,
xW,
xV,
xU,
xT,
xS,
xR,
xQ,
xP,
xO,
xN,
xM,
xL,
0K,
xJ,
xI,
bx H,
bx G,
bx F,
xE,
xD,
xC,
xB,
xA,
x@,
x?,
x>,
x=,
x<,
0;,
x:,
x9,
bx 8,
bx 7,
bx 6,
bx 5,
bx 4,
bx 3,
bx 2,
bx 1,
bx 0,
bx /,
bx .,
0-,
x,,
x+,
x*,
bx ),
1(,
bx ',
x&,
0%,
x$,
x#,
0",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
bx r+
0q+
bx p+
b0xx o+
xn+
0m+
xl+
0k+
0j+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
xb+
xa+
x`+
x_+
x^+
x]+
0\+
0[+
0Z+
0Y+
0X+
0W+
xV+
0U+
xT+
0S+
xR+
xQ+
xP+
xO+
xN+
xM+
0L+
xK+
xJ+
bx I+
b0x H+
bx G+
xF+
0E+
xD+
xC+
0B+
xA+
0@+
x?+
x>+
0=+
0<+
0;+
0:+
bx 9+
bx 8+
b0 7+
b0 6+
bx 5+
bx 4+
b0x 3+
bx 2+
b0xx 1+
bx 0+
b0xxxxx00 /+
0.+
x-+
x,+
x++
bx *+
0)+
b0xxxxx00 (+
x'+
0&+
x%+
0$+
x#+
x"+
x!+
x~*
x}*
x|*
x{*
xz*
xy*
xx*
xw*
xv*
xu*
xt*
bx s*
0r*
b0xx q*
bx p*
xo*
xn*
xm*
xl*
xk*
xj*
0i*
0h*
0g*
0f*
0e*
0d*
xc*
0b*
xa*
0`*
0_*
x^*
x]*
x\*
x[*
xZ*
xY*
xX*
xW*
0V*
xU*
xT*
0S*
xR*
0Q*
xP*
xO*
0N*
0M*
0L*
0K*
bx J*
bx I*
b0 H*
xG*
0F*
xE*
0D*
xC*
xB*
xA*
x@*
x?*
x>*
0=*
x<*
x;*
bx :*
b0x 9*
bx 8*
bx 7*
b0x 6*
b0 5*
bx 4*
bx 3*
bx 2*
b0xx 1*
bx000xxx 0*
0/*
x.*
x-*
x,*
bx +*
0**
bx000xxx )*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xy)
xx)
xw)
xv)
xu)
bx t)
0s)
bx r)
bx q)
xp)
xo)
xn)
xm)
xl)
xk)
xj)
xi)
xh)
xg)
xf)
xe)
xd)
xc)
xb)
xa)
x`)
x_)
x^)
x])
x\)
x[)
xZ)
xY)
xX)
xW)
xV)
xU)
xT)
xS)
xR)
xQ)
xP)
xO)
0N)
xM)
xL)
bx K)
bx J)
bx I)
xH)
xG)
xF)
xE)
xD)
xC)
xB)
xA)
x@)
x?)
0>)
x=)
x<)
bx ;)
bx :)
bx 9)
bx 8)
bx 7)
bx 6)
bx 5)
bx 4)
bx 3)
bx 2)
bx 1)
00)
x/)
x.)
x-)
bx ,)
1+)
bx *)
x))
x()
x')
x&)
x%)
x$)
x#)
x")
x!)
x~(
x}(
x|(
x{(
xz(
xy(
xx(
xw(
xv(
bx u(
0t(
bx s(
bx r(
xq(
xp(
xo(
xn(
xm(
xl(
xk(
xj(
xi(
xh(
xg(
xf(
xe(
xd(
xc(
xb(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
0O(
xN(
xM(
bx L(
bx K(
bx J(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
0?(
x>(
x=(
bx <(
bx ;(
bx :(
bx 9(
bx 8(
bx 7(
bx 6(
bx 5(
bx 4(
bx 3(
bx 2(
01(
x0(
x/(
x.(
bx -(
1,(
bx +(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
bx v'
0u'
bx t'
bx s'
xr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
0P'
xO'
xN'
bx M'
bx L'
bx K'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
0@'
x?'
x>'
bx ='
bx <'
bx ;'
bx :'
bx 9'
bx 8'
bx 7'
bx 6'
bx 5'
bx 4'
bx 3'
02'
x1'
x0'
x/'
bx .'
0-'
bx ,'
x+'
0*'
x)'
x('
0''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
bx w&
0v&
bx u&
b0xx t&
xs&
0r&
xq&
0p&
0o&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
0a&
0`&
0_&
0^&
0]&
0\&
x[&
0Z&
xY&
0X&
xW&
xV&
xU&
xT&
xS&
xR&
0Q&
xP&
xO&
bx N&
b0x M&
bx L&
xK&
0J&
xI&
xH&
0G&
xF&
0E&
xD&
xC&
0B&
0A&
0@&
0?&
bx >&
bx =&
b0 <&
b0 ;&
bx :&
bx 9&
b0x 8&
bx 7&
b0xx 6&
bx 5&
b0xxxxx00 4&
03&
x2&
x1&
x0&
bx /&
0.&
b0xxxxx00 -&
x,&
0+&
x*&
0)&
x(&
x'&
0&&
x%&
0$&
x#&
x"&
0!&
x~%
0}%
x|%
0{%
0z%
0y%
bx x%
0w%
b0 v%
bx u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
xh%
0g%
xf%
0e%
0d%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
b0 O%
b0 N%
b0 M%
xL%
0K%
xJ%
0I%
xH%
xG%
xF%
xE%
xD%
xC%
0B%
xA%
x@%
bx ?%
b0x >%
bx =%
bx <%
b0x ;%
b0 :%
b0 9%
b0xxx 8%
bx 7%
b0 6%
b0xxx 5%
04%
x3%
x2%
x1%
b0xxx 0%
0/%
b0xxx .%
x-%
0,%
x+%
0*%
x)%
x(%
0'%
x&%
0%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
bx y$
0x$
b0x w$
bx v$
0u$
0t$
0s$
0r$
0q$
0p$
xo$
0n$
xm$
0l$
0k$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
0]$
0\$
0[$
0Z$
0Y$
xX$
0W$
xV$
0U$
xT$
0S$
0R$
0Q$
b0x P$
b0 O$
b0x N$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
0C$
xB$
xA$
bx @$
bx ?$
bx >$
bx =$
bx <$
b0x ;$
b0 :$
bx 9$
bx 8$
b0x 7$
b0xxxxx 6$
05$
x4$
x3$
x2$
bx 1$
00$
b0xxxxx /$
x.$
0-$
x,$
0+$
x*$
x)$
0($
x'$
0&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
bx z#
0y#
b0x x#
bx w#
0v#
0u#
0t#
0s#
0r#
0q#
xp#
0o#
xn#
0m#
0l#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
0^#
0]#
0\#
0[#
0Z#
xY#
0X#
xW#
0V#
xU#
0T#
0S#
0R#
b0x Q#
b0 P#
b0x O#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
0D#
xC#
xB#
bx A#
bx @#
bx ?#
bx >#
bx =#
b0x <#
b0 ;#
bx :#
bx 9#
b0x 8#
b0xxxxx 7#
06#
x5#
x4#
x3#
bx 2#
01#
b0xxxxx 0#
x/#
0.#
x-#
0,#
x+#
x*#
0)#
x(#
0'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
bx {"
0z"
b0x y"
bx x"
0w"
0v"
0u"
0t"
0s"
0r"
xq"
0p"
xo"
0n"
0m"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
0_"
0^"
0]"
0\"
0["
xZ"
0Y"
xX"
0W"
xV"
0U"
0T"
0S"
b0x R"
b0 Q"
b0x P"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
0E"
xD"
xC"
bx B"
bx A"
bx @"
bx ?"
bx >"
b0x ="
b0 <"
bx ;"
bx :"
b0x 9"
b0xxxxx 8"
07"
x6"
x5"
x4"
bx 3"
02"
b0xxxxx 1"
x0"
0/"
0."
0-"
0,"
x+"
0*"
x)"
0("
x'"
x&"
x%"
x$"
x#"
x""
0!"
x~
x}
bx |
0{
b0x z
b0xx y
0x
0w
0v
0u
0t
0s
xr
0q
xp
0o
0n
xm
xl
xk
xj
xi
xh
xg
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
x[
0Z
xY
0X
xW
0V
0U
0T
b0x S
b0 R
b0x Q
xP
0O
xN
xM
0L
xK
0J
xI
xH
0G
0F
0E
0D
bx C
bx B
b0 A
b0 @
bx ?
b0x >
b0 =
b0xxx <
b0xx ;
b0x :
b0xxx00 9
08
x7
x6
x5
b0xxx 4
03
b0xxx00 2
b110 1
b110 0
bx /
1.
b11 -
b10 ,
bx +
bx *
bx )
b1100001001000010100000100000000000000000 (
b0xxxxx00xxxxx00xxxxx00xxxxx00xxxxx00000000 '
b0xxxxx00xxxxx00xxxxx00xxxxx00xxxxx00000000 &
bx %
bx $
1#
0"
b11 !
$end
#5000
00"
05
04"
03#
01%
02$
00&
0/'
1.(
10(
0,*
1-)
1/)
0++
1*,
1,,
0)-
0v9
1'/
1)/
0(.
0!5
0&0
0~5
0%1
0{8
0}6
1$2
1&2
1|7
1~7
1"4
1$4
b1100001001000010100000100000000000000000 '
0#3
1&:
02:
0z&
0+'
0)'
0}
0+"
0)"
0~
b0 4
b0 <
b0 |
0&"
0%"
0$"
0~"
0/#
0-#
0|"
0*#
0(#
0}"
b1 3"
b1 ;"
b1 {"
1%#
0$#
1##
0,&
0*&
0'&
0%&
0}#
0.$
0,$
0{#
1)$
1'$
0|#
b10 2#
b10 :#
b10 z#
0$$
0#$
0"$
b1 0%
b1 8%
b1 x%
1"&
1~%
0|$
0-%
0+%
0z$
1(%
1&%
0{$
b10 1$
b10 9$
b10 y$
0#%
0"%
0!%
0u+
0&,
0$,
0x&
0&'
0%'
0$'
0y&
b1 /&
b1 7&
b1 w&
1!'
0~&
1}&
0y'
0*(
0)(
0((
0w'
1%(
0$(
0#(
1x'
b10 .'
b10 6'
b10 v'
0~'
1}'
0|'
0v*
0'+
0%+
0t*
1"+
0!+
1~*
0x(
0))
0()
0')
0v(
1$)
0#)
0")
1w(
b10 -(
b10 5(
b10 u(
0}(
1|(
0{(
0u*
b10 +*
b10 3*
b10 s*
0{*
0z*
0y*
0w)
0(*
0'*
0&*
0u)
1#*
0"*
1!*
0v)
b10 ,)
b10 4)
b10 t)
0|)
0{)
0z)
0p0
0!1
0}0
0s+
0!,
0~+
0}+
0t+
b1 *+
b1 2+
b1 r+
1z+
0y+
1x+
0t,
0%-
0$-
0#-
0r,
1~,
0},
0|,
1s,
b10 ),
b10 1,
b10 q,
0y,
1x,
0w,
0q/
0"0
0~/
0o/
1{/
0z/
0y/
0s-
1$.
0#.
0".
1q-
0}-
1|-
0{-
0r-
b100 (-
b100 0-
b100 p-
0x-
0w-
0v-
0e9
1q9
0o9
1p/
b10 &/
b10 ./
b10 n/
0v/
1u/
0t/
0r.
1#/
0"/
0!/
1p.
0|.
1{.
0z.
0q.
b101 '.
b101 /.
b101 o.
1w.
0v.
1u.
0z5
0x5
0u5
0s5
b0 ~4
b0 (5
b0 h5
0p5
0n5
0n0
0z0
0y0
0x0
0o0
b1 %0
b1 -0
b1 m0
1u0
0t0
1s0
0j6
0y6
0w6
0h6
0t6
0r6
0i6
b1 }5
b1 '6
b1 g6
1o6
0n6
1m6
0o1
0~1
0}1
0|1
0m1
1y1
0x1
1w1
0n1
b10 $1
b10 ,1
b10 l1
0t1
0s1
0r1
1f9
b10 z8
b10 $9
b10 d9
0l9
1k9
0j9
0i7
0x7
0v7
0g7
1s7
1q7
0h7
b10 |6
b10 &7
b10 f7
0n7
0m7
0l7
0l4
0{4
0y4
0j4
1v4
0u4
0t4
0n2
0}2
0|2
0{2
0l2
1x2
0w2
0v2
1m2
b10 #2
b10 +2
b10 k2
0s2
1r2
0q2
0h8
0w8
0u8
0f8
1r8
1p8
0g8
b10 {7
b10 %8
b10 e8
0m8
0l8
0k8
1k4
b10 !4
b10 )4
b10 i4
0q4
1p4
0o4
0m3
1|3
0{3
0z3
1k3
0w3
1v3
0u3
0l3
b100 "3
b100 *3
b100 j3
0r3
0q3
0p3
05:
0):
b1 z9
0#"
0"#
0!$
0}*
0x*
0~$
0('
0#'
0|&
0'"
0""
0'(
0"(
1{'
0+#
0&#
1!#
0&)
0!)
1z(
0(&
0#&
0*$
1%$
0~#
0x/
1s/
0%*
0~)
0y)
1|%
0)%
1$%
0}$
0#,
0|+
1w+
0"'
1{&
0"-
0{,
1v,
0&(
0!(
1z'
0!.
1z-
0u-
0#+
1|*
0%)
0~(
1y(
0s4
1n4
0~.
1y.
1t.
0w*
0$*
1})
0x)
0|0
0w0
1r0
0{+
0v+
0{1
1v1
0q1
0!-
0z,
1u,
0z2
0u2
1p2
0|/
0w/
0~-
1y-
0t-
0n9
1i9
0y3
1t3
0o3
1r/
0}.
1x.
0s.
0k6
0j7
0w5
0r5
0m5
0v0
0q0
0i8
0v6
0q6
1l6
0z1
0u1
0p1
1h9
0u7
1p7
0k7
0w4
0r4
0y2
0t2
1o2
0t8
1o8
0j8
1m4
0x3
1s3
0n3
1":
0.:
b0 1:
b0 9:
b0 7:
b0 0:
b0 4:
b1 %:
b1 -:
b0 +:
b1 ~9
b1 $:
b1 (:
b0 :
b0 z
b0 S
0[
0Y
b0 9"
b0 y"
b0 R"
0Z"
0X"
b0 8#
b0 x#
b0 Q#
0Y#
0W#
0W*
0U*
b0 1*
b0 q*
b0 J*
0R*
0P*
b0 7$
b0 w$
b0 P$
0X$
0V$
0P&
0[&
0Y&
0O&
b0 5&
b0 u&
b0 N&
0V&
0U&
0T&
0P
0N
b0 ;
b0 y
b0 C
0K
0I
0O'
0Z'
0Y'
0X'
0N'
b1 4'
b1 t'
b1 M'
1U'
0T'
1S'
0D"
0O"
0N"
0M"
0C"
b1 :"
b1 x"
b1 B"
1J"
0I"
1H"
0N(
0Y(
0X(
0W(
0M(
b1 3(
b1 s(
b1 L(
1T(
0S(
1R(
0A%
0L%
0J%
0C#
1N#
0M#
1L#
0B#
b10 9#
b10 w#
b10 A#
0I#
0H#
0G#
0R/
0P/
b1 ,/
b1 l/
b1 E/
1M/
1K/
0M)
0X)
0W)
0V)
0L)
b0 2)
b0 r)
b0 K)
0S)
0R)
0Q)
0@%
b1 7%
b1 u%
b1 ?%
1G%
0F%
1E%
0B$
1M$
0L$
0K$
1A$
b10 8$
b10 v$
b10 @$
0H$
1G$
0F$
0K+
0V+
0T+
0J+
b1 0+
b1 p+
b1 I+
1Q+
0P+
1O+
0K&
0I&
b1 6&
b1 t&
b1 >&
1F&
1D&
0J,
0U,
0T,
0S,
0I,
b1 /,
b1 o,
b1 H,
1P,
0O,
1N,
0?'
0J'
0I'
0H'
0>'
b1 5'
b1 s'
b1 ='
1E'
0D'
1C'
0I-
1T-
0S-
0R-
1H-
b10 .-
b10 n-
b10 G-
0O-
1N-
0M-
0<*
1G*
0E*
0>(
0I(
0H(
0G(
0=(
b1 4(
b1 r(
b1 <(
1D(
0C(
1B(
0M4
0K4
b1 '4
b1 g4
b1 @4
1H4
1F4
0H.
1S.
0R.
1Q.
0G.
b11 -.
b11 m.
b11 F.
1N.
0M.
1L.
1;*
b10 2*
b10 p*
b10 :*
0B*
1A*
0@*
0=)
1H)
0G)
0F)
1<)
b10 3)
b10 q)
b10 ;)
0C)
1B)
0A)
0F0
0Q0
0O0
0E0
b1 +0
b1 k0
b1 D0
1L0
0K0
1J0
0F+
0D+
b0 1+
b0 o+
b0 9+
0A+
0?+
0E1
1P1
0O1
0N1
1D1
b10 *1
b10 j1
b10 C1
0K1
1J1
0I1
0:,
0E,
0D,
0C,
09,
b1 0,
b1 n,
b1 8,
1@,
0?,
1>,
0D2
0O2
0N2
0M2
0C2
b1 )2
b1 i2
b1 B2
1J2
0I2
1H2
07/
0B/
0@/
09-
1D-
0C-
0B-
18-
b10 /-
b10 m-
b10 7-
0?-
1>-
0=-
0H9
0F9
b1 "9
b1 b9
b1 ;9
1C9
1A9
0C3
1N3
0M3
1L3
0B3
b10 (3
b10 h3
b10 A3
0I3
0H3
0G3
06/
b1 -/
b1 k/
b1 5/
1=/
0</
1;/
08.
1C.
0B.
0A.
17.
b10 ..
b10 l.
b10 6.
0>.
1=.
0<.
b0 &6
b0 d6
b0 .6
066
046
b0 %7
b0 c7
b0 -7
057
037
0A5
0L5
0J5
0@5
b0 &5
b0 f5
b0 ?5
0G5
0F5
0E5
0A0
0?0
b0 ,0
b0 j0
b0 40
0<0
0:0
b0 $8
b0 b8
b0 ,8
048
028
0@6
0K6
0J6
0I6
0?6
b1 %6
b1 e6
b1 >6
1F6
0E6
1D6
051
0@1
0?1
0>1
041
b0 +1
b0 i1
b0 31
0;1
0:1
091
b1 #9
b1 a9
b1 +9
139
119
0?7
1J7
0I7
0H7
1>7
b10 $7
b10 d7
b10 =7
0E7
1D7
0C7
024
0=4
0;4
042
0?2
0>2
0=2
032
b1 *2
b1 h2
b1 22
1:2
092
182
0>8
1I8
0H8
0G8
1=8
b10 #8
b10 c8
b10 <8
0D8
1C8
0B8
014
b1 (4
b1 f4
b1 04
184
074
164
033
1>3
0=3
0<3
123
b10 )3
b10 g3
b10 13
093
183
073
b1 !:
b1 ;:
08:
06:
03:
0,:
0*:
0':
0S&
0W'
0R'
0W
0V(
0Q(
0V"
0U)
0P)
0U#
0T*
0O*
0T$
0N+
0K"
0F"
0R,
0M,
0W&
0R&
0J#
0E#
0M
0H
0Q-
1L-
0V'
1Q'
0I$
1D$
0L"
1G"
1P.
0K.
0U(
1P(
0H%
1C%
1K#
0F#
0O/
1J/
0T)
0O)
0D%
0J$
1E$
0I0
0F'
0A'
0M1
1H1
0R+
1M+
0E(
1@(
0H&
1C&
0L2
1G2
0Q,
1L,
0D)
1?)
0G'
1B'
0K3
0F3
0P-
1K-
0C*
1>*
0F(
0A(
0J4
1E4
0O.
1J.
1?*
0E)
1@)
0D5
0A,
0<,
0H6
0C6
0M0
1H0
0@-
1;-
0C+
0>+
0G7
1B7
0L1
1G1
0?.
1:.
0B,
1=,
0F8
1A8
0K2
0F2
0>/
09/
0A-
1<-
0E9
1@9
1J3
0E3
1:/
0@.
1;.
026
0<1
071
017
0H5
0C5
0;2
062
0>0
090
008
0G6
1B6
0:3
153
0=1
081
1/9
0F7
1A7
094
144
0<2
172
0E8
1@8
054
0;3
163
0::
b0 /:
b0 #:
b0 8&
b0 M&
0s&
0q&
0o'
b0 7'
b0 L'
0r'
0q'
0p'
b0 >
b0 Q
0r
0p
0n(
b0 6(
b0 K(
0q(
0p(
0o(
b0 ="
b0 P"
0q"
0o"
0m)
b0 5)
b0 J)
0p)
0o)
0n)
b0 <#
b0 O#
0p#
0n#
0l*
b0 4*
b0 I*
0o*
0n*
0m*
b0 ;$
b0 N$
0o$
0m$
b0 3+
b0 H+
0n+
0l+
0b"
b0 ?"
b0 @"
0e"
0d"
0c"
0j,
b0 2,
b0 G,
0m,
0l,
0k,
0j&
b0 9&
b0 L&
0m&
0l&
0k&
0a#
b0 >#
b0 ?#
0d#
0c#
0b#
0i
b0 ?
b0 B
0l
0k
0j
0i-
b1 1-
b1 F-
1l-
0k-
1j-
0i'
b1 8'
b1 K'
1l'
0k'
1j'
0`$
b1 =$
b1 >$
1c$
0b$
1a$
0h"
b1 >"
b1 A"
1k"
0j"
1i"
1h.
b10 0.
b10 E.
0k.
1j.
0i.
0h(
b1 7(
b1 J(
1k(
0j(
1i(
0_%
b1 <%
b1 =%
1b%
0a%
1`%
1g#
b10 =#
b10 @#
0j#
1i#
0h#
0g/
b1 //
b1 D/
1j/
0i/
1h/
0g)
b0 6)
b0 I)
0j)
0i)
0h)
b0 ;%
b0 >%
0h%
0f%
0f$
b1 <$
b1 ?$
1i$
0h$
1g$
b0 .0
b0 C0
0i0
0g0
0]'
b0 :'
b0 ;'
0`'
0_'
0^'
0e1
b1 -1
b1 B1
1h1
0g1
1f1
0e+
b1 4+
b1 G+
1h+
0g+
1f+
0\(
b1 9(
b1 :(
1_(
0^(
1](
0d&
b1 :&
b1 =&
1g&
0f&
1e&
0d2
b1 ,2
b1 A2
1g2
0f2
1e2
0d,
b1 3,
b1 F,
1g,
0f,
1e,
0[)
b1 8)
b1 9)
1^)
0])
1\)
0c'
b1 9'
b1 <'
1f'
0e'
1d'
0c3
b0 +3
b0 @3
0f3
0e3
0d3
0c-
b1 2-
b1 E-
1f-
0e-
1d-
0Z*
b1 7*
b1 8*
1]*
0\*
1[*
0b(
b0 8(
b0 ;(
0e(
0d(
0c(
0b4
b1 *4
b1 ?4
1e4
0d4
1c4
0b.
b1 1.
b1 D.
1e.
0d.
1c.
b1 6*
b1 9*
1c*
1a*
0a)
b1 7)
b1 :)
1d)
0c)
1b)
b0 )5
b0 >5
0d5
0b5
0X,
b0 5,
b0 6,
0[,
0Z,
0Y,
0`6
b0 (6
b0 =6
0c6
0b6
0a6
0`0
b1 /0
b1 B0
1c0
0b0
1a0
0W-
b1 4-
b1 5-
1Z-
0Y-
1X-
0_+
b0 5+
b0 8+
0b+
0a+
0`+
0_7
b1 '7
b1 <7
1b7
0a7
1`7
0_1
b1 .1
b1 A1
1b1
0a1
1`1
0V.
b1 3.
b1 4.
1Y.
0X.
1W.
0^,
b1 4,
b1 7,
1a,
0`,
1_,
0^8
b1 &8
b1 ;8
1a8
0`8
1_8
0^2
b0 -2
b0 @2
0a2
0`2
0_2
0U/
b0 2/
b0 3/
0X/
0W/
0V/
0]-
b1 3-
b1 6-
1`-
0_-
1^-
0]9
b1 %9
b1 :9
1`9
0_9
1^9
1]3
b10 ,3
b10 ?3
0`3
1_3
0^3
b1 1/
b1 4/
1^/
1\/
0\.
b1 2.
b1 5.
1_.
0^.
1].
b0 +6
b0 ,6
0Q6
0O6
0S1
b0 01
b0 11
0V1
0U1
0T1
b0 *7
b0 +7
0P7
0N7
0[5
b0 *5
b0 =5
0^5
0]5
0\5
0R2
b0 /2
b0 02
0U2
0T2
0S2
0Z0
b0 00
b0 30
0]0
0\0
0[0
b0 )8
b0 *8
0O8
0M8
0Z6
b1 )6
b1 <6
1]6
0\6
1[6
0Q3
b1 .3
b1 /3
1T3
0S3
1R3
0Y1
b0 /1
b0 21
0\1
0[1
0Z1
b1 (9
b1 )9
1N9
1L9
0Y7
b1 (7
b1 ;7
1\7
0[7
1Z7
0P4
b1 -4
b1 .4
1S4
0R4
1Q4
0X2
b1 .2
b1 12
1[2
0Z2
1Y2
0X8
b1 '8
b1 :8
1[8
0Z8
1Y8
b0 ,4
b0 /4
0Y4
0W4
0W3
b1 -3
b1 03
1Z3
0Y3
1X3
b0 }9
07
0n'
0n&
0`"
06"
0m(
0m'
0i&
0_#
0m
05#
0l)
0l(
0h'
0^$
0l"
04$
0k*
0k)
0g(
0]%
0k#
03%
0j*
0f)
0j$
02&
0i,
0i+
0['
0a"
0g
01'
0h-
0h,
0d+
0Z(
0h&
0`#
0f"
0h
1g.
1g-
1c,
1Y)
1g'
1_$
1e#
1g"
1f/
1f.
1b-
1X*
1f(
1^%
1d$
1f#
0.*
0e/
0a.
0e)
0c%
0e$
0-+
0d1
0d0
0V,
0\'
0b&
1c2
1c1
1_0
1U-
1c+
1[(
1a'
1c&
0+-
0b3
0b2
0^1
0T.
0b,
0Z)
0`(
0b'
0*.
0a4
0a3
0]2
0S/
0a-
0Y*
0_)
0a(
1`4
1\3
1`.
1^*
1`)
0(0
0_6
0_5
0Q1
0W,
0]+
0'1
0^7
0^6
0Z5
0P2
0^0
0V-
0\,
0^+
1]8
1]7
1Y6
1O3
1]1
1U.
1[-
1],
0%3
0\9
0\8
0X7
0N4
0\2
0T/
0Z.
0\-
1[9
1W8
1[3
1Y/
1[.
0#5
0L6
0R1
0X0
0"6
0K7
0Y5
0Q2
0W1
0Y0
0!7
0J8
0X6
0P3
0V2
0X1
1I9
1W7
1O4
1U3
1W2
0}8
0V8
0T4
0V3
b110010010010100010000000 )
b110010010010100010000000 w9
b0 /
b0 y9
b0 *
b0 +
06
05"
04#
03$
02%
01&
b0 2
b0 9
00'
b1000 1"
b1000 8"
1/(
b1100 0#
b1100 7#
1.)
b10 .%
b10 5%
b110 /$
b110 6$
0-*
0,+
b1000 -&
b1000 4&
1+,
b10100 ,'
b10100 3'
0*-
b10010 +(
b10010 2(
0).
b101 )*
b101 0*
b1001 *)
b1001 1)
1(/
0'0
b10000 (+
b10000 /+
0&1
b101000 ',
b101000 .,
1%2
b1100101 &-
b1100101 --
0$3
b10000100 $/
b10000100 +/
b11011010 %.
b11011010 ,.
1#4
0"5
b0 |4
b0 %5
b100000 #0
b100000 *0
0!6
b100000 {5
b100000 $6
b1010000 "1
b1010000 )1
0~6
b1000001 x8
b1000001 !9
b1010000 z6
b1010000 #7
b10001000 !2
b10001000 (2
1}7
b10100000 y7
b10100000 "8
b1000010 }3
b1000010 &4
b110101 ~2
b110101 '3
b1100001001000010100000100000000000000000 &
0|8
1"
#10000
0"
#15000
b111 -
b0 ,
0#
b0 !
1"
#20000
0"
#25000
b1 *
b1 +
1"
#30000
0"
#35000
b10 *
b10 +
1"
#40000
0"
#45000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#50000
0"
#55000
b1 *
b1 +
1"
#60000
0"
#65000
b10 *
b10 +
1"
#70000
0"
#75000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#80000
0"
#85000
b1 *
b1 +
1"
#90000
0"
#95000
b10 *
b10 +
1"
#100000
0"
#105000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#110000
0"
#115000
b1 *
b1 +
1"
#120000
0"
#125000
b10 *
b10 +
1"
#130000
0"
#135000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#140000
0"
#145000
b1 *
b1 +
1"
#150000
0"
#155000
b10 *
b10 +
1"
#160000
0"
#165000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#170000
0"
#175000
b1 *
b1 +
1"
#180000
0"
#185000
b10 *
b10 +
1"
#190000
0"
#195000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#200000
0"
#205000
b1 *
b1 +
1"
#210000
0"
#215000
b10 *
b10 +
1"
#220000
0"
#225000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#230000
0"
#235000
b1 *
b1 +
1"
#240000
0"
#245000
b10 *
b10 +
1"
#250000
0"
#255000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#260000
0"
#265000
b1 *
b1 +
1"
#270000
0"
#275000
b10 *
b10 +
1"
#280000
0"
#285000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#290000
0"
#295000
b1 *
b1 +
1"
#300000
0"
#305000
b10 *
b10 +
1"
#310000
0"
#315000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#320000
0"
#325000
b1 *
b1 +
1"
#330000
0"
#335000
b10 *
b10 +
1"
#340000
0"
#345000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#350000
0"
#355000
b1 *
b1 +
1"
#360000
0"
#365000
b10 *
b10 +
1"
#370000
0"
#375000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#380000
0"
#385000
b1 *
b1 +
1"
#390000
0"
#395000
b10 *
b10 +
1"
#400000
0"
#405000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#410000
0"
#415000
b1 *
b1 +
1"
#420000
0"
#425000
b10 *
b10 +
1"
#430000
0"
#435000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#440000
0"
#445000
b1 *
b1 +
1"
#450000
0"
#455000
b10 *
b10 +
1"
#460000
0"
#465000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#470000
0"
#475000
b1 *
b1 +
1"
#480000
0"
#485000
b10 *
b10 +
1"
#490000
0"
#495000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#500000
0"
#505000
b1 *
b1 +
1"
#510000
0"
#515000
b10 *
b10 +
1"
#520000
0"
#525000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#530000
0"
#535000
b1 *
b1 +
1"
#540000
0"
#545000
b10 *
b10 +
1"
#550000
0"
#555000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#560000
0"
#565000
b1 *
b1 +
1"
#570000
0"
#575000
b10 *
b10 +
1"
#580000
0"
#585000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#590000
0"
#595000
b1 *
b1 +
1"
#600000
0"
#605000
b10 *
b10 +
1"
#610000
0"
#615000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#620000
0"
#625000
b1 *
b1 +
1"
#630000
0"
#635000
b10 *
b10 +
1"
#640000
0"
#645000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#650000
0"
#655000
b1 *
b1 +
1"
#660000
0"
#665000
b10 *
b10 +
1"
#670000
0"
#675000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#680000
0"
#685000
b1 *
b1 +
1"
#690000
0"
#695000
b10 *
b10 +
1"
#700000
0"
#705000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#710000
0"
#715000
b1 *
b1 +
1"
#720000
0"
#725000
b10 *
b10 +
1"
#730000
0"
#735000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#740000
0"
#745000
b1 *
b1 +
1"
#750000
0"
#755000
b10 *
b10 +
1"
#760000
0"
#765000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#770000
0"
#775000
b1 *
b1 +
1"
#780000
0"
#785000
b10 *
b10 +
1"
#790000
0"
#795000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#800000
0"
#805000
b1 *
b1 +
1"
#810000
0"
#815000
b10 *
b10 +
1"
#820000
0"
#825000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#830000
0"
#835000
b1 *
b1 +
1"
#840000
0"
#845000
b10 *
b10 +
1"
#850000
0"
#855000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#860000
0"
#865000
b1 *
b1 +
1"
#870000
0"
#875000
b10 *
b10 +
1"
#880000
0"
#885000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#890000
0"
#895000
b1 *
b1 +
1"
#900000
0"
#905000
b10 *
b10 +
1"
#910000
0"
#915000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#920000
0"
#925000
b1 *
b1 +
1"
#930000
0"
#935000
b10 *
b10 +
1"
#940000
0"
#945000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#950000
0"
#955000
b1 *
b1 +
1"
#960000
0"
#965000
b10 *
b10 +
1"
#970000
0"
#975000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#980000
0"
#985000
b1 *
b1 +
1"
#990000
0"
#995000
b10 *
b10 +
1"
#1000000
0"
#1005000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#1010000
0"
#1015000
b1 *
b1 +
1"
#1020000
0"
#1025000
b10 *
b10 +
1"
#1030000
0"
#1035000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#1040000
0"
#1045000
b1 *
b1 +
1"
#1050000
0"
#1055000
b10 *
b10 +
1"
#1060000
0"
#1065000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#1070000
0"
#1075000
b1 *
b1 +
1"
#1080000
0"
#1085000
b10 *
b10 +
1"
#1090000
0"
#1095000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#1100000
0"
#1105000
b1 *
b1 +
1"
#1110000
0"
#1115000
b10 *
b10 +
1"
#1120000
0"
#1125000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#1130000
0"
#1135000
b1 *
b1 +
1"
#1140000
0"
#1145000
b10 *
b10 +
1"
#1150000
0"
#1155000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#1160000
0"
#1165000
b1 *
b1 +
1"
#1170000
0"
#1175000
b10 *
b10 +
1"
#1180000
0"
#1185000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#1190000
0"
#1195000
b1 *
b1 +
1"
#1200000
0"
#1205000
b10 *
b10 +
1"
#1210000
0"
#1215000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#1220000
0"
#1225000
b1 *
b1 +
1"
#1230000
0"
#1235000
b10 *
b10 +
1"
#1240000
0"
#1245000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#1250000
0"
#1255000
b1 *
b1 +
1"
#1260000
0"
#1265000
b10 *
b10 +
1"
#1270000
0"
#1275000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#1280000
0"
#1285000
b1 *
b1 +
1"
#1290000
0"
#1295000
b10 *
b10 +
1"
#1300000
0"
#1305000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#1310000
0"
#1315000
b1 *
b1 +
1"
#1320000
0"
#1325000
b10 *
b10 +
1"
#1330000
0"
#1335000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#1340000
0"
#1345000
b1 *
b1 +
1"
#1350000
0"
#1355000
b10 *
b10 +
1"
#1360000
0"
#1365000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#1370000
0"
#1375000
b1 *
b1 +
1"
#1380000
0"
#1385000
b10 *
b10 +
1"
#1390000
0"
#1395000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#1400000
0"
#1405000
b1 *
b1 +
1"
#1410000
0"
#1415000
b10 *
b10 +
1"
#1420000
0"
#1425000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#1430000
0"
#1435000
b1 *
b1 +
1"
#1440000
0"
#1445000
b10 *
b10 +
1"
#1450000
0"
#1455000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#1460000
0"
#1465000
b1 *
b1 +
1"
#1470000
0"
#1475000
b10 *
b10 +
1"
#1480000
0"
#1485000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#1490000
0"
#1495000
b1 *
b1 +
1"
#1500000
0"
#1505000
b10 *
b10 +
1"
#1510000
0"
#1515000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#1520000
0"
#1525000
b1 *
b1 +
1"
#1530000
0"
#1535000
b10 *
b10 +
1"
#1540000
0"
#1545000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#1550000
0"
#1555000
b1 *
b1 +
1"
#1560000
0"
#1565000
b10 *
b10 +
1"
#1570000
0"
#1575000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#1580000
0"
#1585000
b1 *
b1 +
1"
#1590000
0"
#1595000
b10 *
b10 +
1"
#1600000
0"
#1605000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#1610000
0"
#1615000
b1 *
b1 +
1"
#1620000
0"
#1625000
b10 *
b10 +
1"
#1630000
0"
#1635000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#1640000
0"
#1645000
b1 *
b1 +
1"
#1650000
0"
#1655000
b10 *
b10 +
1"
#1660000
0"
#1665000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#1670000
0"
#1675000
b1 *
b1 +
1"
#1680000
0"
#1685000
b10 *
b10 +
1"
#1690000
0"
#1695000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#1700000
0"
#1705000
b1 *
b1 +
1"
#1710000
0"
#1715000
b10 *
b10 +
1"
#1720000
0"
#1725000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#1730000
0"
#1735000
b1 *
b1 +
1"
#1740000
0"
#1745000
b10 *
b10 +
1"
#1750000
0"
#1755000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#1760000
0"
#1765000
b1 *
b1 +
1"
#1770000
0"
#1775000
b10 *
b10 +
1"
#1780000
0"
#1785000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#1790000
0"
#1795000
b1 *
b1 +
1"
#1800000
0"
#1805000
b10 *
b10 +
1"
#1810000
0"
#1815000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#1820000
0"
#1825000
b1 *
b1 +
1"
#1830000
0"
#1835000
b10 *
b10 +
1"
#1840000
0"
#1845000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#1850000
0"
#1855000
b1 *
b1 +
1"
#1860000
0"
#1865000
b10 *
b10 +
1"
#1870000
0"
#1875000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#1880000
0"
#1885000
b1 *
b1 +
1"
#1890000
0"
#1895000
b10 *
b10 +
1"
#1900000
0"
#1905000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#1910000
0"
#1915000
b1 *
b1 +
1"
#1920000
0"
#1925000
b10 *
b10 +
1"
#1930000
0"
#1935000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#1940000
0"
#1945000
b1 *
b1 +
1"
#1950000
0"
#1955000
b10 *
b10 +
1"
#1960000
0"
#1965000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#1970000
0"
#1975000
b1 *
b1 +
1"
#1980000
0"
#1985000
b10 *
b10 +
1"
#1990000
0"
#1995000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#2000000
0"
#2005000
b1 *
b1 +
1"
#2010000
0"
#2015000
b10 *
b10 +
1"
#2020000
0"
#2025000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#2030000
0"
#2035000
b1 *
b1 +
1"
#2040000
0"
#2045000
b10 *
b10 +
1"
#2050000
0"
#2055000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#2060000
0"
#2065000
b1 *
b1 +
1"
#2070000
0"
#2075000
b10 *
b10 +
1"
#2080000
0"
#2085000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#2090000
0"
#2095000
b1 *
b1 +
1"
#2100000
0"
#2105000
b10 *
b10 +
1"
#2110000
0"
#2115000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#2120000
0"
#2125000
b1 *
b1 +
1"
#2130000
0"
#2135000
b10 *
b10 +
1"
#2140000
0"
#2145000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#2150000
0"
#2155000
b1 *
b1 +
1"
#2160000
0"
#2165000
b10 *
b10 +
1"
#2170000
0"
#2175000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#2180000
0"
#2185000
b1 *
b1 +
1"
#2190000
0"
#2195000
b10 *
b10 +
1"
#2200000
0"
#2205000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#2210000
0"
#2215000
b1 *
b1 +
1"
#2220000
0"
#2225000
b10 *
b10 +
1"
#2230000
0"
#2235000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#2240000
0"
#2245000
b1 *
b1 +
1"
#2250000
0"
#2255000
b10 *
b10 +
1"
#2260000
0"
#2265000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#2270000
0"
#2275000
b1 *
b1 +
1"
#2280000
0"
#2285000
b10 *
b10 +
1"
#2290000
0"
#2295000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#2300000
0"
#2305000
b1 *
b1 +
1"
#2310000
0"
#2315000
b10 *
b10 +
1"
#2320000
0"
#2325000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#2330000
0"
#2335000
b1 *
b1 +
1"
#2340000
0"
#2345000
b10 *
b10 +
1"
#2350000
0"
#2355000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#2360000
0"
#2365000
b1 *
b1 +
1"
#2370000
0"
#2375000
b10 *
b10 +
1"
#2380000
0"
#2385000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#2390000
0"
#2395000
b1 *
b1 +
1"
#2400000
0"
#2405000
b10 *
b10 +
1"
#2410000
0"
#2415000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#2420000
0"
#2425000
b1 *
b1 +
1"
#2430000
0"
#2435000
b10 *
b10 +
1"
#2440000
0"
#2445000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#2450000
0"
#2455000
b1 *
b1 +
1"
#2460000
0"
#2465000
b10 *
b10 +
1"
#2470000
0"
#2475000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#2480000
0"
#2485000
b1 *
b1 +
1"
#2490000
0"
#2495000
b10 *
b10 +
1"
#2500000
0"
#2505000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#2510000
0"
#2515000
b1 *
b1 +
1"
#2520000
0"
#2525000
b10 *
b10 +
1"
#2530000
0"
#2535000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#2540000
0"
#2545000
b1 *
b1 +
1"
#2550000
0"
#2555000
b10 *
b10 +
1"
#2560000
0"
#2565000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#2570000
0"
#2575000
b1 *
b1 +
1"
#2580000
0"
#2585000
b10 *
b10 +
1"
#2590000
0"
#2595000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#2600000
0"
#2605000
b1 *
b1 +
1"
#2610000
0"
#2615000
b10 *
b10 +
1"
#2620000
0"
#2625000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#2630000
0"
#2635000
b1 *
b1 +
1"
#2640000
0"
#2645000
b10 *
b10 +
1"
#2650000
0"
#2655000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#2660000
0"
#2665000
b1 *
b1 +
1"
#2670000
0"
#2675000
b10 *
b10 +
1"
#2680000
0"
#2685000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#2690000
0"
#2695000
b1 *
b1 +
1"
#2700000
0"
#2705000
b10 *
b10 +
1"
#2710000
0"
#2715000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#2720000
0"
#2725000
b1 *
b1 +
1"
#2730000
0"
#2735000
b10 *
b10 +
1"
#2740000
0"
#2745000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#2750000
0"
#2755000
b1 *
b1 +
1"
#2760000
0"
#2765000
b10 *
b10 +
1"
#2770000
0"
#2775000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#2780000
0"
#2785000
b1 *
b1 +
1"
#2790000
0"
#2795000
b10 *
b10 +
1"
#2800000
0"
#2805000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#2810000
0"
#2815000
b1 *
b1 +
1"
#2820000
0"
#2825000
b10 *
b10 +
1"
#2830000
0"
#2835000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#2840000
0"
#2845000
b1 *
b1 +
1"
#2850000
0"
#2855000
b10 *
b10 +
1"
#2860000
0"
#2865000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#2870000
0"
#2875000
b1 *
b1 +
1"
#2880000
0"
#2885000
b10 *
b10 +
1"
#2890000
0"
#2895000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#2900000
0"
#2905000
b1 *
b1 +
1"
#2910000
0"
#2915000
b10 *
b10 +
1"
#2920000
0"
#2925000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#2930000
0"
#2935000
b1 *
b1 +
1"
#2940000
0"
#2945000
b10 *
b10 +
1"
#2950000
0"
#2955000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#2960000
0"
#2965000
b1 *
b1 +
1"
#2970000
0"
#2975000
b10 *
b10 +
1"
#2980000
0"
#2985000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#2990000
0"
#2995000
b1 *
b1 +
1"
#3000000
0"
#3005000
b10 *
b10 +
1"
#3010000
0"
#3015000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#3020000
0"
#3025000
b1 *
b1 +
1"
#3030000
0"
#3035000
b10 *
b10 +
1"
#3040000
0"
#3045000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#3050000
0"
#3055000
b1 *
b1 +
1"
#3060000
0"
#3065000
b10 *
b10 +
1"
#3070000
0"
#3075000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#3080000
0"
#3085000
b1 *
b1 +
1"
#3090000
0"
#3095000
b10 *
b10 +
1"
#3100000
0"
#3105000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#3110000
0"
#3115000
b1 *
b1 +
1"
#3120000
0"
#3125000
b10 *
b10 +
1"
#3130000
0"
#3135000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#3140000
0"
#3145000
b1 *
b1 +
1"
#3150000
0"
#3155000
b10 *
b10 +
1"
#3160000
0"
#3165000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#3170000
0"
#3175000
b1 *
b1 +
1"
#3180000
0"
#3185000
b10 *
b10 +
1"
#3190000
0"
#3195000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#3200000
0"
#3205000
b1 *
b1 +
1"
#3210000
0"
#3215000
b10 *
b10 +
1"
#3220000
0"
#3225000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#3230000
0"
#3235000
b1 *
b1 +
1"
#3240000
0"
#3245000
b10 *
b10 +
1"
#3250000
0"
#3255000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#3260000
0"
#3265000
b1 *
b1 +
1"
#3270000
0"
#3275000
b10 *
b10 +
1"
#3280000
0"
#3285000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#3290000
0"
#3295000
b1 *
b1 +
1"
#3300000
0"
#3305000
b10 *
b10 +
1"
#3310000
0"
#3315000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#3320000
0"
#3325000
b1 *
b1 +
1"
#3330000
0"
#3335000
b10 *
b10 +
1"
#3340000
0"
#3345000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#3350000
0"
#3355000
b1 *
b1 +
1"
#3360000
0"
#3365000
b10 *
b10 +
1"
#3370000
0"
#3375000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#3380000
0"
#3385000
b1 *
b1 +
1"
#3390000
0"
#3395000
b10 *
b10 +
1"
#3400000
0"
#3405000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#3410000
0"
#3415000
b1 *
b1 +
1"
#3420000
0"
#3425000
b10 *
b10 +
1"
#3430000
0"
#3435000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#3440000
0"
#3445000
b1 *
b1 +
1"
#3450000
0"
#3455000
b10 *
b10 +
1"
#3460000
0"
#3465000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#3470000
0"
#3475000
b1 *
b1 +
1"
#3480000
0"
#3485000
b10 *
b10 +
1"
#3490000
0"
#3495000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#3500000
0"
#3505000
b1 *
b1 +
1"
#3510000
0"
#3515000
b10 *
b10 +
1"
#3520000
0"
#3525000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#3530000
0"
#3535000
b1 *
b1 +
1"
#3540000
0"
#3545000
b10 *
b10 +
1"
#3550000
0"
#3555000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#3560000
0"
#3565000
b1 *
b1 +
1"
#3570000
0"
#3575000
b10 *
b10 +
1"
#3580000
0"
#3585000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#3590000
0"
#3595000
b1 *
b1 +
1"
#3600000
0"
#3605000
b10 *
b10 +
1"
#3610000
0"
#3615000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#3620000
0"
#3625000
b1 *
b1 +
1"
#3630000
0"
#3635000
b10 *
b10 +
1"
#3640000
0"
#3645000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#3650000
0"
#3655000
b1 *
b1 +
1"
#3660000
0"
#3665000
b10 *
b10 +
1"
#3670000
0"
#3675000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#3680000
0"
#3685000
b1 *
b1 +
1"
#3690000
0"
#3695000
b10 *
b10 +
1"
#3700000
0"
#3705000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#3710000
0"
#3715000
b1 *
b1 +
1"
#3720000
0"
#3725000
b10 *
b10 +
1"
#3730000
0"
#3735000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#3740000
0"
#3745000
b1 *
b1 +
1"
#3750000
0"
#3755000
b10 *
b10 +
1"
#3760000
0"
#3765000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#3770000
0"
#3775000
b1 *
b1 +
1"
#3780000
0"
#3785000
b10 *
b10 +
1"
#3790000
0"
#3795000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#3800000
0"
#3805000
b1 *
b1 +
1"
#3810000
0"
#3815000
b10 *
b10 +
1"
#3820000
0"
#3825000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#3830000
0"
#3835000
b1 *
b1 +
1"
#3840000
0"
#3845000
b10 *
b10 +
1"
#3850000
0"
#3855000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#3860000
0"
#3865000
b1 *
b1 +
1"
#3870000
0"
#3875000
b10 *
b10 +
1"
#3880000
0"
#3885000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#3890000
0"
#3895000
b1 *
b1 +
1"
#3900000
0"
#3905000
b10 *
b10 +
1"
#3910000
0"
#3915000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#3920000
0"
#3925000
b1 *
b1 +
1"
#3930000
0"
#3935000
b10 *
b10 +
1"
#3940000
0"
#3945000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#3950000
0"
#3955000
b1 *
b1 +
1"
#3960000
0"
#3965000
b10 *
b10 +
1"
#3970000
0"
#3975000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#3980000
0"
#3985000
b1 *
b1 +
1"
#3990000
0"
#3995000
b10 *
b10 +
1"
#4000000
0"
#4005000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#4010000
0"
#4015000
b1 *
b1 +
1"
#4020000
0"
#4025000
b10 *
b10 +
1"
#4030000
0"
#4035000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#4040000
0"
#4045000
b1 *
b1 +
1"
#4050000
0"
#4055000
b10 *
b10 +
1"
#4060000
0"
#4065000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#4070000
0"
#4075000
b1 *
b1 +
1"
#4080000
0"
#4085000
b10 *
b10 +
1"
#4090000
0"
#4095000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#4100000
0"
#4105000
b1 *
b1 +
1"
#4110000
0"
#4115000
b10 *
b10 +
1"
#4120000
0"
#4125000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#4130000
0"
#4135000
b1 *
b1 +
1"
#4140000
0"
#4145000
b10 *
b10 +
1"
#4150000
0"
#4155000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#4160000
0"
#4165000
b1 *
b1 +
1"
#4170000
0"
#4175000
b10 *
b10 +
1"
#4180000
0"
#4185000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#4190000
0"
#4195000
b1 *
b1 +
1"
#4200000
0"
#4205000
b10 *
b10 +
1"
#4210000
0"
#4215000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#4220000
0"
#4225000
b1 *
b1 +
1"
#4230000
0"
#4235000
b10 *
b10 +
1"
#4240000
0"
#4245000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#4250000
0"
#4255000
b1 *
b1 +
1"
#4260000
0"
#4265000
b10 *
b10 +
1"
#4270000
0"
#4275000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#4280000
0"
#4285000
b1 *
b1 +
1"
#4290000
0"
#4295000
b10 *
b10 +
1"
#4300000
0"
#4305000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#4310000
0"
#4315000
b1 *
b1 +
1"
#4320000
0"
#4325000
b10 *
b10 +
1"
#4330000
0"
#4335000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#4340000
0"
#4345000
b1 *
b1 +
1"
#4350000
0"
#4355000
b10 *
b10 +
1"
#4360000
0"
#4365000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#4370000
0"
#4375000
b1 *
b1 +
1"
#4380000
0"
#4385000
b10 *
b10 +
1"
#4390000
0"
#4395000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#4400000
0"
#4405000
b1 *
b1 +
1"
#4410000
0"
#4415000
b10 *
b10 +
1"
#4420000
0"
#4425000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#4430000
0"
#4435000
b1 *
b1 +
1"
#4440000
0"
#4445000
b10 *
b10 +
1"
#4450000
0"
#4455000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#4460000
0"
#4465000
b1 *
b1 +
1"
#4470000
0"
#4475000
b10 *
b10 +
1"
#4480000
0"
#4485000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#4490000
0"
#4495000
b1 *
b1 +
1"
#4500000
0"
#4505000
b10 *
b10 +
1"
#4510000
0"
#4515000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#4520000
0"
#4525000
b1 *
b1 +
1"
#4530000
0"
#4535000
b10 *
b10 +
1"
#4540000
0"
#4545000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#4550000
0"
#4555000
b1 *
b1 +
1"
#4560000
0"
#4565000
b10 *
b10 +
1"
#4570000
0"
#4575000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#4580000
0"
#4585000
b1 *
b1 +
1"
#4590000
0"
#4595000
b10 *
b10 +
1"
#4600000
0"
#4605000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#4610000
0"
#4615000
b1 *
b1 +
1"
#4620000
0"
#4625000
b10 *
b10 +
1"
#4630000
0"
#4635000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#4640000
0"
#4645000
b1 *
b1 +
1"
#4650000
0"
#4655000
b10 *
b10 +
1"
#4660000
0"
#4665000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#4670000
0"
#4675000
b1 *
b1 +
1"
#4680000
0"
#4685000
b10 *
b10 +
1"
#4690000
0"
#4695000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#4700000
0"
#4705000
b1 *
b1 +
1"
#4710000
0"
#4715000
b10 *
b10 +
1"
#4720000
0"
#4725000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#4730000
0"
#4735000
b1 *
b1 +
1"
#4740000
0"
#4745000
b10 *
b10 +
1"
#4750000
0"
#4755000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#4760000
0"
#4765000
b1 *
b1 +
1"
#4770000
0"
#4775000
b10 *
b10 +
1"
#4780000
0"
#4785000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#4790000
0"
#4795000
b1 *
b1 +
1"
#4800000
0"
#4805000
b10 *
b10 +
1"
#4810000
0"
#4815000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#4820000
0"
#4825000
b1 *
b1 +
1"
#4830000
0"
#4835000
b10 *
b10 +
1"
#4840000
0"
#4845000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#4850000
0"
#4855000
b1 *
b1 +
1"
#4860000
0"
#4865000
b10 *
b10 +
1"
#4870000
0"
#4875000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#4880000
0"
#4885000
b1 *
b1 +
1"
#4890000
0"
#4895000
b10 *
b10 +
1"
#4900000
0"
#4905000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#4910000
0"
#4915000
b1 *
b1 +
1"
#4920000
0"
#4925000
b10 *
b10 +
1"
#4930000
0"
#4935000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#4940000
0"
#4945000
b1 *
b1 +
1"
#4950000
0"
#4955000
b10 *
b10 +
1"
#4960000
0"
#4965000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#4970000
0"
#4975000
b1 *
b1 +
1"
#4980000
0"
#4985000
b10 *
b10 +
1"
#4990000
0"
#4995000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#5000000
0"
#5005000
b1 *
b1 +
1"
#5010000
0"
#5015000
b10 *
b10 +
1"
#5020000
0"
#5025000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#5030000
0"
#5035000
b1 *
b1 +
1"
#5040000
0"
#5045000
b10 *
b10 +
1"
#5050000
0"
#5055000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#5060000
0"
#5065000
b1 *
b1 +
1"
#5070000
0"
#5075000
b10 *
b10 +
1"
#5080000
0"
#5085000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#5090000
0"
#5095000
b1 *
b1 +
1"
#5100000
0"
#5105000
b10 *
b10 +
1"
#5110000
0"
#5115000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#5120000
0"
#5125000
b1 *
b1 +
1"
#5130000
0"
#5135000
b10 *
b10 +
1"
#5140000
0"
#5145000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#5150000
0"
#5155000
b1 *
b1 +
1"
#5160000
0"
#5165000
b10 *
b10 +
1"
#5170000
0"
#5175000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#5180000
0"
#5185000
b1 *
b1 +
1"
#5190000
0"
#5195000
b10 *
b10 +
1"
#5200000
0"
#5205000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#5210000
0"
#5215000
b1 *
b1 +
1"
#5220000
0"
#5225000
b10 *
b10 +
1"
#5230000
0"
#5235000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#5240000
0"
#5245000
b1 *
b1 +
1"
#5250000
0"
#5255000
b10 *
b10 +
1"
#5260000
0"
#5265000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#5270000
0"
#5275000
b1 *
b1 +
1"
#5280000
0"
#5285000
b10 *
b10 +
1"
#5290000
0"
#5295000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#5300000
0"
#5305000
b1 *
b1 +
1"
#5310000
0"
#5315000
b10 *
b10 +
1"
#5320000
0"
#5325000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#5330000
0"
#5335000
b1 *
b1 +
1"
#5340000
0"
#5345000
b10 *
b10 +
1"
#5350000
0"
#5355000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#5360000
0"
#5365000
b1 *
b1 +
1"
#5370000
0"
#5375000
b10 *
b10 +
1"
#5380000
0"
#5385000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#5390000
0"
#5395000
b1 *
b1 +
1"
#5400000
0"
#5405000
b10 *
b10 +
1"
#5410000
0"
#5415000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#5420000
0"
#5425000
b1 *
b1 +
1"
#5430000
0"
#5435000
b10 *
b10 +
1"
#5440000
0"
#5445000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#5450000
0"
#5455000
b1 *
b1 +
1"
#5460000
0"
#5465000
b10 *
b10 +
1"
#5470000
0"
#5475000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#5480000
0"
#5485000
b1 *
b1 +
1"
#5490000
0"
#5495000
b10 *
b10 +
1"
#5500000
0"
#5505000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#5510000
0"
#5515000
b1 *
b1 +
1"
#5520000
0"
#5525000
b10 *
b10 +
1"
#5530000
0"
#5535000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#5540000
0"
#5545000
b1 *
b1 +
1"
#5550000
0"
#5555000
b10 *
b10 +
1"
#5560000
0"
#5565000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#5570000
0"
#5575000
b1 *
b1 +
1"
#5580000
0"
#5585000
b10 *
b10 +
1"
#5590000
0"
#5595000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#5600000
0"
#5605000
b1 *
b1 +
1"
#5610000
0"
#5615000
b10 *
b10 +
1"
#5620000
0"
#5625000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#5630000
0"
#5635000
b1 *
b1 +
1"
#5640000
0"
#5645000
b10 *
b10 +
1"
#5650000
0"
#5655000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#5660000
0"
#5665000
b1 *
b1 +
1"
#5670000
0"
#5675000
b10 *
b10 +
1"
#5680000
0"
#5685000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#5690000
0"
#5695000
b1 *
b1 +
1"
#5700000
0"
#5705000
b10 *
b10 +
1"
#5710000
0"
#5715000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#5720000
0"
#5725000
b1 *
b1 +
1"
#5730000
0"
#5735000
b10 *
b10 +
1"
#5740000
0"
#5745000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#5750000
0"
#5755000
b1 *
b1 +
1"
#5760000
0"
#5765000
b10 *
b10 +
1"
#5770000
0"
#5775000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#5780000
0"
#5785000
b1 *
b1 +
1"
#5790000
0"
#5795000
b10 *
b10 +
1"
#5800000
0"
#5805000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#5810000
0"
#5815000
b1 *
b1 +
1"
#5820000
0"
#5825000
b10 *
b10 +
1"
#5830000
0"
#5835000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#5840000
0"
#5845000
b1 *
b1 +
1"
#5850000
0"
#5855000
b10 *
b10 +
1"
#5860000
0"
#5865000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#5870000
0"
#5875000
b1 *
b1 +
1"
#5880000
0"
#5885000
b10 *
b10 +
1"
#5890000
0"
#5895000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#5900000
0"
#5905000
b1 *
b1 +
1"
#5910000
0"
#5915000
b10 *
b10 +
1"
#5920000
0"
#5925000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#5930000
0"
#5935000
b1 *
b1 +
1"
#5940000
0"
#5945000
b10 *
b10 +
1"
#5950000
0"
#5955000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#5960000
0"
#5965000
b1 *
b1 +
1"
#5970000
0"
#5975000
b10 *
b10 +
1"
#5980000
0"
#5985000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#5990000
0"
#5995000
b1 *
b1 +
1"
#6000000
0"
#6005000
b10 *
b10 +
1"
#6010000
0"
#6015000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#6020000
0"
#6025000
b1 *
b1 +
1"
#6030000
0"
#6035000
b10 *
b10 +
1"
#6040000
0"
#6045000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#6050000
0"
#6055000
b1 *
b1 +
1"
#6060000
0"
#6065000
b10 *
b10 +
1"
#6070000
0"
#6075000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#6080000
0"
#6085000
b1 *
b1 +
1"
#6090000
0"
#6095000
b10 *
b10 +
1"
#6100000
0"
#6105000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#6110000
0"
#6115000
b1 *
b1 +
1"
#6120000
0"
#6125000
b10 *
b10 +
1"
#6130000
0"
#6135000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#6140000
0"
#6145000
b1 *
b1 +
1"
#6150000
0"
#6155000
b10 *
b10 +
1"
#6160000
0"
#6165000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#6170000
0"
#6175000
b1 *
b1 +
1"
#6180000
0"
#6185000
b10 *
b10 +
1"
#6190000
0"
#6195000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#6200000
0"
#6205000
b1 *
b1 +
1"
#6210000
0"
#6215000
b10 *
b10 +
1"
#6220000
0"
#6225000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#6230000
0"
#6235000
b1 *
b1 +
1"
#6240000
0"
#6245000
b10 *
b10 +
1"
#6250000
0"
#6255000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#6260000
0"
#6265000
b1 *
b1 +
1"
#6270000
0"
#6275000
b10 *
b10 +
1"
#6280000
0"
#6285000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#6290000
0"
#6295000
b1 *
b1 +
1"
#6300000
0"
#6305000
b10 *
b10 +
1"
#6310000
0"
#6315000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#6320000
0"
#6325000
b1 *
b1 +
1"
#6330000
0"
#6335000
b10 *
b10 +
1"
#6340000
0"
#6345000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#6350000
0"
#6355000
b1 *
b1 +
1"
#6360000
0"
#6365000
b10 *
b10 +
1"
#6370000
0"
#6375000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#6380000
0"
#6385000
b1 *
b1 +
1"
#6390000
0"
#6395000
b10 *
b10 +
1"
#6400000
0"
#6405000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#6410000
0"
#6415000
b1 *
b1 +
1"
#6420000
0"
#6425000
b10 *
b10 +
1"
#6430000
0"
#6435000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#6440000
0"
#6445000
b1 *
b1 +
1"
#6450000
0"
#6455000
b10 *
b10 +
1"
#6460000
0"
#6465000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#6470000
0"
#6475000
b1 *
b1 +
1"
#6480000
0"
#6485000
b10 *
b10 +
1"
#6490000
0"
#6495000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#6500000
0"
#6505000
b1 *
b1 +
1"
#6510000
0"
#6515000
b10 *
b10 +
1"
#6520000
0"
#6525000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#6530000
0"
#6535000
b1 *
b1 +
1"
#6540000
0"
#6545000
b10 *
b10 +
1"
#6550000
0"
#6555000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#6560000
0"
#6565000
b1 *
b1 +
1"
#6570000
0"
#6575000
b10 *
b10 +
1"
#6580000
0"
#6585000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#6590000
0"
#6595000
b1 *
b1 +
1"
#6600000
0"
#6605000
b10 *
b10 +
1"
#6610000
0"
#6615000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#6620000
0"
#6625000
b1 *
b1 +
1"
#6630000
0"
#6635000
b10 *
b10 +
1"
#6640000
0"
#6645000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#6650000
0"
#6655000
b1 *
b1 +
1"
#6660000
0"
#6665000
b10 *
b10 +
1"
#6670000
0"
#6675000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#6680000
0"
#6685000
b1 *
b1 +
1"
#6690000
0"
#6695000
b10 *
b10 +
1"
#6700000
0"
#6705000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#6710000
0"
#6715000
b1 *
b1 +
1"
#6720000
0"
#6725000
b10 *
b10 +
1"
#6730000
0"
#6735000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#6740000
0"
#6745000
b1 *
b1 +
1"
#6750000
0"
#6755000
b10 *
b10 +
1"
#6760000
0"
#6765000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#6770000
0"
#6775000
b1 *
b1 +
1"
#6780000
0"
#6785000
b10 *
b10 +
1"
#6790000
0"
#6795000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#6800000
0"
#6805000
b1 *
b1 +
1"
#6810000
0"
#6815000
b10 *
b10 +
1"
#6820000
0"
#6825000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#6830000
0"
#6835000
b1 *
b1 +
1"
#6840000
0"
#6845000
b10 *
b10 +
1"
#6850000
0"
#6855000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#6860000
0"
#6865000
b1 *
b1 +
1"
#6870000
0"
#6875000
b10 *
b10 +
1"
#6880000
0"
#6885000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#6890000
0"
#6895000
b1 *
b1 +
1"
#6900000
0"
#6905000
b10 *
b10 +
1"
#6910000
0"
#6915000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#6920000
0"
#6925000
b1 *
b1 +
1"
#6930000
0"
#6935000
b10 *
b10 +
1"
#6940000
0"
#6945000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#6950000
0"
#6955000
b1 *
b1 +
1"
#6960000
0"
#6965000
b10 *
b10 +
1"
#6970000
0"
#6975000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#6980000
0"
#6985000
b1 *
b1 +
1"
#6990000
0"
#6995000
b10 *
b10 +
1"
#7000000
0"
#7005000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#7010000
0"
#7015000
b1 *
b1 +
1"
#7020000
0"
#7025000
b10 *
b10 +
1"
#7030000
0"
#7035000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#7040000
0"
#7045000
b1 *
b1 +
1"
#7050000
0"
#7055000
b10 *
b10 +
1"
#7060000
0"
#7065000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#7070000
0"
#7075000
b1 *
b1 +
1"
#7080000
0"
#7085000
b10 *
b10 +
1"
#7090000
0"
#7095000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#7100000
0"
#7105000
b1 *
b1 +
1"
#7110000
0"
#7115000
b10 *
b10 +
1"
#7120000
0"
#7125000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#7130000
0"
#7135000
b1 *
b1 +
1"
#7140000
0"
#7145000
b10 *
b10 +
1"
#7150000
0"
#7155000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#7160000
0"
#7165000
b1 *
b1 +
1"
#7170000
0"
#7175000
b10 *
b10 +
1"
#7180000
0"
#7185000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#7190000
0"
#7195000
b1 *
b1 +
1"
#7200000
0"
#7205000
b10 *
b10 +
1"
#7210000
0"
#7215000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#7220000
0"
#7225000
b1 *
b1 +
1"
#7230000
0"
#7235000
b10 *
b10 +
1"
#7240000
0"
#7245000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#7250000
0"
#7255000
b1 *
b1 +
1"
#7260000
0"
#7265000
b10 *
b10 +
1"
#7270000
0"
#7275000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#7280000
0"
#7285000
b1 *
b1 +
1"
#7290000
0"
#7295000
b10 *
b10 +
1"
#7300000
0"
#7305000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#7310000
0"
#7315000
b1 *
b1 +
1"
#7320000
0"
#7325000
b10 *
b10 +
1"
#7330000
0"
#7335000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#7340000
0"
#7345000
b1 *
b1 +
1"
#7350000
0"
#7355000
b10 *
b10 +
1"
#7360000
0"
#7365000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#7370000
0"
#7375000
b1 *
b1 +
1"
#7380000
0"
#7385000
b10 *
b10 +
1"
#7390000
0"
#7395000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#7400000
0"
#7405000
b1 *
b1 +
1"
#7410000
0"
#7415000
b10 *
b10 +
1"
#7420000
0"
#7425000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#7430000
0"
#7435000
b1 *
b1 +
1"
#7440000
0"
#7445000
b10 *
b10 +
1"
#7450000
0"
#7455000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#7460000
0"
#7465000
b1 *
b1 +
1"
#7470000
0"
#7475000
b10 *
b10 +
1"
#7480000
0"
#7485000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#7490000
0"
#7495000
b1 *
b1 +
1"
#7500000
0"
#7505000
b10 *
b10 +
1"
#7510000
0"
#7515000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#7520000
0"
#7525000
b1 *
b1 +
1"
#7530000
0"
#7535000
b10 *
b10 +
1"
#7540000
0"
#7545000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#7550000
0"
#7555000
b1 *
b1 +
1"
#7560000
0"
#7565000
b10 *
b10 +
1"
#7570000
0"
#7575000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#7580000
0"
#7585000
b1 *
b1 +
1"
#7590000
0"
#7595000
b10 *
b10 +
1"
#7600000
0"
#7605000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#7610000
0"
#7615000
b1 *
b1 +
1"
#7620000
0"
#7625000
b10 *
b10 +
1"
#7630000
0"
#7635000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#7640000
0"
#7645000
b1 *
b1 +
1"
#7650000
0"
#7655000
b10 *
b10 +
1"
#7660000
0"
#7665000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#7670000
0"
#7675000
b1 *
b1 +
1"
#7680000
0"
#7685000
b10 *
b10 +
1"
#7690000
0"
#7695000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#7700000
0"
#7705000
b1 *
b1 +
1"
#7710000
0"
#7715000
b10 *
b10 +
1"
#7720000
0"
#7725000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#7730000
0"
#7735000
b1 *
b1 +
1"
#7740000
0"
#7745000
b10 *
b10 +
1"
#7750000
0"
#7755000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#7760000
0"
#7765000
b1 *
b1 +
1"
#7770000
0"
#7775000
b10 *
b10 +
1"
#7780000
0"
#7785000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#7790000
0"
#7795000
b1 *
b1 +
1"
#7800000
0"
#7805000
b10 *
b10 +
1"
#7810000
0"
#7815000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#7820000
0"
#7825000
b1 *
b1 +
1"
#7830000
0"
#7835000
b10 *
b10 +
1"
#7840000
0"
#7845000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#7850000
0"
#7855000
b1 *
b1 +
1"
#7860000
0"
#7865000
b10 *
b10 +
1"
#7870000
0"
#7875000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#7880000
0"
#7885000
b1 *
b1 +
1"
#7890000
0"
#7895000
b10 *
b10 +
1"
#7900000
0"
#7905000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#7910000
0"
#7915000
b1 *
b1 +
1"
#7920000
0"
#7925000
b10 *
b10 +
1"
#7930000
0"
#7935000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#7940000
0"
#7945000
b1 *
b1 +
1"
#7950000
0"
#7955000
b10 *
b10 +
1"
#7960000
0"
#7965000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#7970000
0"
#7975000
b1 *
b1 +
1"
#7980000
0"
#7985000
b10 *
b10 +
1"
#7990000
0"
#7995000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#8000000
0"
#8005000
b1 *
b1 +
1"
#8010000
0"
#8015000
b10 *
b10 +
1"
#8020000
0"
#8025000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#8030000
0"
#8035000
b1 *
b1 +
1"
#8040000
0"
#8045000
b10 *
b10 +
1"
#8050000
0"
#8055000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#8060000
0"
#8065000
b1 *
b1 +
1"
#8070000
0"
#8075000
b10 *
b10 +
1"
#8080000
0"
#8085000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#8090000
0"
#8095000
b1 *
b1 +
1"
#8100000
0"
#8105000
b10 *
b10 +
1"
#8110000
0"
#8115000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#8120000
0"
#8125000
b1 *
b1 +
1"
#8130000
0"
#8135000
b10 *
b10 +
1"
#8140000
0"
#8145000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#8150000
0"
#8155000
b1 *
b1 +
1"
#8160000
0"
#8165000
b10 *
b10 +
1"
#8170000
0"
#8175000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#8180000
0"
#8185000
b1 *
b1 +
1"
#8190000
0"
#8195000
b10 *
b10 +
1"
#8200000
0"
#8205000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#8210000
0"
#8215000
b1 *
b1 +
1"
#8220000
0"
#8225000
b10 *
b10 +
1"
#8230000
0"
#8235000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#8240000
0"
#8245000
b1 *
b1 +
1"
#8250000
0"
#8255000
b10 *
b10 +
1"
#8260000
0"
#8265000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#8270000
0"
#8275000
b1 *
b1 +
1"
#8280000
0"
#8285000
b10 *
b10 +
1"
#8290000
0"
#8295000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#8300000
0"
#8305000
b1 *
b1 +
1"
#8310000
0"
#8315000
b10 *
b10 +
1"
#8320000
0"
#8325000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#8330000
0"
#8335000
b1 *
b1 +
1"
#8340000
0"
#8345000
b10 *
b10 +
1"
#8350000
0"
#8355000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#8360000
0"
#8365000
b1 *
b1 +
1"
#8370000
0"
#8375000
b10 *
b10 +
1"
#8380000
0"
#8385000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#8390000
0"
#8395000
b1 *
b1 +
1"
#8400000
0"
#8405000
b10 *
b10 +
1"
#8410000
0"
#8415000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#8420000
0"
#8425000
b1 *
b1 +
1"
#8430000
0"
#8435000
b10 *
b10 +
1"
#8440000
0"
#8445000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#8450000
0"
#8455000
b1 *
b1 +
1"
#8460000
0"
#8465000
b10 *
b10 +
1"
#8470000
0"
#8475000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#8480000
0"
#8485000
b1 *
b1 +
1"
#8490000
0"
#8495000
b10 *
b10 +
1"
#8500000
0"
#8505000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#8510000
0"
#8515000
b1 *
b1 +
1"
#8520000
0"
#8525000
b10 *
b10 +
1"
#8530000
0"
#8535000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#8540000
0"
#8545000
b1 *
b1 +
1"
#8550000
0"
#8555000
b10 *
b10 +
1"
#8560000
0"
#8565000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#8570000
0"
#8575000
b1 *
b1 +
1"
#8580000
0"
#8585000
b10 *
b10 +
1"
#8590000
0"
#8595000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#8600000
0"
#8605000
b1 *
b1 +
1"
#8610000
0"
#8615000
b10 *
b10 +
1"
#8620000
0"
#8625000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#8630000
0"
#8635000
b1 *
b1 +
1"
#8640000
0"
#8645000
b10 *
b10 +
1"
#8650000
0"
#8655000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#8660000
0"
#8665000
b1 *
b1 +
1"
#8670000
0"
#8675000
b10 *
b10 +
1"
#8680000
0"
#8685000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#8690000
0"
#8695000
b1 *
b1 +
1"
#8700000
0"
#8705000
b10 *
b10 +
1"
#8710000
0"
#8715000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#8720000
0"
#8725000
b1 *
b1 +
1"
#8730000
0"
#8735000
b10 *
b10 +
1"
#8740000
0"
#8745000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#8750000
0"
#8755000
b1 *
b1 +
1"
#8760000
0"
#8765000
b10 *
b10 +
1"
#8770000
0"
#8775000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#8780000
0"
#8785000
b1 *
b1 +
1"
#8790000
0"
#8795000
b10 *
b10 +
1"
#8800000
0"
#8805000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#8810000
0"
#8815000
b1 *
b1 +
1"
#8820000
0"
#8825000
b10 *
b10 +
1"
#8830000
0"
#8835000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#8840000
0"
#8845000
b1 *
b1 +
1"
#8850000
0"
#8855000
b10 *
b10 +
1"
#8860000
0"
#8865000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#8870000
0"
#8875000
b1 *
b1 +
1"
#8880000
0"
#8885000
b10 *
b10 +
1"
#8890000
0"
#8895000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#8900000
0"
#8905000
b1 *
b1 +
1"
#8910000
0"
#8915000
b10 *
b10 +
1"
#8920000
0"
#8925000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#8930000
0"
#8935000
b1 *
b1 +
1"
#8940000
0"
#8945000
b10 *
b10 +
1"
#8950000
0"
#8955000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#8960000
0"
#8965000
b1 *
b1 +
1"
#8970000
0"
#8975000
b10 *
b10 +
1"
#8980000
0"
#8985000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#8990000
0"
#8995000
b1 *
b1 +
1"
#9000000
0"
#9005000
b10 *
b10 +
1"
#9010000
0"
#9015000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#9020000
0"
#9025000
b1 *
b1 +
1"
#9030000
0"
#9035000
b10 *
b10 +
1"
#9040000
0"
#9045000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#9050000
0"
#9055000
b1 *
b1 +
1"
#9060000
0"
#9065000
b10 *
b10 +
1"
#9070000
0"
#9075000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#9080000
0"
#9085000
b1 *
b1 +
1"
#9090000
0"
#9095000
b10 *
b10 +
1"
#9100000
0"
#9105000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#9110000
0"
#9115000
b1 *
b1 +
1"
#9120000
0"
#9125000
b10 *
b10 +
1"
#9130000
0"
#9135000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#9140000
0"
#9145000
b1 *
b1 +
1"
#9150000
0"
#9155000
b10 *
b10 +
1"
#9160000
0"
#9165000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#9170000
0"
#9175000
b1 *
b1 +
1"
#9180000
0"
#9185000
b10 *
b10 +
1"
#9190000
0"
#9195000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#9200000
0"
#9205000
b1 *
b1 +
1"
#9210000
0"
#9215000
b10 *
b10 +
1"
#9220000
0"
#9225000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#9230000
0"
#9235000
b1 *
b1 +
1"
#9240000
0"
#9245000
b10 *
b10 +
1"
#9250000
0"
#9255000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#9260000
0"
#9265000
b1 *
b1 +
1"
#9270000
0"
#9275000
b10 *
b10 +
1"
#9280000
0"
#9285000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#9290000
0"
#9295000
b1 *
b1 +
1"
#9300000
0"
#9305000
b10 *
b10 +
1"
#9310000
0"
#9315000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#9320000
0"
#9325000
b1 *
b1 +
1"
#9330000
0"
#9335000
b10 *
b10 +
1"
#9340000
0"
#9345000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#9350000
0"
#9355000
b1 *
b1 +
1"
#9360000
0"
#9365000
b10 *
b10 +
1"
#9370000
0"
#9375000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#9380000
0"
#9385000
b1 *
b1 +
1"
#9390000
0"
#9395000
b10 *
b10 +
1"
#9400000
0"
#9405000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#9410000
0"
#9415000
b1 *
b1 +
1"
#9420000
0"
#9425000
b10 *
b10 +
1"
#9430000
0"
#9435000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#9440000
0"
#9445000
b1 *
b1 +
1"
#9450000
0"
#9455000
b10 *
b10 +
1"
#9460000
0"
#9465000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#9470000
0"
#9475000
b1 *
b1 +
1"
#9480000
0"
#9485000
b10 *
b10 +
1"
#9490000
0"
#9495000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#9500000
0"
#9505000
b1 *
b1 +
1"
#9510000
0"
#9515000
b10 *
b10 +
1"
#9520000
0"
#9525000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#9530000
0"
#9535000
b1 *
b1 +
1"
#9540000
0"
#9545000
b10 *
b10 +
1"
#9550000
0"
#9555000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#9560000
0"
#9565000
b1 *
b1 +
1"
#9570000
0"
#9575000
b10 *
b10 +
1"
#9580000
0"
#9585000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#9590000
0"
#9595000
b1 *
b1 +
1"
#9600000
0"
#9605000
b10 *
b10 +
1"
#9610000
0"
#9615000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#9620000
0"
#9625000
b1 *
b1 +
1"
#9630000
0"
#9635000
b10 *
b10 +
1"
#9640000
0"
#9645000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#9650000
0"
#9655000
b1 *
b1 +
1"
#9660000
0"
#9665000
b10 *
b10 +
1"
#9670000
0"
#9675000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#9680000
0"
#9685000
b1 *
b1 +
1"
#9690000
0"
#9695000
b10 *
b10 +
1"
#9700000
0"
#9705000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#9710000
0"
#9715000
b1 *
b1 +
1"
#9720000
0"
#9725000
b10 *
b10 +
1"
#9730000
0"
#9735000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#9740000
0"
#9745000
b1 *
b1 +
1"
#9750000
0"
#9755000
b10 *
b10 +
1"
#9760000
0"
#9765000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#9770000
0"
#9775000
b1 *
b1 +
1"
#9780000
0"
#9785000
b10 *
b10 +
1"
#9790000
0"
#9795000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#9800000
0"
#9805000
b1 *
b1 +
1"
#9810000
0"
#9815000
b10 *
b10 +
1"
#9820000
0"
#9825000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#9830000
0"
#9835000
b1 *
b1 +
1"
#9840000
0"
#9845000
b10 *
b10 +
1"
#9850000
0"
#9855000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#9860000
0"
#9865000
b1 *
b1 +
1"
#9870000
0"
#9875000
b10 *
b10 +
1"
#9880000
0"
#9885000
b1 0:
b1 4:
12:
b0 (:
b1 1:
b1 9:
0&:
0):
b10000 z9
0":
1.:
b0 %:
b0 -:
b10000 ~9
b0 $:
b0 +:
b10 !:
b10 ;:
08:
06:
03:
0,:
0*:
0':
1::
b0 /:
b0 #:
b100 }9
b100 /
b100 y9
b0 *
b0 +
1"
#9890000
0"
#9895000
b1 *
b1 +
1"
#9900000
0"
#9905000
b10 *
b10 +
1"
#9910000
0"
#9915000
b1 z9
b1 $:
b1 (:
b1 ~9
b0 0:
b0 4:
1&:
02:
b1 %:
b1 -:
b0 1:
b0 9:
1":
0.:
b1 !:
b1 ;:
0::
b0 }9
b0 /
b0 y9
b0 *
b0 +
1"
#9920000
0"
#9925000
b1 *
b1 +
1"
#9930000
0"
#9935000
b10 *
b10 +
1"
#9940000
0"
#9945000
b10 z9
b10 ~9
b10 $:
b10 (:
16:
13:
1*:
1':
b1 /:
b1 #:
b1 }9
b1 /
b1 y9
b0 *
b0 +
1"
#9950000
0"
#9955000
b1 *
b1 +
1"
#9960000
0"
#9965000
b10 *
b10 +
1"
#9970000
0"
#9975000
b1 +:
0&:
1):
b100 z9
b10 %:
b10 -:
b100 ~9
b100 $:
b0 (:
18:
06:
03:
1,:
0*:
0':
b10 /:
b10 #:
b10 }9
b10 /
b10 y9
b0 *
b0 +
1"
#9980000
0"
#9985000
b1 *
b1 +
1"
#9990000
0"
#9995000
b10 *
b10 +
1"
#10000000
0"
#10005000
b1000 z9
b1000 ~9
b1000 $:
b10 +:
16:
13:
1*:
1':
b11 /:
b11 #:
b11 }9
b11 /
b11 y9
b0 *
b0 +
1"
#10010000
0"
#10015000
b1 *
b1 +
1"
